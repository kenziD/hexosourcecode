{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/escape.png","path":"img/escape.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"source/img/encodeURI-encode.png","path":"img/encodeURI-encode.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/img/escape-encode.png","path":"img/escape-encode.png","modified":0,"renderable":0},{"_id":"source/img/encodeURIComponent-noencode.png","path":"img/encodeURIComponent-noencode.png","modified":0,"renderable":0},{"_id":"source/img/escape-noencode.png","path":"img/escape-noencode.png","modified":0,"renderable":0},{"_id":"source/img/encodeURIComponent-encode.png","path":"img/encodeURIComponent-encode.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/img/encodeURI-noencode.png","path":"img/encodeURI-noencode.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1444320020000},{"_id":"source/.DS_Store","hash":"f26c876bd4fba95f5ab869382d8f4dac5bd319e6","modified":1459436981000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1444320020000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1444320020000},{"_id":"themes/landscape/_config.yml","hash":"693c87eb596b6d3b7caec10bb9c2a37ef638a40e","modified":1444320020000},{"_id":"source/_posts/从vue源码角度分析v-text和-插值的区别.md","hash":"f17ebb3cbf2c4d77b7f9843f41d6cc44231aa6ee","modified":1548595477881},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1444320020000},{"_id":"source/_posts/ChartCompare.md","hash":"3b2c6b41f5ee47853acafa6b6c230a0cda1949de","modified":1457945422000},{"_id":"source/_posts/IIFE-md.md","hash":"a437f0c75d95d1383b6d4c097b8478a3f5c0d3b3","modified":1458484259000},{"_id":"source/_posts/analyze-1.md","hash":"25b1895b64b35ebe7a9528119b2017a1f16792c4","modified":1449142306000},{"_id":"source/_posts/4xx.md","hash":"286b272d3d0c132eebb75f1601d79b7abe10007f","modified":1531400421000},{"_id":"source/_posts/circle.md","hash":"c50447941941e68958fcd8cb5ac7b89674c8523e","modified":1445314322000},{"_id":"source/_posts/css-learning.md","hash":"64dde9a21dfaa9466c2f522cd0b47601ed74025f","modified":1444320020000},{"_id":"source/_posts/css-specifity.md","hash":"10ffa6bcf234edb541623b3cbe20c4b52af9e900","modified":1458820560000},{"_id":"source/_posts/delete-remote-repository-folder.md","hash":"953d187525116d0a0e5e777435c73a73738059a3","modified":1447658150000},{"_id":"source/_posts/gif.md","hash":"ccdd34188f5882ab44982ba0055c8fef75daf46a","modified":1444320020000},{"_id":"source/_posts/hello-world.md","hash":"640446a31e24233a19bcfc990569f3c98b674861","modified":1444320020000},{"_id":"source/_posts/gitError.md","hash":"510c21bdc143c79030d73ec70d9ec1a5ce5cfde5","modified":1462630694000},{"_id":"source/_posts/hexo-diy.md","hash":"e551423d4b5bca31a962f714b2f6bad1a54f8374","modified":1444320020000},{"_id":"source/_posts/hh.md","hash":"3e6bf77216e0b6e0919141e1f7628dc19f963cac","modified":1436427976000},{"_id":"source/_posts/inline-block元素的诡异样式问题.md","hash":"1dae85c60cfe10f3ab2e1cd378ddb7965de2bece","modified":1531403677000},{"_id":"source/_posts/json-format.md","hash":"e0500e6a659a14780f00284f31b2fbc606c93921","modified":1459677709000},{"_id":"source/_posts/kenzi-s-first-post.md","hash":"57595c96167dd5285d8fbc9619fc3ea42f74ee8f","modified":1444320020000},{"_id":"source/_posts/http.md","hash":"e02ae22ebc9538e77756213533bb3ddfa41cec52","modified":1463737619000},{"_id":"source/_posts/min-height-1.md","hash":"6d3e6f51dece2d859a8f62ac5bf18dfc59475e32","modified":1444320020000},{"_id":"source/_posts/list-menu.md","hash":"8fee0a55cf8799110f00e2569d5c2a093413924f","modified":1444703810000},{"_id":"source/_posts/pixhawk.md","hash":"1ffece6246dbe2b974431834063fafd7cacec906","modified":1449476634000},{"_id":"source/_posts/nodeJsSimpleServer.md","hash":"d178739b8c8ef468b3f157834db1bf1d277ffb7b","modified":1463847950000},{"_id":"source/_posts/px4-analyze.md","hash":"6389bfbeed5212a51eddf8ca8f0949893e4be690","modified":1448527222000},{"_id":"source/_posts/px4-matlab-package.md","hash":"845217367ef130679887a4b6877da63c5b56b41c","modified":1449476772000},{"_id":"source/_posts/promise.md","hash":"c8c9d194a01f9dc7517edb94366bfb416a03151f","modified":1462793978000},{"_id":"source/_posts/pure-nodejs-simple-server.md","hash":"b5d3b9e28c4d0933ad549b5193e7c44f5ffb11d5","modified":1464020916000},{"_id":"source/_posts/python-log.md","hash":"3cf558778f678321370f5557a5a60627bc2dc6e2","modified":1449476688000},{"_id":"source/_posts/report-2015-09-06.md","hash":"ae1edd130994279b6638a640783afe86a2747d98","modified":1444320020000},{"_id":"source/_posts/scroll.md","hash":"27b9d067cc44b4771da6cf3a270c68acdc0f9f44","modified":1444320020000},{"_id":"source/_posts/sh.exe.stackdump","hash":"0461a3ced6b1f2c4a88ae4c5ca9660e93bc09a69","modified":1441505392000},{"_id":"source/_posts/report.md","hash":"442b1c5fb235ac67720314ac4e1e183f1b03c3ca","modified":1457941431000},{"_id":"source/_posts/wedding.md","hash":"e387f482c302196fd2c02e8f44330e2944c39004","modified":1444320020000},{"_id":"source/_posts/write.md","hash":"bf8d05d96c50d253822a0e5befe90bafbec4b789","modified":1444320020000},{"_id":"source/_posts/字符串编码.md","hash":"bc1757d1d654d2b2aa54682d8e1785290c778572","modified":1463485792000},{"_id":"source/img/escape.png","hash":"93e128ed8e430e7cc247c459070224c6f3c07e9d","modified":1463484874000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1444320020000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1444320020000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1444320020000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1444320020000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1444320020000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1444320020000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1444320020000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1444320020000},{"_id":"themes/landscape/source/favicon.ico","hash":"6beab41c40eb82fec48cc32060ec351c0bc6bfd2","modified":1436421128000},{"_id":"source/_posts/vagrantSetup.txt","hash":"fc9e2f813e378de3ca1d8d34a2d045c4bb7ed96a","modified":1449664346000},{"_id":"source/_posts/.git/HEAD","hash":"cdb85793b091812e46a2d3c52ff239ff60dd5bb6","modified":1435926386000},{"_id":"source/_posts/.git/config","hash":"d37a4184b81d98778a046ee9fd376959266271b2","modified":1435926344000},{"_id":"source/_posts/.git/index","hash":"26bd488fe391f6e8a7595ab94029803ef67f2534","modified":1547913785543},{"_id":"source/_posts/.git/COMMIT_EDITMSG","hash":"e4ce65af86e0cec3c2ac36cdf7043aa5d7865775","modified":1435926492000},{"_id":"source/_posts/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1435926274000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"da9a4ab32efc44c098f317fe64e2335989929b0e","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1444320020000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1444320020000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1444320020000},{"_id":"themes/landscape/layout/_widget/friends.ejs","hash":"c1ae5b5eddf4d2b55b3ff1f259502032b7fb5664","modified":1436324398000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"5fa9216b5cfe8d607d2914c9df1a7a30c1a3f8c1","modified":1444703154000},{"_id":"themes/landscape/layout/_widget/recent_post.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1439890260000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1444320020000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1444320020000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1444320020000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1444320020000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"dcc50972cc8ec327a2488161d6427a21c68d511f","modified":1444320020000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1444320020000},{"_id":"themes/landscape/source/js/script.js","hash":"8515b14115cc8f558288f8bef68c1390d70812a7","modified":1444703928000},{"_id":"source/_posts/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1435926274000},{"_id":"source/_posts/.git/logs/HEAD","hash":"1217ef10b6403528f90e0508d3391b4ee7b72f61","modified":1435926492000},{"_id":"source/_posts/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1435926274000},{"_id":"source/_posts/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1435926274000},{"_id":"source/_posts/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1435926274000},{"_id":"source/_posts/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1435926274000},{"_id":"source/_posts/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1435926274000},{"_id":"source/_posts/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1435926274000},{"_id":"source/_posts/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1435926274000},{"_id":"source/_posts/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1435926274000},{"_id":"source/_posts/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1435926274000},{"_id":"source/img/encodeURI-encode.png","hash":"d17e844318b709187bb1f4751739b981b780471b","modified":1463484874000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1444320020000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1444320020000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1444320020000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"3fad04a40621ada7dbd69cb4cddee89293b94803","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"8e1787d4b38bd12b0725e2bfd8b6fa9461eccedf","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"0ddc32e5a8b3d46bff60dab9f4e2af4ac9b1ab4d","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"36eefe6332b86b66023a9884b754d305235846b4","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1444320020000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1444320020000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1444320020000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1444320020000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1444320020000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1444320020000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1444320020000},{"_id":"source/_posts/.git/objects/00/c783fa3cc76e9746ce8f63f03a40b944cec466","hash":"0f7e68ee0a52ca780f7eabb194b0cdfa28c6f52f","modified":1462630709000},{"_id":"source/_posts/.git/objects/47/87516808a79efae4b74b7c425a9c997f769bbe","hash":"94996d42078e06c361a288edd21f67eda81bccda","modified":1435926492000},{"_id":"source/_posts/.git/objects/3c/55e6051fcccc28f20471f206d212d4671790b7","hash":"1220adf96e224b92ef40629dff682166300a3d60","modified":1462630709000},{"_id":"source/_posts/.git/objects/12/3d3a117c6fceb611030b15f2983d56f727b752","hash":"115b2e2ab8ce208e0a557aa807ba9339d6081c4d","modified":1462630709000},{"_id":"source/_posts/.git/objects/15/10cf787976b26e00a0adf8a0cb4a418c5a0179","hash":"08dc005a499cbbfef7c7419b2642295bf5ed7717","modified":1462630709000},{"_id":"source/_posts/.git/objects/24/c10f92779319416294b336719d8e6f169f6e06","hash":"c71d6fbd2243655bb9917412397e280d2be5a168","modified":1462630709000},{"_id":"source/_posts/.git/objects/69/a8ec9f8738366052e40609786e689331663263","hash":"0a727ac70bab0928e9c6de3907d8835c6bc88eaa","modified":1435926492000},{"_id":"source/_posts/.git/objects/53/09d5cafdb5db92febae6abfc03950b584a7e54","hash":"43337f15f6f461049cd5ee90041936e7b5230fda","modified":1462630709000},{"_id":"source/_posts/.git/objects/44/7dbedfde24e5d9166f50d53291f6baab5350dc","hash":"c10e1b6b00857b4e8a6ffc6987c79eb2946d201c","modified":1462630709000},{"_id":"source/_posts/.git/objects/68/81aba6ddc3f0682b64dcb83e59347ed7b93deb","hash":"d13d90f2c8aac08281996ca08ab6b7735741084b","modified":1462630709000},{"_id":"source/_posts/.git/objects/3f/03730945bc482a8ac503c939e5fe8805500bbe","hash":"90e80b819c4ba1f83a630e2d26d501bab30a2f7b","modified":1462630709000},{"_id":"source/_posts/.git/objects/9f/e18e28690ec5bdf97ccb1c60709c25b2e2515a","hash":"ddad610eea97ced6cb65fafc693fc8a2b82f163e","modified":1435926282000},{"_id":"source/_posts/.git/objects/4e/512ff4aef2ade1143b034ef7d38cf549302d03","hash":"076db36f6c9488a1b79228d5a9177aa7e153e10d","modified":1462630709000},{"_id":"source/_posts/.git/objects/71/ef9fc5a96089d7488dd851de033c4336376eea","hash":"967800fa5db36d093556a181548563301ee68f65","modified":1462630709000},{"_id":"source/_posts/.git/objects/78/2e04224f69dcd5fe783bfe8551af38c811b08a","hash":"6ce0b7bf011138bfbec04d6d8b24b318579f29d0","modified":1462630709000},{"_id":"source/_posts/.git/objects/83/b6f7c5f8323ccf55ecabbb328e704a8a911d2c","hash":"9957dc4b389af2cf81ce942f414a9f0883b2e6b6","modified":1462630709000},{"_id":"source/_posts/.git/objects/88/0a03e0aa5ce1e02483001d93728764351f4d91","hash":"d3e269f8e5d9749ec0370a65d94cbda6c3ff746e","modified":1462630709000},{"_id":"source/_posts/.git/objects/a0/3c8e5d2423a119633e47bc694c7fee967fbbc5","hash":"2b4f18e6e56d00e7c061206afdb69076c1a0d958","modified":1462630709000},{"_id":"source/_posts/.git/objects/5c/fbb0b8823cac1a106589c1ab20e318c7d27985","hash":"68cd2c1ec1423afdd6a467c5cea9504d28061bb8","modified":1462630709000},{"_id":"source/_posts/.git/objects/a2/33a7c387f58c3c97602df7af1f825ccdb2ba50","hash":"9766bb826e815a0ed2f0b54fdf719403f9d9ab07","modified":1462630709000},{"_id":"source/_posts/.git/objects/ac/e3812b0566ac7c4e593749dee5522d9c9b3c29","hash":"2e30966fb603c56ed4589c3326f942fdf84475e7","modified":1462630709000},{"_id":"source/_posts/.git/objects/a5/92566f3f8de40e329a1010a1a22b0a6d447176","hash":"2d474bc5d127711bf594c4740094fe2a0775abec","modified":1462630709000},{"_id":"source/_posts/.git/objects/d2/f98927e08447f4bc83e59531b06648b2f12a51","hash":"9294f2da8e3b695b0c9b65c3b0eb48535890b6aa","modified":1435926282000},{"_id":"source/_posts/.git/objects/b8/bb74a2920f9f802624424e88f6156926611a97","hash":"de33b2f9ebb400aa6b8efa2f7c3bb9d572e238b8","modified":1462630709000},{"_id":"source/_posts/.git/objects/63/627f0564617ff2f237ac9dc446a3fe1fa66694","hash":"ca779ff2fdbcf5077d2bac4d65e619b2a3ccca2b","modified":1462630709000},{"_id":"source/_posts/.git/objects/c6/1eddc309eb0bcfad34b40f97f6207610882101","hash":"f9114d5bfea19c3d42802938f089631b0cb85018","modified":1462630709000},{"_id":"source/_posts/.git/refs/heads/source","hash":"b124e1923efc384fd0455a3ef13cdd76c349db3c","modified":1435926492000},{"_id":"source/_posts/.git/objects/e3/06eebd32a22a987541e05b3479f4e6b2ce5eec","hash":"77d09892520cff3562fd32badc8c7e61f46a7078","modified":1462630709000},{"_id":"source/_posts/.git/objects/8a/9d11576a58565a9ab6a5bcb904219bfadafab2","hash":"521dc4c5ae708247519581de5d9aa1b5f6cce643","modified":1462630709000},{"_id":"source/_posts/.git/objects/ea/3858a73388ce9e9248c4b2960d9aa60246b262","hash":"527ec7a047f09ca160f1646fbe754bf104ea4197","modified":1462630709000},{"_id":"source/_posts/.git/objects/be/38387b0e97fa1c10406ce066251ba8678696d2","hash":"ac7d39a62a4bb49e52f96c91676fd1a625d9d310","modified":1462630709000},{"_id":"source/_posts/.git/objects/e5/8133f66ac42cee9de54ed47be9043b64ce8268","hash":"62da75cf43bb75e364c4aacdaeb4df373ff127ed","modified":1462630709000},{"_id":"source/_posts/.git/objects/b5/02199fd886038fa6b5b1cdb8627a072037c464","hash":"854cf2791823611a83edbf739ecd4a6f511533ee","modified":1462630709000},{"_id":"source/_posts/.git/objects/f8/7a546236515ab518b19183374dae5469369cac","hash":"bec9cc10230ba17093a001df748d57ab68a56dd3","modified":1462630709000},{"_id":"source/img/escape-encode.png","hash":"ac30fc7b8c0fc7a433a554e7404262bcb7c1ebeb","modified":1463484874000},{"_id":"source/img/encodeURIComponent-noencode.png","hash":"1373064b9824ce99b2d154fa24a700e22f8165a3","modified":1463484874000},{"_id":"source/img/escape-noencode.png","hash":"a84ad947ac9822e1802345981c557815542c08e7","modified":1463484874000},{"_id":"source/img/encodeURIComponent-encode.png","hash":"f797eed1bd759d2c0a82fdb413259f297ff0eb05","modified":1463484874000},{"_id":"source/_posts/.git/logs/refs/heads/source","hash":"1217ef10b6403528f90e0508d3391b4ee7b72f61","modified":1435926492000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1444320020000},{"_id":"source/_posts/.git/refs/remotes/origin/source","hash":"b124e1923efc384fd0455a3ef13cdd76c349db3c","modified":1435926534000},{"_id":"source/img/encodeURI-noencode.png","hash":"bf7c42a4ae3f8edf4c21a53704c0c3e0694e2965","modified":1463484874000},{"_id":"source/_posts/.git/logs/refs/remotes/origin/source","hash":"375ee34f21f5298d6c811ea70a5c13cb4fa57b49","modified":1435926534000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"7fb94af5569beb896364d1f9046c5c4ac02b5a50","modified":1444320020000}],"Category":[{"name":"Life","_id":"cjrekwo61000ollsgt4xnrcjp"}],"Data":[],"Page":[],"Post":[{"title":"从vue源码角度分析v-text和{{}}插值的区别","date":"2019-01-19T16:02:20.000Z","_content":"## 问题描述：\n\n在做生成表格的需求时，遇到需要手动在单元格输入文字，并生成表头：即实现可编辑效果的功能。发现可以通过设置标签的contenteditable属性来实现任意html元素可编辑,并且把用户输入赋值给变量。这时，在vue框架下，就想到了双向数据绑定绑定输入值。但因为这不是input表单标签，无法直接使用v-model指令，一般是使用创建组件的方式实现双向数据绑定。但我当时第一直觉想到的是双花括号方式绑定。\n\n### 为什么不能使用v-model\n\n如果在contenteditable的元素上使用了v-model会报以下错误:\n\n>v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.\n\nv-model仅仅支持input、textarea、select表单元素,这点以及报错信息从源码上也可以看出来:\n\n```\nif (el.component) {\n      genComponentModel(el, value, modifiers);\n      // component v-model doesn't need extra runtime\n      return false\n    } else if (tag === 'select') {\n      genSelect(el, value, modifiers);\n    } else if (tag === 'input' && type === 'checkbox') {\n      genCheckboxModel(el, value, modifiers);\n    } else if (tag === 'input' && type === 'radio') {\n      genRadioModel(el, value, modifiers);\n    } else if (tag === 'input' || tag === 'textarea') {\n      genDefaultModel(el, value, modifiers);\n    } else if (!config.isReservedTag(tag)) {\n      genComponentModel(el, value, modifiers);\n      // component v-model doesn't need extra runtime\n      return false\n    } else {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"v-model is not supported on this element type. \" +\n        'If you are working with contenteditable, it\\'s recommended to ' +\n        'wrap a library dedicated for that purpose inside a custom component.'\n      );\n    }\n```\n\n### 使用v-text\n\n先说解决方案:\n\n{% jsfiddle kenzid/txohLkfd js,html,css,result light %}\n\n其实我一开始并没有想到用v-text的方式解决这个问题。而是想到了使用双花括号mastache的方式。但是这会出现一个匪夷所思的问题:这里是[issue传送带1](https://github.com/vuejs/vue/issues/5234),[issue传送带2](https://github.com/vuejs/vue/issues/5805)\n\n{% jsfiddle akcbj2z5/1 js,html,css,result light %}\n\n我们发现，contenteditable元素中的文字在失去焦点时重复了两遍！为什么会这样?为什么使用v-text就能绕开这个问题?网上搜到v-text和花括号的区别是花括号是v-text的简写形式。尤雨溪在[issue](https://github.com/vuejs/vue/issues/5805)中简要回答了花括号和v-text区别:\n\n\n[插播:写到这里时我想上传一个vue官方解释v-text的图片，发现七牛云回收了它自己的域名，导致我的图图外链都失效了，我又不想自己去花钱注册一个备案域名。所以想用rp先生的vps搭建一个自己的图床。找到了lychee荔枝图床，然后说需要先安装阿帕奇，php，mysql。。。。我自闭了。下面说使用docker安装最为简单。我又想去看看docker了。。。我的思绪啊.在服务器上按照操作步骤装了半天，发现openvz的vps装不了docker啊。摔。[告诉大家一个坑，openVZ的VPS装不了Docker](https://meta.discoursecn.org/t/topic/1227)，我回来了。已是2小时以后。]\n\n> This type of usage will be a wontfix. v-text or v-html works by wiping away the pre-existing content with completely new nodes; however when you use mastache bindings Vue will attempt to diff the text nodes - which will likely be made out of sync by contenteditable because how browsers handle/split the text nodes are completely unpredictable.\n\n翻译一下:\n\n> 这种用法导致的问题将不会修复。使用v-text和v-html将会把元素之前存在的content完全用(vue生成的)新的nodes替换掉;然而如果使用花括号绑定vue将会尝试比较文本节点，由于浏览器操作拆分文本节点的行为完全无法预测，所以使用contenteditable属性(dom和变量)极有可能无法同步。\n\n这到底是啥意思？\n\n## 从源码上分析花括号的行为\n\n我们知道在 Vue.js 中我们可以采用简洁的模板语法来声明式的将数据渲染为 DOM[[1](https://ustbhuangyi.github.io/vue-analysis/data-driven/)]。流程是:\nnew vue()\n\n### reference:\n[1.Vue.js 技术揭秘--数据驱动](https://ustbhuangyi.github.io/vue-analysis/data-driven/)\n","source":"_posts/从vue源码角度分析v-text和-插值的区别.md","raw":"title: '从vue源码角度分析v-text和{{}}插值的区别'\ndate: 2019-01-20 00:02:20\ntags:\n---\n## 问题描述：\n\n在做生成表格的需求时，遇到需要手动在单元格输入文字，并生成表头：即实现可编辑效果的功能。发现可以通过设置标签的contenteditable属性来实现任意html元素可编辑,并且把用户输入赋值给变量。这时，在vue框架下，就想到了双向数据绑定绑定输入值。但因为这不是input表单标签，无法直接使用v-model指令，一般是使用创建组件的方式实现双向数据绑定。但我当时第一直觉想到的是双花括号方式绑定。\n\n### 为什么不能使用v-model\n\n如果在contenteditable的元素上使用了v-model会报以下错误:\n\n>v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.\n\nv-model仅仅支持input、textarea、select表单元素,这点以及报错信息从源码上也可以看出来:\n\n```\nif (el.component) {\n      genComponentModel(el, value, modifiers);\n      // component v-model doesn't need extra runtime\n      return false\n    } else if (tag === 'select') {\n      genSelect(el, value, modifiers);\n    } else if (tag === 'input' && type === 'checkbox') {\n      genCheckboxModel(el, value, modifiers);\n    } else if (tag === 'input' && type === 'radio') {\n      genRadioModel(el, value, modifiers);\n    } else if (tag === 'input' || tag === 'textarea') {\n      genDefaultModel(el, value, modifiers);\n    } else if (!config.isReservedTag(tag)) {\n      genComponentModel(el, value, modifiers);\n      // component v-model doesn't need extra runtime\n      return false\n    } else {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"v-model is not supported on this element type. \" +\n        'If you are working with contenteditable, it\\'s recommended to ' +\n        'wrap a library dedicated for that purpose inside a custom component.'\n      );\n    }\n```\n\n### 使用v-text\n\n先说解决方案:\n\n{% jsfiddle kenzid/txohLkfd js,html,css,result light %}\n\n其实我一开始并没有想到用v-text的方式解决这个问题。而是想到了使用双花括号mastache的方式。但是这会出现一个匪夷所思的问题:这里是[issue传送带1](https://github.com/vuejs/vue/issues/5234),[issue传送带2](https://github.com/vuejs/vue/issues/5805)\n\n{% jsfiddle akcbj2z5/1 js,html,css,result light %}\n\n我们发现，contenteditable元素中的文字在失去焦点时重复了两遍！为什么会这样?为什么使用v-text就能绕开这个问题?网上搜到v-text和花括号的区别是花括号是v-text的简写形式。尤雨溪在[issue](https://github.com/vuejs/vue/issues/5805)中简要回答了花括号和v-text区别:\n\n\n[插播:写到这里时我想上传一个vue官方解释v-text的图片，发现七牛云回收了它自己的域名，导致我的图图外链都失效了，我又不想自己去花钱注册一个备案域名。所以想用rp先生的vps搭建一个自己的图床。找到了lychee荔枝图床，然后说需要先安装阿帕奇，php，mysql。。。。我自闭了。下面说使用docker安装最为简单。我又想去看看docker了。。。我的思绪啊.在服务器上按照操作步骤装了半天，发现openvz的vps装不了docker啊。摔。[告诉大家一个坑，openVZ的VPS装不了Docker](https://meta.discoursecn.org/t/topic/1227)，我回来了。已是2小时以后。]\n\n> This type of usage will be a wontfix. v-text or v-html works by wiping away the pre-existing content with completely new nodes; however when you use mastache bindings Vue will attempt to diff the text nodes - which will likely be made out of sync by contenteditable because how browsers handle/split the text nodes are completely unpredictable.\n\n翻译一下:\n\n> 这种用法导致的问题将不会修复。使用v-text和v-html将会把元素之前存在的content完全用(vue生成的)新的nodes替换掉;然而如果使用花括号绑定vue将会尝试比较文本节点，由于浏览器操作拆分文本节点的行为完全无法预测，所以使用contenteditable属性(dom和变量)极有可能无法同步。\n\n这到底是啥意思？\n\n## 从源码上分析花括号的行为\n\n我们知道在 Vue.js 中我们可以采用简洁的模板语法来声明式的将数据渲染为 DOM[[1](https://ustbhuangyi.github.io/vue-analysis/data-driven/)]。流程是:\nnew vue()\n\n### reference:\n[1.Vue.js 技术揭秘--数据驱动](https://ustbhuangyi.github.io/vue-analysis/data-driven/)\n","slug":"从vue源码角度分析v-text和-插值的区别","published":1,"updated":"2019-01-28T13:43:32.591Z","_id":"cjrekwo4q0000llsgzans72a5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"问题描述：\">问题描述：</h2><p>在做生成表格的需求时，遇到需要手动在单元格输入文字，并生成表头：即实现可编辑效果的功能。发现可以通过设置标签的contenteditable属性来实现任意html元素可编辑,并且把用户输入赋值给变量。这时，在vue框架下，就想到了双向数据绑定绑定输入值。但因为这不是input表单标签，无法直接使用v-model指令，一般是使用创建组件的方式实现双向数据绑定。但我当时第一直觉想到的是双花括号方式绑定。</p>\n<h3 id=\"为什么不能使用v-model\">为什么不能使用v-model</h3><p>如果在contenteditable的元素上使用了v-model会报以下错误:</p>\n<blockquote>\n<p>v-model is not supported on this element type. If you are working with contenteditable, it’s recommended to wrap a library dedicated for that purpose inside a custom component.</p>\n</blockquote>\n<p>v-model仅仅支持input、textarea、select表单元素,这点以及报错信息从源码上也可以看出来:</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (el.component) &#123;</span><br><span class=\"line\">      genComponentModel(el, value, modifiers);</span><br><span class=\"line\">      <span class=\"comment\">// component v-model doesn't need extra runtime</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">tag</span> === <span class=\"string\">'select'</span>) &#123;</span><br><span class=\"line\">      genSelect(el, value, modifiers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">tag</span> === <span class=\"string\">'input'</span> &amp;&amp; <span class=\"keyword\">type</span> === <span class=\"string\">'checkbox'</span>) &#123;</span><br><span class=\"line\">      genCheckboxModel(el, value, modifiers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">tag</span> === <span class=\"string\">'input'</span> &amp;&amp; <span class=\"keyword\">type</span> === <span class=\"string\">'radio'</span>) &#123;</span><br><span class=\"line\">      genRadioModel(el, value, modifiers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">tag</span> === <span class=\"string\">'input'</span> || <span class=\"built_in\">tag</span> === <span class=\"string\">'textarea'</span>) &#123;</span><br><span class=\"line\">      genDefaultModel(el, value, modifiers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!config.isReservedTag(<span class=\"built_in\">tag</span>)) &#123;</span><br><span class=\"line\">      genComponentModel(el, value, modifiers);</span><br><span class=\"line\">      <span class=\"comment\">// component v-model doesn't need extra runtime</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      warn$<span class=\"number\">1</span>(</span><br><span class=\"line\">        <span class=\"string\">\"&lt;\"</span> + (el.<span class=\"built_in\">tag</span>) + <span class=\"string\">\" v-model=\\\"\"</span> + value + <span class=\"string\">\"\\\"&gt;: \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"v-model is not supported on this element type. \"</span> +</span><br><span class=\"line\">        <span class=\"string\">'If you are working with contenteditable, it\\'s recommended to '</span> +</span><br><span class=\"line\">        <span class=\"string\">'wrap a library dedicated for that purpose inside a custom component.'</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用v-text\">使用v-text</h3><p>先说解决方案:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/kenzid/txohLkfd/embedded/js,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<p>其实我一开始并没有想到用v-text的方式解决这个问题。而是想到了使用双花括号mastache的方式。但是这会出现一个匪夷所思的问题:这里是<a href=\"https://github.com/vuejs/vue/issues/5234\" target=\"_blank\" rel=\"external\">issue传送带1</a>,<a href=\"https://github.com/vuejs/vue/issues/5805\" target=\"_blank\" rel=\"external\">issue传送带2</a></p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/akcbj2z5/1/embedded/js,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<p>我们发现，contenteditable元素中的文字在失去焦点时重复了两遍！为什么会这样?为什么使用v-text就能绕开这个问题?网上搜到v-text和花括号的区别是花括号是v-text的简写形式。尤雨溪在<a href=\"https://github.com/vuejs/vue/issues/5805\" target=\"_blank\" rel=\"external\">issue</a>中简要回答了花括号和v-text区别:</p>\n<p>[插播:写到这里时我想上传一个vue官方解释v-text的图片，发现七牛云回收了它自己的域名，导致我的图图外链都失效了，我又不想自己去花钱注册一个备案域名。所以想用rp先生的vps搭建一个自己的图床。找到了lychee荔枝图床，然后说需要先安装阿帕奇，php，mysql。。。。我自闭了。下面说使用docker安装最为简单。我又想去看看docker了。。。我的思绪啊.在服务器上按照操作步骤装了半天，发现openvz的vps装不了docker啊。摔。<a href=\"https://meta.discoursecn.org/t/topic/1227\" target=\"_blank\" rel=\"external\">告诉大家一个坑，openVZ的VPS装不了Docker</a>，我回来了。已是2小时以后。]</p>\n<blockquote>\n<p>This type of usage will be a wontfix. v-text or v-html works by wiping away the pre-existing content with completely new nodes; however when you use mastache bindings Vue will attempt to diff the text nodes - which will likely be made out of sync by contenteditable because how browsers handle/split the text nodes are completely unpredictable.</p>\n</blockquote>\n<p>翻译一下:</p>\n<blockquote>\n<p>这种用法导致的问题将不会修复。使用v-text和v-html将会把元素之前存在的content完全用(vue生成的)新的nodes替换掉;然而如果使用花括号绑定vue将会尝试比较文本节点，由于浏览器操作拆分文本节点的行为完全无法预测，所以使用contenteditable属性(dom和变量)极有可能无法同步。</p>\n</blockquote>\n<p>这到底是啥意思？</p>\n<h2 id=\"从源码上分析花括号的行为\">从源码上分析花括号的行为</h2><p>我们知道在 Vue.js 中我们可以采用简洁的模板语法来声明式的将数据渲染为 DOM[<a href=\"https://ustbhuangyi.github.io/vue-analysis/data-driven/\" target=\"_blank\" rel=\"external\">1</a>]。流程是:<br>new vue()</p>\n<h3 id=\"reference:\">reference:</h3><p><a href=\"https://ustbhuangyi.github.io/vue-analysis/data-driven/\" target=\"_blank\" rel=\"external\">1.Vue.js 技术揭秘—数据驱动</a></p>\n","excerpt":"","more":"<h2 id=\"问题描述：\">问题描述：</h2><p>在做生成表格的需求时，遇到需要手动在单元格输入文字，并生成表头：即实现可编辑效果的功能。发现可以通过设置标签的contenteditable属性来实现任意html元素可编辑,并且把用户输入赋值给变量。这时，在vue框架下，就想到了双向数据绑定绑定输入值。但因为这不是input表单标签，无法直接使用v-model指令，一般是使用创建组件的方式实现双向数据绑定。但我当时第一直觉想到的是双花括号方式绑定。</p>\n<h3 id=\"为什么不能使用v-model\">为什么不能使用v-model</h3><p>如果在contenteditable的元素上使用了v-model会报以下错误:</p>\n<blockquote>\n<p>v-model is not supported on this element type. If you are working with contenteditable, it’s recommended to wrap a library dedicated for that purpose inside a custom component.</p>\n</blockquote>\n<p>v-model仅仅支持input、textarea、select表单元素,这点以及报错信息从源码上也可以看出来:</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (el.component) &#123;</span><br><span class=\"line\">      genComponentModel(el, value, modifiers);</span><br><span class=\"line\">      <span class=\"comment\">// component v-model doesn't need extra runtime</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">tag</span> === <span class=\"string\">'select'</span>) &#123;</span><br><span class=\"line\">      genSelect(el, value, modifiers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">tag</span> === <span class=\"string\">'input'</span> &amp;&amp; <span class=\"keyword\">type</span> === <span class=\"string\">'checkbox'</span>) &#123;</span><br><span class=\"line\">      genCheckboxModel(el, value, modifiers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">tag</span> === <span class=\"string\">'input'</span> &amp;&amp; <span class=\"keyword\">type</span> === <span class=\"string\">'radio'</span>) &#123;</span><br><span class=\"line\">      genRadioModel(el, value, modifiers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">tag</span> === <span class=\"string\">'input'</span> || <span class=\"built_in\">tag</span> === <span class=\"string\">'textarea'</span>) &#123;</span><br><span class=\"line\">      genDefaultModel(el, value, modifiers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!config.isReservedTag(<span class=\"built_in\">tag</span>)) &#123;</span><br><span class=\"line\">      genComponentModel(el, value, modifiers);</span><br><span class=\"line\">      <span class=\"comment\">// component v-model doesn't need extra runtime</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      warn$<span class=\"number\">1</span>(</span><br><span class=\"line\">        <span class=\"string\">\"&lt;\"</span> + (el.<span class=\"built_in\">tag</span>) + <span class=\"string\">\" v-model=\\\"\"</span> + value + <span class=\"string\">\"\\\"&gt;: \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"v-model is not supported on this element type. \"</span> +</span><br><span class=\"line\">        <span class=\"string\">'If you are working with contenteditable, it\\'s recommended to '</span> +</span><br><span class=\"line\">        <span class=\"string\">'wrap a library dedicated for that purpose inside a custom component.'</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用v-text\">使用v-text</h3><p>先说解决方案:</p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/kenzid/txohLkfd/embedded/js,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<p>其实我一开始并没有想到用v-text的方式解决这个问题。而是想到了使用双花括号mastache的方式。但是这会出现一个匪夷所思的问题:这里是<a href=\"https://github.com/vuejs/vue/issues/5234\">issue传送带1</a>,<a href=\"https://github.com/vuejs/vue/issues/5805\">issue传送带2</a></p>\n<iframe scrolling=\"no\" width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/akcbj2z5/1/embedded/js,html,css,result/light\" frameborder=\"0\" allowfullscreen></iframe>\n<p>我们发现，contenteditable元素中的文字在失去焦点时重复了两遍！为什么会这样?为什么使用v-text就能绕开这个问题?网上搜到v-text和花括号的区别是花括号是v-text的简写形式。尤雨溪在<a href=\"https://github.com/vuejs/vue/issues/5805\">issue</a>中简要回答了花括号和v-text区别:</p>\n<p>[插播:写到这里时我想上传一个vue官方解释v-text的图片，发现七牛云回收了它自己的域名，导致我的图图外链都失效了，我又不想自己去花钱注册一个备案域名。所以想用rp先生的vps搭建一个自己的图床。找到了lychee荔枝图床，然后说需要先安装阿帕奇，php，mysql。。。。我自闭了。下面说使用docker安装最为简单。我又想去看看docker了。。。我的思绪啊.在服务器上按照操作步骤装了半天，发现openvz的vps装不了docker啊。摔。<a href=\"https://meta.discoursecn.org/t/topic/1227\">告诉大家一个坑，openVZ的VPS装不了Docker</a>，我回来了。已是2小时以后。]</p>\n<blockquote>\n<p>This type of usage will be a wontfix. v-text or v-html works by wiping away the pre-existing content with completely new nodes; however when you use mastache bindings Vue will attempt to diff the text nodes - which will likely be made out of sync by contenteditable because how browsers handle/split the text nodes are completely unpredictable.</p>\n</blockquote>\n<p>翻译一下:</p>\n<blockquote>\n<p>这种用法导致的问题将不会修复。使用v-text和v-html将会把元素之前存在的content完全用(vue生成的)新的nodes替换掉;然而如果使用花括号绑定vue将会尝试比较文本节点，由于浏览器操作拆分文本节点的行为完全无法预测，所以使用contenteditable属性(dom和变量)极有可能无法同步。</p>\n</blockquote>\n<p>这到底是啥意思？</p>\n<h2 id=\"从源码上分析花括号的行为\">从源码上分析花括号的行为</h2><p>我们知道在 Vue.js 中我们可以采用简洁的模板语法来声明式的将数据渲染为 DOM[<a href=\"https://ustbhuangyi.github.io/vue-analysis/data-driven/\">1</a>]。流程是:<br>new vue()</p>\n<h3 id=\"reference:\">reference:</h3><p><a href=\"https://ustbhuangyi.github.io/vue-analysis/data-driven/\">1.Vue.js 技术揭秘—数据驱动</a></p>\n"},{"title":"图表库比较","date":"2016-03-14T07:51:31.000Z","_content":"## 综述\n### [HIGHTCHARTS](http://www.highcharts.com/)\n\n####特点\n\n* highcharts可以运行在任何现代浏览器，包括移动终端以及IE6，标准的浏览器用SVG技术渲染图表，对于遗留的浏览器，则用VML来绘图。\n\n* 分为三个js:HIGHCHARTS(图表),HIGHSTOCK(针对股票),HIGHMAPS(针对地图)\n\n* 基于JQuery\n\n#### 优点\n\n* API手册非常详细，例子也非常详细。设置格式和Echarts差不多。每个设置项都有Jsfiddle的例子，可以直观快速的明白。\n* 比较成熟，有免费的和收费的。例如Twitter,Facebook都在使用.\n\n#### 缺点\n\n* 体积比较大\n\n<!--more-->\n### [Echarts](http://echarts.baidu.com/)\n\n#### 特点\n\n* 不支持IE8或以下的\n* 使用原生JavaScript\n\n#### 优点：\n\n* 0学习曲线，易上手。\n* 中文资料丰富。\n* 基础的图表就已经比较美观。\n* 使用原生JavaScript\n* 支持自定义构建，像bootstrap那样可以选择自己需要的图表，然后集成一个js包。\n\n#### 缺点：\n\n* 灵活性有限。\n\n\n### [D3](https://d3js.org/)\n\n#### 特点：\n\n* 类似于JQuery，使用了链式语法，有自己的选择器。一个函数套一个函数。\n\n* 仅支持现代浏览器，对IE9或以下版本支持不是很好\n\n#### 缺点：\n\n* 学习成本比较高，学习曲线比较陡.\n* 官方文档写得不好，api手册几乎没有例子,很难懂。\n\n#### 优点：\n\n* 基于svg格式，放大无失真。\n* 自主选项多，自由度很大，可以做出很丰富的图表类型。\n\n##加载速度\n\n由于加载速度与网络情况和服务器处理有很大相关，这里只是本地加载，不作测试。\n\n##内存消耗\n\n\n### HIGHCHARTS\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/highchart.png)\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/highchart-storage.png)\n\n内存：11.1M\n\n加载对象：highcharts.js jquery-1.8.3.min.js\n\n### Echarts\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/echarts.png)\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/echarts-storage.png)\n\n内存：10.4M\n\n加载对象：echarts.min.js \n\n### D3\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/d3.png)\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/d3-storage.png)\n\n内存：9.8M\n\n加载对象：d3.js\n\n## chrome 一个tab页面的内存\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/chrome-storage.png)","source":"_posts/ChartCompare.md","raw":"title: 图表库比较\ndate: 2016-03-14 15:51:31\ntags:\n---\n## 综述\n### [HIGHTCHARTS](http://www.highcharts.com/)\n\n####特点\n\n* highcharts可以运行在任何现代浏览器，包括移动终端以及IE6，标准的浏览器用SVG技术渲染图表，对于遗留的浏览器，则用VML来绘图。\n\n* 分为三个js:HIGHCHARTS(图表),HIGHSTOCK(针对股票),HIGHMAPS(针对地图)\n\n* 基于JQuery\n\n#### 优点\n\n* API手册非常详细，例子也非常详细。设置格式和Echarts差不多。每个设置项都有Jsfiddle的例子，可以直观快速的明白。\n* 比较成熟，有免费的和收费的。例如Twitter,Facebook都在使用.\n\n#### 缺点\n\n* 体积比较大\n\n<!--more-->\n### [Echarts](http://echarts.baidu.com/)\n\n#### 特点\n\n* 不支持IE8或以下的\n* 使用原生JavaScript\n\n#### 优点：\n\n* 0学习曲线，易上手。\n* 中文资料丰富。\n* 基础的图表就已经比较美观。\n* 使用原生JavaScript\n* 支持自定义构建，像bootstrap那样可以选择自己需要的图表，然后集成一个js包。\n\n#### 缺点：\n\n* 灵活性有限。\n\n\n### [D3](https://d3js.org/)\n\n#### 特点：\n\n* 类似于JQuery，使用了链式语法，有自己的选择器。一个函数套一个函数。\n\n* 仅支持现代浏览器，对IE9或以下版本支持不是很好\n\n#### 缺点：\n\n* 学习成本比较高，学习曲线比较陡.\n* 官方文档写得不好，api手册几乎没有例子,很难懂。\n\n#### 优点：\n\n* 基于svg格式，放大无失真。\n* 自主选项多，自由度很大，可以做出很丰富的图表类型。\n\n##加载速度\n\n由于加载速度与网络情况和服务器处理有很大相关，这里只是本地加载，不作测试。\n\n##内存消耗\n\n\n### HIGHCHARTS\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/highchart.png)\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/highchart-storage.png)\n\n内存：11.1M\n\n加载对象：highcharts.js jquery-1.8.3.min.js\n\n### Echarts\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/echarts.png)\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/echarts-storage.png)\n\n内存：10.4M\n\n加载对象：echarts.min.js \n\n### D3\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/d3.png)\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/d3-storage.png)\n\n内存：9.8M\n\n加载对象：d3.js\n\n## chrome 一个tab页面的内存\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/chrome-storage.png)","slug":"ChartCompare","published":1,"updated":"2016-03-14T08:50:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5h0001llsglb7gxizc","content":"<h2 id=\"综述\">综述</h2><h3 id=\"HIGHTCHARTS\"><a href=\"http://www.highcharts.com/\" target=\"_blank\" rel=\"external\">HIGHTCHARTS</a></h3><h4 id=\"特点\">特点</h4><ul>\n<li><p>highcharts可以运行在任何现代浏览器，包括移动终端以及IE6，标准的浏览器用SVG技术渲染图表，对于遗留的浏览器，则用VML来绘图。</p>\n</li>\n<li><p>分为三个js:HIGHCHARTS(图表),HIGHSTOCK(针对股票),HIGHMAPS(针对地图)</p>\n</li>\n<li><p>基于JQuery</p>\n</li>\n</ul>\n<h4 id=\"优点\">优点</h4><ul>\n<li>API手册非常详细，例子也非常详细。设置格式和Echarts差不多。每个设置项都有Jsfiddle的例子，可以直观快速的明白。</li>\n<li>比较成熟，有免费的和收费的。例如Twitter,Facebook都在使用.</li>\n</ul>\n<h4 id=\"缺点\">缺点</h4><ul>\n<li>体积比较大</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"Echarts\"><a href=\"http://echarts.baidu.com/\" target=\"_blank\" rel=\"external\">Echarts</a></h3><h4 id=\"特点-1\">特点</h4><ul>\n<li>不支持IE8或以下的</li>\n<li>使用原生JavaScript</li>\n</ul>\n<h4 id=\"优点：\">优点：</h4><ul>\n<li>0学习曲线，易上手。</li>\n<li>中文资料丰富。</li>\n<li>基础的图表就已经比较美观。</li>\n<li>使用原生JavaScript</li>\n<li>支持自定义构建，像bootstrap那样可以选择自己需要的图表，然后集成一个js包。</li>\n</ul>\n<h4 id=\"缺点：\">缺点：</h4><ul>\n<li>灵活性有限。</li>\n</ul>\n<h3 id=\"D3\"><a href=\"https://d3js.org/\" target=\"_blank\" rel=\"external\">D3</a></h3><h4 id=\"特点：\">特点：</h4><ul>\n<li><p>类似于JQuery，使用了链式语法，有自己的选择器。一个函数套一个函数。</p>\n</li>\n<li><p>仅支持现代浏览器，对IE9或以下版本支持不是很好</p>\n</li>\n</ul>\n<h4 id=\"缺点：-1\">缺点：</h4><ul>\n<li>学习成本比较高，学习曲线比较陡.</li>\n<li>官方文档写得不好，api手册几乎没有例子,很难懂。</li>\n</ul>\n<h4 id=\"优点：-1\">优点：</h4><ul>\n<li>基于svg格式，放大无失真。</li>\n<li>自主选项多，自由度很大，可以做出很丰富的图表类型。</li>\n</ul>\n<h2 id=\"加载速度\">加载速度</h2><p>由于加载速度与网络情况和服务器处理有很大相关，这里只是本地加载，不作测试。</p>\n<h2 id=\"内存消耗\">内存消耗</h2><h3 id=\"HIGHCHARTS\">HIGHCHARTS</h3><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/highchart.png\" alt=\"\"></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/highchart-storage.png\" alt=\"\"></p>\n<p>内存：11.1M</p>\n<p>加载对象：highcharts.js jquery-1.8.3.min.js</p>\n<h3 id=\"Echarts-1\">Echarts</h3><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/echarts.png\" alt=\"\"></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/echarts-storage.png\" alt=\"\"></p>\n<p>内存：10.4M</p>\n<p>加载对象：echarts.min.js </p>\n<h3 id=\"D3-1\">D3</h3><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/d3.png\" alt=\"\"></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/d3-storage.png\" alt=\"\"></p>\n<p>内存：9.8M</p>\n<p>加载对象：d3.js</p>\n<h2 id=\"chrome_一个tab页面的内存\">chrome 一个tab页面的内存</h2><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/chrome-storage.png\" alt=\"\"></p>\n","excerpt":"<h2 id=\"综述\">综述</h2><h3 id=\"HIGHTCHARTS\"><a href=\"http://www.highcharts.com/\">HIGHTCHARTS</a></h3><h4 id=\"特点\">特点</h4><ul>\n<li><p>highcharts可以运行在任何现代浏览器，包括移动终端以及IE6，标准的浏览器用SVG技术渲染图表，对于遗留的浏览器，则用VML来绘图。</p>\n</li>\n<li><p>分为三个js:HIGHCHARTS(图表),HIGHSTOCK(针对股票),HIGHMAPS(针对地图)</p>\n</li>\n<li><p>基于JQuery</p>\n</li>\n</ul>\n<h4 id=\"优点\">优点</h4><ul>\n<li>API手册非常详细，例子也非常详细。设置格式和Echarts差不多。每个设置项都有Jsfiddle的例子，可以直观快速的明白。</li>\n<li>比较成熟，有免费的和收费的。例如Twitter,Facebook都在使用.</li>\n</ul>\n<h4 id=\"缺点\">缺点</h4><ul>\n<li>体积比较大</li>\n</ul>","more":"<h3 id=\"Echarts\"><a href=\"http://echarts.baidu.com/\">Echarts</a></h3><h4 id=\"特点-1\">特点</h4><ul>\n<li>不支持IE8或以下的</li>\n<li>使用原生JavaScript</li>\n</ul>\n<h4 id=\"优点：\">优点：</h4><ul>\n<li>0学习曲线，易上手。</li>\n<li>中文资料丰富。</li>\n<li>基础的图表就已经比较美观。</li>\n<li>使用原生JavaScript</li>\n<li>支持自定义构建，像bootstrap那样可以选择自己需要的图表，然后集成一个js包。</li>\n</ul>\n<h4 id=\"缺点：\">缺点：</h4><ul>\n<li>灵活性有限。</li>\n</ul>\n<h3 id=\"D3\"><a href=\"https://d3js.org/\">D3</a></h3><h4 id=\"特点：\">特点：</h4><ul>\n<li><p>类似于JQuery，使用了链式语法，有自己的选择器。一个函数套一个函数。</p>\n</li>\n<li><p>仅支持现代浏览器，对IE9或以下版本支持不是很好</p>\n</li>\n</ul>\n<h4 id=\"缺点：-1\">缺点：</h4><ul>\n<li>学习成本比较高，学习曲线比较陡.</li>\n<li>官方文档写得不好，api手册几乎没有例子,很难懂。</li>\n</ul>\n<h4 id=\"优点：-1\">优点：</h4><ul>\n<li>基于svg格式，放大无失真。</li>\n<li>自主选项多，自由度很大，可以做出很丰富的图表类型。</li>\n</ul>\n<h2 id=\"加载速度\">加载速度</h2><p>由于加载速度与网络情况和服务器处理有很大相关，这里只是本地加载，不作测试。</p>\n<h2 id=\"内存消耗\">内存消耗</h2><h3 id=\"HIGHCHARTS\">HIGHCHARTS</h3><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/highchart.png\" alt=\"\"></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/highchart-storage.png\" alt=\"\"></p>\n<p>内存：11.1M</p>\n<p>加载对象：highcharts.js jquery-1.8.3.min.js</p>\n<h3 id=\"Echarts-1\">Echarts</h3><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/echarts.png\" alt=\"\"></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/echarts-storage.png\" alt=\"\"></p>\n<p>内存：10.4M</p>\n<p>加载对象：echarts.min.js </p>\n<h3 id=\"D3-1\">D3</h3><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/d3.png\" alt=\"\"></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/d3-storage.png\" alt=\"\"></p>\n<p>内存：9.8M</p>\n<p>加载对象：d3.js</p>\n<h2 id=\"chrome_一个tab页面的内存\">chrome 一个tab页面的内存</h2><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/chrome-storage.png\" alt=\"\"></p>"},{"title":"立即调用函数表达式","date":"2016-03-20T14:26:11.000Z","_content":"我第一次见到\n```\n(function($){\n\t\n})(jQuery);\n\n```\n并不理解这段程序的意思。That's why I write this blog.\n\n<!--more-->\nIIFE=\"Immediately-Invoked Function Expression\"\n立即调用函数表达式\n\n有些人称之为 “self-executing anonymous function”\n自执行匿名函数\n\n它的形式是：\n```\n(function (){\n\t//something\n}());\n```\nor\n\n```\n(function (){\n\t//something\n})();\n```\n\n这里面的函数是一个匿名函数。后面的括号表示对函数的调用(执行)里面可以传入实参。另外一个括号表示分组运算符。要想彻底理解要先搞清楚一些概念。\n\n### 函数声明\n\n匿名函数的声明\n\n```\nfunction (){\n\t//something\n};\n```\n具名函数的声明\n\n```\nfunction a(){\n\t//something\n};\na()\n\n```\n他们是statement,不是expression。他无法在后面加一个()就可以执行。比如\n```\nfunction (){\n\t//something\n}();//Uncaught SyntaxError: Unexpected token (\n\nfunction a(){\n\t//something\n}();//Uncaught SyntaxError: Unexpected token )\n```\n\n第一个提示错误(，是因为这里的括号是作为函数或对象方法的调用运算符。他是匿名函数，没有函数名，所以报错了。\n\n第二个有函数名了，为啥还报错，因为这时后面的()是作为[分组运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping)。分组运算符里面的内容为空，所以运行到)就报错了。\n\n如果换成\n```\nfunction a(){\n\tconsole.log(\"call a\");\n}(1);\n```\n就可以运行了，因为这时分组运算符里面不为空啦。\n```\nfunction a(){\n\tconsole.log(\"call a\");\n}(alert(\"haha\"));\n\n```\n也是一样的，先执行警告，然后声明这个函数。你会发现并没有执行这个函数a().\n\n\n\n### 函数表达式\n\n函数表达式中的函数可以为匿名函数，也可以有函数名，但是该函数实际上不能直接使用，只能通过表达式左边的变量 a 来调用。\n\n将匿名函数放在一个赋值表达式的右边\n\n```\nvar a = function(){\n\t//something\n};\na();\n```\n将具名函数放在一个赋值表达式的右边\n\n```\nvar a = function b(){\n\t//something\n};\na();\nb();//这样是错误的\n```\n刚才的函数声明不能直接加()运行，现在是函数表达式了，现在就可以直接加()运行了。\n```\nvar a = function b(){\n\t//something\n}();\n```\n函数声明非常容易转换为函数表达式:\n\n* 成为表达式的一部分(如上例就是赋值表达式的一部分)\n* 不再是函数或者script自身的“源元素” （source element）。在script或者函数体内“源元素”并非是内嵌的语句（statement）\n\n\n\n\n所以加上一切能使其成为函数表达式的[运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators)后，后面都可以加一个()来立即执行调用这个函数。\n如，所有的一元运算符\n\n```\n! function b() {\n    console.log('called b');\n}(); \n\n- function b() {\n    console.log('called b')\n}();\n\n+ function b() {\n    console.log('called b')\n}();\n\n~ function b() {\n    console.log('called b')\n}();\n\ntypeof function b() {\n    console.log('called b')\n}();\n\ndelete function b() {\n    console.log('called b')\n}();\n\nvoid function b() {\n    console.log('called b')\n}();\n\n```\n还有：\n```\ntrue ||function b() {\n    console.log('called b')\n}();\n[function () {\n    console.log('called b')\n}()];\nnew function b() {\n    console.log('called b')\n}();\n```\n不过像!,+,-都会对函数返回的结果有计算，所以直接用一个分组运算符，对函数不会造成影响。\n```\nconsole.log(-function b() {\n        console.log('called b');\n        return 3;\n}());//result:-3\nconsole.log(~function b() {\n        console.log('called b');\n        return 3;\n}());//result:-4\n```\n回到最开始的问题。\n```\n// Code 1:\n(function ($) { \n    // Javascript code \n})(jQuery)\n\n// 相当于:\nvar myFunction = function ($) { \n    // Javascript code \n};\n(myFuntion)(jQuery);//第一个括号是分组运算符，第二个括号表执行。\n//不过这里的myFunction可以直接执行。因为它已经是表达式了，无需再添加一个分组运算符转换成表达式。\nmyFunction(jQuery);\n```\n其实是将$作为形参，jQuery 作为实参传入，并且是一个立即执行的函数表达式。\n\n## 结语\n\n本文参考了\n\n[深入理解JavaScript系列（4）：立即调用的函数表达式](http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html)\n\n[JavaScript 匿名函数有哪几种执行方式?](https://www.zhihu.com/question/20249179)\n\n[JavaScript中的立即执行函数](https://segmentfault.com/a/1190000003902899)\n\n[js中(function(){…})()立即执行函数写法理解](http://dengo.org/archives/1004)\n\n[原文](http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife)","source":"_posts/IIFE-md.md","raw":"title: 立即调用函数表达式\ndate: 2016-03-20 22:26:11\ntags:\n---\n我第一次见到\n```\n(function($){\n\t\n})(jQuery);\n\n```\n并不理解这段程序的意思。That's why I write this blog.\n\n<!--more-->\nIIFE=\"Immediately-Invoked Function Expression\"\n立即调用函数表达式\n\n有些人称之为 “self-executing anonymous function”\n自执行匿名函数\n\n它的形式是：\n```\n(function (){\n\t//something\n}());\n```\nor\n\n```\n(function (){\n\t//something\n})();\n```\n\n这里面的函数是一个匿名函数。后面的括号表示对函数的调用(执行)里面可以传入实参。另外一个括号表示分组运算符。要想彻底理解要先搞清楚一些概念。\n\n### 函数声明\n\n匿名函数的声明\n\n```\nfunction (){\n\t//something\n};\n```\n具名函数的声明\n\n```\nfunction a(){\n\t//something\n};\na()\n\n```\n他们是statement,不是expression。他无法在后面加一个()就可以执行。比如\n```\nfunction (){\n\t//something\n}();//Uncaught SyntaxError: Unexpected token (\n\nfunction a(){\n\t//something\n}();//Uncaught SyntaxError: Unexpected token )\n```\n\n第一个提示错误(，是因为这里的括号是作为函数或对象方法的调用运算符。他是匿名函数，没有函数名，所以报错了。\n\n第二个有函数名了，为啥还报错，因为这时后面的()是作为[分组运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping)。分组运算符里面的内容为空，所以运行到)就报错了。\n\n如果换成\n```\nfunction a(){\n\tconsole.log(\"call a\");\n}(1);\n```\n就可以运行了，因为这时分组运算符里面不为空啦。\n```\nfunction a(){\n\tconsole.log(\"call a\");\n}(alert(\"haha\"));\n\n```\n也是一样的，先执行警告，然后声明这个函数。你会发现并没有执行这个函数a().\n\n\n\n### 函数表达式\n\n函数表达式中的函数可以为匿名函数，也可以有函数名，但是该函数实际上不能直接使用，只能通过表达式左边的变量 a 来调用。\n\n将匿名函数放在一个赋值表达式的右边\n\n```\nvar a = function(){\n\t//something\n};\na();\n```\n将具名函数放在一个赋值表达式的右边\n\n```\nvar a = function b(){\n\t//something\n};\na();\nb();//这样是错误的\n```\n刚才的函数声明不能直接加()运行，现在是函数表达式了，现在就可以直接加()运行了。\n```\nvar a = function b(){\n\t//something\n}();\n```\n函数声明非常容易转换为函数表达式:\n\n* 成为表达式的一部分(如上例就是赋值表达式的一部分)\n* 不再是函数或者script自身的“源元素” （source element）。在script或者函数体内“源元素”并非是内嵌的语句（statement）\n\n\n\n\n所以加上一切能使其成为函数表达式的[运算符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators)后，后面都可以加一个()来立即执行调用这个函数。\n如，所有的一元运算符\n\n```\n! function b() {\n    console.log('called b');\n}(); \n\n- function b() {\n    console.log('called b')\n}();\n\n+ function b() {\n    console.log('called b')\n}();\n\n~ function b() {\n    console.log('called b')\n}();\n\ntypeof function b() {\n    console.log('called b')\n}();\n\ndelete function b() {\n    console.log('called b')\n}();\n\nvoid function b() {\n    console.log('called b')\n}();\n\n```\n还有：\n```\ntrue ||function b() {\n    console.log('called b')\n}();\n[function () {\n    console.log('called b')\n}()];\nnew function b() {\n    console.log('called b')\n}();\n```\n不过像!,+,-都会对函数返回的结果有计算，所以直接用一个分组运算符，对函数不会造成影响。\n```\nconsole.log(-function b() {\n        console.log('called b');\n        return 3;\n}());//result:-3\nconsole.log(~function b() {\n        console.log('called b');\n        return 3;\n}());//result:-4\n```\n回到最开始的问题。\n```\n// Code 1:\n(function ($) { \n    // Javascript code \n})(jQuery)\n\n// 相当于:\nvar myFunction = function ($) { \n    // Javascript code \n};\n(myFuntion)(jQuery);//第一个括号是分组运算符，第二个括号表执行。\n//不过这里的myFunction可以直接执行。因为它已经是表达式了，无需再添加一个分组运算符转换成表达式。\nmyFunction(jQuery);\n```\n其实是将$作为形参，jQuery 作为实参传入，并且是一个立即执行的函数表达式。\n\n## 结语\n\n本文参考了\n\n[深入理解JavaScript系列（4）：立即调用的函数表达式](http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html)\n\n[JavaScript 匿名函数有哪几种执行方式?](https://www.zhihu.com/question/20249179)\n\n[JavaScript中的立即执行函数](https://segmentfault.com/a/1190000003902899)\n\n[js中(function(){…})()立即执行函数写法理解](http://dengo.org/archives/1004)\n\n[原文](http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife)","slug":"IIFE-md","published":1,"updated":"2016-03-20T14:30:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5i0002llsgqne5rmfk","content":"<p>我第一次见到<br><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span>($)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)(<span class=\"name\">jQuery</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>并不理解这段程序的意思。That’s why I write this blog.</p>\n<a id=\"more\"></a>\n<p>IIFE=”Immediately-Invoked Function Expression”<br>立即调用函数表达式</p>\n<p>有些人称之为 “self-executing anonymous function”<br>自执行匿名函数</p>\n<p>它的形式是：<br><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span> ()&#123;</span><br><span class=\"line\">\t//something</span><br><span class=\"line\">&#125;())<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>or</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span> ()&#123;</span><br><span class=\"line\">\t//something</span><br><span class=\"line\">&#125;)()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>这里面的函数是一个匿名函数。后面的括号表示对函数的调用(执行)里面可以传入实参。另外一个括号表示分组运算符。要想彻底理解要先搞清楚一些概念。</p>\n<h3 id=\"函数声明\">函数声明</h3><p>匿名函数的声明</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>具名函数的声明</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure>\n<p>他们是statement,不是expression。他无法在后面加一个()就可以执行。比如<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;();<span class=\"comment\">//Uncaught SyntaxError: Unexpected token (</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;();<span class=\"comment\">//Uncaught SyntaxError: Unexpected token )</span></span><br></pre></td></tr></table></figure></p>\n<p>第一个提示错误(，是因为这里的括号是作为函数或对象方法的调用运算符。他是匿名函数，没有函数名，所以报错了。</p>\n<p>第二个有函数名了，为啥还报错，因为这时后面的()是作为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping\" target=\"_blank\" rel=\"external\">分组运算符</a>。分组运算符里面的内容为空，所以运行到)就报错了。</p>\n<p>如果换成<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">()</span><span class=\"comment\">&#123;</span><br><span class=\"line\">\tconsole.log(\"call a\");</span><br><span class=\"line\">&#125;</span><span class=\"params\">(1)</span>;</span></span><br></pre></td></tr></table></figure></p>\n<p>就可以运行了，因为这时分组运算符里面不为空啦。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"call a\"</span>);</span><br><span class=\"line\">&#125;(alert(<span class=\"string\">\"haha\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>也是一样的，先执行警告，然后声明这个函数。你会发现并没有执行这个函数a().</p>\n<h3 id=\"函数表达式\">函数表达式</h3><p>函数表达式中的函数可以为匿名函数，也可以有函数名，但是该函数实际上不能直接使用，只能通过表达式左边的变量 a 来调用。</p>\n<p>将匿名函数放在一个赋值表达式的右边</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n<p>将具名函数放在一个赋值表达式的右边</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();</span><br><span class=\"line\">b();<span class=\"comment\">//这样是错误的</span></span><br></pre></td></tr></table></figure>\n<p>刚才的函数声明不能直接加()运行，现在是函数表达式了，现在就可以直接加()运行了。<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure></p>\n<p>函数声明非常容易转换为函数表达式:</p>\n<ul>\n<li>成为表达式的一部分(如上例就是赋值表达式的一部分)</li>\n<li>不再是函数或者script自身的“源元素” （source element）。在script或者函数体内“源元素”并非是内嵌的语句（statement）</li>\n</ul>\n<p>所以加上一切能使其成为函数表达式的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators\" target=\"_blank\" rel=\"external\">运算符</a>后，后面都可以加一个()来立即执行调用这个函数。<br>如，所有的一元运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>);</span><br><span class=\"line\">&#125;(); </span><br><span class=\"line\"></span><br><span class=\"line\">- <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">+ <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">~ <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>还有：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> ||<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">[<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;()];</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure></p>\n<p>不过像!,+,-都会对函数返回的结果有计算，所以直接用一个分组运算符，对函数不会造成影响。<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(-function b() &#123;</span><br><span class=\"line\">        console.log('called b');</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;());//<span class=\"literal\">result</span>:-<span class=\"number\">3</span></span><br><span class=\"line\">console.log(~function b() &#123;</span><br><span class=\"line\">        console.log('called b');</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;());//<span class=\"literal\">result</span>:-<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<p>回到最开始的问题。<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Code 1:</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Javascript code </span></span><br><span class=\"line\">&#125;)(jQuery)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFunction = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Javascript code </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(myFuntion)(jQuery);<span class=\"comment\">//第一个括号是分组运算符，第二个括号表执行。</span></span><br><span class=\"line\"><span class=\"comment\">//不过这里的myFunction可以直接执行。因为它已经是表达式了，无需再添加一个分组运算符转换成表达式。</span></span><br><span class=\"line\">myFunction(jQuery);</span><br></pre></td></tr></table></figure></p>\n<p>其实是将$作为形参，jQuery 作为实参传入，并且是一个立即执行的函数表达式。</p>\n<h2 id=\"结语\">结语</h2><p>本文参考了</p>\n<p><a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html\" target=\"_blank\" rel=\"external\">深入理解JavaScript系列（4）：立即调用的函数表达式</a></p>\n<p><a href=\"https://www.zhihu.com/question/20249179\" target=\"_blank\" rel=\"external\">JavaScript 匿名函数有哪几种执行方式?</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000003902899\" target=\"_blank\" rel=\"external\">JavaScript中的立即执行函数</a></p>\n<p><a href=\"http://dengo.org/archives/1004\" target=\"_blank\" rel=\"external\">js中(function(){…})()立即执行函数写法理解</a></p>\n<p><a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife\" target=\"_blank\" rel=\"external\">原文</a></p>\n","excerpt":"<p>我第一次见到<br><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span>($)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)(<span class=\"name\">jQuery</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>并不理解这段程序的意思。That’s why I write this blog.</p>","more":"<p>IIFE=”Immediately-Invoked Function Expression”<br>立即调用函数表达式</p>\n<p>有些人称之为 “self-executing anonymous function”<br>自执行匿名函数</p>\n<p>它的形式是：<br><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span> ()&#123;</span><br><span class=\"line\">\t//something</span><br><span class=\"line\">&#125;())<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>or</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span> ()&#123;</span><br><span class=\"line\">\t//something</span><br><span class=\"line\">&#125;)()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>这里面的函数是一个匿名函数。后面的括号表示对函数的调用(执行)里面可以传入实参。另外一个括号表示分组运算符。要想彻底理解要先搞清楚一些概念。</p>\n<h3 id=\"函数声明\">函数声明</h3><p>匿名函数的声明</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>具名函数的声明</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure>\n<p>他们是statement,不是expression。他无法在后面加一个()就可以执行。比如<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;();<span class=\"comment\">//Uncaught SyntaxError: Unexpected token (</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;();<span class=\"comment\">//Uncaught SyntaxError: Unexpected token )</span></span><br></pre></td></tr></table></figure></p>\n<p>第一个提示错误(，是因为这里的括号是作为函数或对象方法的调用运算符。他是匿名函数，没有函数名，所以报错了。</p>\n<p>第二个有函数名了，为啥还报错，因为这时后面的()是作为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping\">分组运算符</a>。分组运算符里面的内容为空，所以运行到)就报错了。</p>\n<p>如果换成<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">()</span><span class=\"comment\">&#123;</span><br><span class=\"line\">\tconsole.log(\"call a\");</span><br><span class=\"line\">&#125;</span><span class=\"params\">(1)</span>;</span></span><br></pre></td></tr></table></figure></p>\n<p>就可以运行了，因为这时分组运算符里面不为空啦。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"call a\"</span>);</span><br><span class=\"line\">&#125;(alert(<span class=\"string\">\"haha\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>也是一样的，先执行警告，然后声明这个函数。你会发现并没有执行这个函数a().</p>\n<h3 id=\"函数表达式\">函数表达式</h3><p>函数表达式中的函数可以为匿名函数，也可以有函数名，但是该函数实际上不能直接使用，只能通过表达式左边的变量 a 来调用。</p>\n<p>将匿名函数放在一个赋值表达式的右边</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n<p>将具名函数放在一个赋值表达式的右边</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a();</span><br><span class=\"line\">b();<span class=\"comment\">//这样是错误的</span></span><br></pre></td></tr></table></figure>\n<p>刚才的函数声明不能直接加()运行，现在是函数表达式了，现在就可以直接加()运行了。<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//something</span></span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure></p>\n<p>函数声明非常容易转换为函数表达式:</p>\n<ul>\n<li>成为表达式的一部分(如上例就是赋值表达式的一部分)</li>\n<li>不再是函数或者script自身的“源元素” （source element）。在script或者函数体内“源元素”并非是内嵌的语句（statement）</li>\n</ul>\n<p>所以加上一切能使其成为函数表达式的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators\">运算符</a>后，后面都可以加一个()来立即执行调用这个函数。<br>如，所有的一元运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>);</span><br><span class=\"line\">&#125;(); </span><br><span class=\"line\"></span><br><span class=\"line\">- <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">+ <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">~ <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<p>还有：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> ||<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">[<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;()];</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>)</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure></p>\n<p>不过像!,+,-都会对函数返回的结果有计算，所以直接用一个分组运算符，对函数不会造成影响。<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(-function b() &#123;</span><br><span class=\"line\">        console.log('called b');</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;());//<span class=\"literal\">result</span>:-<span class=\"number\">3</span></span><br><span class=\"line\">console.log(~function b() &#123;</span><br><span class=\"line\">        console.log('called b');</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;());//<span class=\"literal\">result</span>:-<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<p>回到最开始的问题。<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Code 1:</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Javascript code </span></span><br><span class=\"line\">&#125;)(jQuery)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFunction = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// Javascript code </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(myFuntion)(jQuery);<span class=\"comment\">//第一个括号是分组运算符，第二个括号表执行。</span></span><br><span class=\"line\"><span class=\"comment\">//不过这里的myFunction可以直接执行。因为它已经是表达式了，无需再添加一个分组运算符转换成表达式。</span></span><br><span class=\"line\">myFunction(jQuery);</span><br></pre></td></tr></table></figure></p>\n<p>其实是将$作为形参，jQuery 作为实参传入，并且是一个立即执行的函数表达式。</p>\n<h2 id=\"结语\">结语</h2><p>本文参考了</p>\n<p><a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html\">深入理解JavaScript系列（4）：立即调用的函数表达式</a></p>\n<p><a href=\"https://www.zhihu.com/question/20249179\">JavaScript 匿名函数有哪几种执行方式?</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000003902899\">JavaScript中的立即执行函数</a></p>\n<p><a href=\"http://dengo.org/archives/1004\">js中(function(){…})()立即执行函数写法理解</a></p>\n<p><a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife\">原文</a></p>"},{"title":"Pixhawk Source Code Analyze(1)","date":"2015-11-30T02:40:05.000Z","_content":"## Makefile\n\n```\n# top level makefile to build SITL for primary vehicle targets. \n# Useful for static analysis tools\n\nall: sitl\n\nsitl: TARGET=sitl\nsitl: plane copter rover antennatracker\n\nlinux: TARGET=linux\nlinux: plane copter rover antennatracker\n\nclean: TARGET=clean\nclean: plane copter rover antennatracker\n\n# 声明后面的这些命令是伪目标\n.PHONY: plane copter rover antennatracker\n\nplane:\n\t$(MAKE) -C ArduPlane $(TARGET)\n\ncopter:\n\t$(MAKE) -C ArduCopter $(TARGET)\n\nrover:\n\t$(MAKE) -C APMrover2 $(TARGET)\n\nantennatracker:\n\t$(MAKE) -C AntennaTracker $(TARGET)\n\n```\n\n参考:[Make 命令教程](http://www.ruanyifeng.com/blog/2015/02/make.html)","source":"_posts/analyze-1.md","raw":"title: Pixhawk Source Code Analyze(1)\ndate: 2015-11-30 10:40:05\ntags: pixhawk\n---\n## Makefile\n\n```\n# top level makefile to build SITL for primary vehicle targets. \n# Useful for static analysis tools\n\nall: sitl\n\nsitl: TARGET=sitl\nsitl: plane copter rover antennatracker\n\nlinux: TARGET=linux\nlinux: plane copter rover antennatracker\n\nclean: TARGET=clean\nclean: plane copter rover antennatracker\n\n# 声明后面的这些命令是伪目标\n.PHONY: plane copter rover antennatracker\n\nplane:\n\t$(MAKE) -C ArduPlane $(TARGET)\n\ncopter:\n\t$(MAKE) -C ArduCopter $(TARGET)\n\nrover:\n\t$(MAKE) -C APMrover2 $(TARGET)\n\nantennatracker:\n\t$(MAKE) -C AntennaTracker $(TARGET)\n\n```\n\n参考:[Make 命令教程](http://www.ruanyifeng.com/blog/2015/02/make.html)","slug":"analyze-1","published":1,"updated":"2015-12-03T11:31:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5j0003llsgg6a2m2zj","content":"<h2 id=\"Makefile\">Makefile</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top level makefile to build SITL for primary vehicle targets. </span></span><br><span class=\"line\"><span class=\"comment\"># Useful for static analysis tools</span></span><br><span class=\"line\"></span><br><span class=\"line\">all: sitl</span><br><span class=\"line\"></span><br><span class=\"line\">sitl: TARGET=sitl</span><br><span class=\"line\">sitl: plane copter rover antennatracker</span><br><span class=\"line\"></span><br><span class=\"line\">linux: TARGET=linux</span><br><span class=\"line\">linux: plane copter rover antennatracker</span><br><span class=\"line\"></span><br><span class=\"line\">clean: TARGET=clean</span><br><span class=\"line\">clean: plane copter rover antennatracker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明后面的这些命令是伪目标</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">.PHONY</span>: plane copter rover antennatracker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">plane:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C ArduPlane <span class=\"variable\">$(TARGET)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">copter:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C ArduCopter <span class=\"variable\">$(TARGET)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">rover:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C APMrover2 <span class=\"variable\">$(TARGET)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">antennatracker:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C AntennaTracker <span class=\"variable\">$(TARGET)</span></span><br></pre></td></tr></table></figure>\n<p>参考:<a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" rel=\"external\">Make 命令教程</a></p>\n","excerpt":"","more":"<h2 id=\"Makefile\">Makefile</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># top level makefile to build SITL for primary vehicle targets. </span></span><br><span class=\"line\"><span class=\"comment\"># Useful for static analysis tools</span></span><br><span class=\"line\"></span><br><span class=\"line\">all: sitl</span><br><span class=\"line\"></span><br><span class=\"line\">sitl: TARGET=sitl</span><br><span class=\"line\">sitl: plane copter rover antennatracker</span><br><span class=\"line\"></span><br><span class=\"line\">linux: TARGET=linux</span><br><span class=\"line\">linux: plane copter rover antennatracker</span><br><span class=\"line\"></span><br><span class=\"line\">clean: TARGET=clean</span><br><span class=\"line\">clean: plane copter rover antennatracker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明后面的这些命令是伪目标</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">.PHONY</span>: plane copter rover antennatracker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">plane:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C ArduPlane <span class=\"variable\">$(TARGET)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">copter:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C ArduCopter <span class=\"variable\">$(TARGET)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">rover:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C APMrover2 <span class=\"variable\">$(TARGET)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">antennatracker:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C AntennaTracker <span class=\"variable\">$(TARGET)</span></span><br></pre></td></tr></table></figure>\n<p>参考:<a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\">Make 命令教程</a></p>\n"},{"layout":"http","title":"4xx","date":"2016-05-30T02:43:17.000Z","_content":"这是我阅读http协议4xx状态码的笔记\n\n4xx开头的表示这是客户端出现了错误。\n\n除非请求是head方法，否则服务端都应该在请求体中描述出错的情况，永久错误还是临时性错误。\n\n### 400 Bad Request\n\n表示请求语法错误，而且这个请求也不应该被重复提交。\n\n\n### 401\n\n### 401 vs 403\n\n401 和 403的区别是，401可能是你认证不通过，也有可能是你压根没有认证那个header，所以你可以修改一下认证重新提交相同的请求，403则不管你有没有认证，即便是认证通过了，但你依然没有权限访问这个uri.\n\n![403 Forbidden vs 401 Unauthorized HTTP responses](http://stackoverflow.com/questions/3297048/403-forbidden-vs-401-unauthorized-http-responses)","source":"_posts/4xx.md","raw":"layout: http\ntitle: 4xx\ndate: 2016-05-30 10:43:17\ntags:\n---\n这是我阅读http协议4xx状态码的笔记\n\n4xx开头的表示这是客户端出现了错误。\n\n除非请求是head方法，否则服务端都应该在请求体中描述出错的情况，永久错误还是临时性错误。\n\n### 400 Bad Request\n\n表示请求语法错误，而且这个请求也不应该被重复提交。\n\n\n### 401\n\n### 401 vs 403\n\n401 和 403的区别是，401可能是你认证不通过，也有可能是你压根没有认证那个header，所以你可以修改一下认证重新提交相同的请求，403则不管你有没有认证，即便是认证通过了，但你依然没有权限访问这个uri.\n\n![403 Forbidden vs 401 Unauthorized HTTP responses](http://stackoverflow.com/questions/3297048/403-forbidden-vs-401-unauthorized-http-responses)","slug":"4xx","published":1,"updated":"2018-07-12T13:00:21.000Z","comments":1,"photos":[],"link":"","_id":"cjrekwo5j0004llsg972rxn1j","content":"<p>这是我阅读http协议4xx状态码的笔记</p>\n<p>4xx开头的表示这是客户端出现了错误。</p>\n<p>除非请求是head方法，否则服务端都应该在请求体中描述出错的情况，永久错误还是临时性错误。</p>\n<h3 id=\"400_Bad_Request\">400 Bad Request</h3><p>表示请求语法错误，而且这个请求也不应该被重复提交。</p>\n<h3 id=\"401\">401</h3><h3 id=\"401_vs_403\">401 vs 403</h3><p>401 和 403的区别是，401可能是你认证不通过，也有可能是你压根没有认证那个header，所以你可以修改一下认证重新提交相同的请求，403则不管你有没有认证，即便是认证通过了，但你依然没有权限访问这个uri.</p>\n<p><img src=\"http://stackoverflow.com/questions/3297048/403-forbidden-vs-401-unauthorized-http-responses\" alt=\"403 Forbidden vs 401 Unauthorized HTTP responses\"></p>\n","excerpt":"","more":"<p>这是我阅读http协议4xx状态码的笔记</p>\n<p>4xx开头的表示这是客户端出现了错误。</p>\n<p>除非请求是head方法，否则服务端都应该在请求体中描述出错的情况，永久错误还是临时性错误。</p>\n<h3 id=\"400_Bad_Request\">400 Bad Request</h3><p>表示请求语法错误，而且这个请求也不应该被重复提交。</p>\n<h3 id=\"401\">401</h3><h3 id=\"401_vs_403\">401 vs 403</h3><p>401 和 403的区别是，401可能是你认证不通过，也有可能是你压根没有认证那个header，所以你可以修改一下认证重新提交相同的请求，403则不管你有没有认证，即便是认证通过了，但你依然没有权限访问这个uri.</p>\n<p><img src=\"http://stackoverflow.com/questions/3297048/403-forbidden-vs-401-unauthorized-http-responses\" alt=\"403 Forbidden vs 401 Unauthorized HTTP responses\"></p>\n"},{"title":"纯CSS3制作动态饼状图","date":"2015-10-19T09:34:12.000Z","_content":"# [Demo](http://jsfiddle.net/0m20xaLx/1/)\n\n刚开始在想如何画圆环，想着用两个Div嵌套，还一直研究如何使圆心居中，实际上就是如何是子div垂直水平居中，也算误打误撞学了一下知识。\n\n看了教程才意识到只需一个div设置一下边框宽度就可以画出圆环了。\n\nhtml:\n```\n<div class=\"circle\"></div>\n\n```\n<!--more-->\n首先利用:before要画一个半圆:\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/half-circle.png)\n\n```\n.circle:before{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tborder-radius: 50px 0 0 50px;/*画半圆*/\n\t\t\tbackground:#0cf;\n\t\t}\n```\n画半圆的关键是设置border-radius的大小和宽一致,以及宽度是高度的一半。\n```\nborder-radius: 20px 0 0 20px;\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/radius-1.png)\n\n```\nborder-radius: 30px 0 0 30px;\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/radius-2.png)\n\n利用div本身的遮罩实现0度到180度的变换：\n\n```\n.circle{\n\t\t\tbox-sizing:border-box;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tbackground:rgba(0,0,0,0.2);/*为了看清楚，先随意设一个颜色*/\n\t\t\tposition: relative;\n\t}\n\t\t.circle:before{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\tz-index: -1;/*遮罩应该位于圆的上层，覆盖掉圆*/\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tborder-radius: 50px 0 0 50px;\n\t\t\tbackground:#0cf;\n\t\t\ttransform:rotate(30deg);/*旋转30度*/\n\t\t\ttransform-origin:50px 50px;/*旋转的圆心的位置应该位于直径的中点*/\n\t\t}\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/deg.png)\n如果动态改变角度，就可以实现：\n\n```\n.circle:before{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\tz-index: -1;/*遮罩应该位于园的上层，覆盖掉园*/\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tbackground:#0cf;\n\t\t\ttransform:rotate(0deg);\n\t\t\ttransform-origin:50px 50px;\n\t\t\tanimation:myRotate-before 2s linear;/*自定义动画*/\n\t\t\t-webkit-animation:myRotate-before 2s linear;\n\t\t}\n\t\t@-webkit-keyframes myRotate-before /* Safari and Chrome */\n\t\t{\n\t\tfrom {transform:rotate(0deg);}/*动画的实现是从0度转到180度*/\n\t\tto {transform:rotate(180deg);}\n\t\t}\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/a.gif)\n\n利用:after为元素右侧也画一个半圆，代码部分的变动只是把刚才的半圆旋转到180度而已\n```\n.circle:after{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tborder-radius: 50px 0 0 50px;\n\t\t\tbackground:rgba(30,144,255,0.2);\n\t\t\ttransform:rotate(180deg);\n\t\t\ttransform-origin:50px 50px;\n\t\t}\n```\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/circle2.png)\n如果将:before半圆旋转270度，与：after半圆重合起来看就是一个角度为270的圆。刚开始设置其属性为opacity：0，等到:before的半圆转到180后，将其opacity设为1，让这个躲在后面的圆显现出来即可。还有一点就是左边的遮罩在before半圆旋转范围在0-180时应该一直保持遮罩，但在180-360时就应该将其背景色调为transparent，使得：before半圆能够在180-360的旋转过程中完整显现出来。\n![](http://7xk7fp.com1.z0.glb.clouddn.com/circle3.png)\n完整的css代码如下：\n```\n.circle{\n\t\t\tbox-sizing:border-box;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tbackground:white;\n\t\t\tposition: relative;\n\t\t\tanimation:myRotate 2s  linear forwards;/*forward的用处是让动画停止在最后1帧*/\n\t\t\t-webkit-animation:myRotate 2s  linear forwards;\n\t\t}\n\t\t.circle:before,.circle:after{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\tz-index: -1;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tborder: solid;\n\t\t\tborder-width:10px 0 10px 10px;/*画圆环*/\n\t\t\tborder-color:#0cf;\n\t\t\tborder-radius: 50px 0 0 50px;/*画半圆*/\n\t\t\tbackground:white;\n\t\t}\n\t\t.circle:before{\n\t\t\ttransform:rotate(0deg);\n\t\t\ttransform-origin:50px 50px;\n\t\t\tanimation:myRotate-before 2s  linear forwards;\n\t\t\t-webkit-animation:myRotate-before 2s  linear forwards;\n\t\t}\n\t\t.circle:after{\n\t\t\ttransform:rotate(180deg);\n\t\t\ttransform-origin:50px 50px;\n\t\t\tanimation:myRotate-after 2s linear forwards;\n\t\t\t-webkit-animation:myRotate-after 2s  linear forwards;\n\t\t\topacity: 0;\n\t\t}\n\t\t@-webkit-keyframes myRotate-before /* Safari and Chrome */\n\t\t{\n\t\tfrom {transform:rotate(0deg);}\n\t\tto {transform:rotate(320deg);}/*可以自己调整*/\n\t\t}\n\t\t@-webkit-keyframes myRotate-after  /*Safari and Chrome*/\n\t\t{\n\t\t0%{\n\t\t    opacity:0;\n\t\t  }\n\t\t  55%\n\t\t  {\n\t\t    opacity:0;\n\t\t  }\n\t\t  56%\n\t\t  {\n\t\t    opacity:1;\n\t\t  }\n\t\t  100%\n\t\t  {\n\t\t    opacity:1;\n\t\t  }\n\t\t}\n\t\t@-webkit-keyframes myRotate  /*Safari and Chrome*/\n\t\t{\n\t\t0%{\n\t\t   background:white;\n\t\t  }\n\t\t  56%\n\t\t  {\n\t\t    background:white;\n\t\t  }\n\t\t  57%\n\t\t  {\n\t\t    background:transparent;\n\t\t  }\n\t\t  100%\n\t\t  {\n\t\t    background:transparent;\n\t\t  }\n\t\t}\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/final.gif)\n参考的这篇文章:[純 CSS 繪製圓餅圖](http://www.oxxostudio.tw/articles/201503/css-pie-chart.html)\n\n","source":"_posts/circle.md","raw":"title: 纯CSS3制作动态饼状图\ndate: 2015-10-19 17:34:12\ntags: css\n---\n# [Demo](http://jsfiddle.net/0m20xaLx/1/)\n\n刚开始在想如何画圆环，想着用两个Div嵌套，还一直研究如何使圆心居中，实际上就是如何是子div垂直水平居中，也算误打误撞学了一下知识。\n\n看了教程才意识到只需一个div设置一下边框宽度就可以画出圆环了。\n\nhtml:\n```\n<div class=\"circle\"></div>\n\n```\n<!--more-->\n首先利用:before要画一个半圆:\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/half-circle.png)\n\n```\n.circle:before{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tborder-radius: 50px 0 0 50px;/*画半圆*/\n\t\t\tbackground:#0cf;\n\t\t}\n```\n画半圆的关键是设置border-radius的大小和宽一致,以及宽度是高度的一半。\n```\nborder-radius: 20px 0 0 20px;\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/radius-1.png)\n\n```\nborder-radius: 30px 0 0 30px;\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/radius-2.png)\n\n利用div本身的遮罩实现0度到180度的变换：\n\n```\n.circle{\n\t\t\tbox-sizing:border-box;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tbackground:rgba(0,0,0,0.2);/*为了看清楚，先随意设一个颜色*/\n\t\t\tposition: relative;\n\t}\n\t\t.circle:before{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\tz-index: -1;/*遮罩应该位于圆的上层，覆盖掉圆*/\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tborder-radius: 50px 0 0 50px;\n\t\t\tbackground:#0cf;\n\t\t\ttransform:rotate(30deg);/*旋转30度*/\n\t\t\ttransform-origin:50px 50px;/*旋转的圆心的位置应该位于直径的中点*/\n\t\t}\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/deg.png)\n如果动态改变角度，就可以实现：\n\n```\n.circle:before{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\tz-index: -1;/*遮罩应该位于园的上层，覆盖掉园*/\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tbackground:#0cf;\n\t\t\ttransform:rotate(0deg);\n\t\t\ttransform-origin:50px 50px;\n\t\t\tanimation:myRotate-before 2s linear;/*自定义动画*/\n\t\t\t-webkit-animation:myRotate-before 2s linear;\n\t\t}\n\t\t@-webkit-keyframes myRotate-before /* Safari and Chrome */\n\t\t{\n\t\tfrom {transform:rotate(0deg);}/*动画的实现是从0度转到180度*/\n\t\tto {transform:rotate(180deg);}\n\t\t}\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/a.gif)\n\n利用:after为元素右侧也画一个半圆，代码部分的变动只是把刚才的半圆旋转到180度而已\n```\n.circle:after{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tborder-radius: 50px 0 0 50px;\n\t\t\tbackground:rgba(30,144,255,0.2);\n\t\t\ttransform:rotate(180deg);\n\t\t\ttransform-origin:50px 50px;\n\t\t}\n```\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/circle2.png)\n如果将:before半圆旋转270度，与：after半圆重合起来看就是一个角度为270的圆。刚开始设置其属性为opacity：0，等到:before的半圆转到180后，将其opacity设为1，让这个躲在后面的圆显现出来即可。还有一点就是左边的遮罩在before半圆旋转范围在0-180时应该一直保持遮罩，但在180-360时就应该将其背景色调为transparent，使得：before半圆能够在180-360的旋转过程中完整显现出来。\n![](http://7xk7fp.com1.z0.glb.clouddn.com/circle3.png)\n完整的css代码如下：\n```\n.circle{\n\t\t\tbox-sizing:border-box;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tbackground:white;\n\t\t\tposition: relative;\n\t\t\tanimation:myRotate 2s  linear forwards;/*forward的用处是让动画停止在最后1帧*/\n\t\t\t-webkit-animation:myRotate 2s  linear forwards;\n\t\t}\n\t\t.circle:before,.circle:after{\n\t\t\tbox-sizing:border-box;\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\tz-index: -1;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 50px;\n\t\t\theight: 100px;\n\t\t\tborder: solid;\n\t\t\tborder-width:10px 0 10px 10px;/*画圆环*/\n\t\t\tborder-color:#0cf;\n\t\t\tborder-radius: 50px 0 0 50px;/*画半圆*/\n\t\t\tbackground:white;\n\t\t}\n\t\t.circle:before{\n\t\t\ttransform:rotate(0deg);\n\t\t\ttransform-origin:50px 50px;\n\t\t\tanimation:myRotate-before 2s  linear forwards;\n\t\t\t-webkit-animation:myRotate-before 2s  linear forwards;\n\t\t}\n\t\t.circle:after{\n\t\t\ttransform:rotate(180deg);\n\t\t\ttransform-origin:50px 50px;\n\t\t\tanimation:myRotate-after 2s linear forwards;\n\t\t\t-webkit-animation:myRotate-after 2s  linear forwards;\n\t\t\topacity: 0;\n\t\t}\n\t\t@-webkit-keyframes myRotate-before /* Safari and Chrome */\n\t\t{\n\t\tfrom {transform:rotate(0deg);}\n\t\tto {transform:rotate(320deg);}/*可以自己调整*/\n\t\t}\n\t\t@-webkit-keyframes myRotate-after  /*Safari and Chrome*/\n\t\t{\n\t\t0%{\n\t\t    opacity:0;\n\t\t  }\n\t\t  55%\n\t\t  {\n\t\t    opacity:0;\n\t\t  }\n\t\t  56%\n\t\t  {\n\t\t    opacity:1;\n\t\t  }\n\t\t  100%\n\t\t  {\n\t\t    opacity:1;\n\t\t  }\n\t\t}\n\t\t@-webkit-keyframes myRotate  /*Safari and Chrome*/\n\t\t{\n\t\t0%{\n\t\t   background:white;\n\t\t  }\n\t\t  56%\n\t\t  {\n\t\t    background:white;\n\t\t  }\n\t\t  57%\n\t\t  {\n\t\t    background:transparent;\n\t\t  }\n\t\t  100%\n\t\t  {\n\t\t    background:transparent;\n\t\t  }\n\t\t}\n```\n![](http://7xk7fp.com1.z0.glb.clouddn.com/final.gif)\n参考的这篇文章:[純 CSS 繪製圓餅圖](http://www.oxxostudio.tw/articles/201503/css-pie-chart.html)\n\n","slug":"circle","published":1,"updated":"2015-10-20T04:12:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5m0006llsgh2yl127s","content":"<h1 id=\"Demo\"><a href=\"http://jsfiddle.net/0m20xaLx/1/\" target=\"_blank\" rel=\"external\">Demo</a></h1><p>刚开始在想如何画圆环，想着用两个Div嵌套，还一直研究如何使圆心居中，实际上就是如何是子div垂直水平居中，也算误打误撞学了一下知识。</p>\n<p>看了教程才意识到只需一个div设置一下边框宽度就可以画出圆环了。</p>\n<p>html:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"circle\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>首先利用:before要画一个半圆:</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/half-circle.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">50px</span>;<span class=\"comment\">/*画半圆*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"number\">#0cf</span>;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>画半圆的关键是设置border-radius的大小和宽一致,以及宽度是高度的一半。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/radius-1.png\" alt=\"\"></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">30px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/radius-2.png\" alt=\"\"></p>\n<p>利用div本身的遮罩实现0度到180度的变换：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"built_in\">rgba</span>(0,0,0,0.2);<span class=\"comment\">/*为了看清楚，先随意设一个颜色*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;<span class=\"comment\">/*遮罩应该位于圆的上层，覆盖掉圆*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"number\">#0cf</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(30deg);<span class=\"comment\">/*旋转30度*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;<span class=\"comment\">/*旋转的圆心的位置应该位于直径的中点*/</span></span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/deg.png\" alt=\"\"><br>如果动态改变角度，就可以实现：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;<span class=\"comment\">/*遮罩应该位于园的上层，覆盖掉园*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"number\">#0cf</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(0deg);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">animation</span>:myRotate-before <span class=\"number\">2s</span> linear;<span class=\"comment\">/*自定义动画*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">-webkit-animation</span>:myRotate-before <span class=\"number\">2s</span> linear;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@<span class=\"keyword\">-webkit-keyframes</span> myRotate-before /* Safari and Chrome */</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(0deg);&#125;<span class=\"comment\">/*动画的实现是从0度转到180度*/</span></span><br><span class=\"line\">\t\t<span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(180deg);&#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/a.gif\" alt=\"\"></p>\n<p>利用:after为元素右侧也画一个半圆，代码部分的变动只是把刚才的半圆旋转到180度而已<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"built_in\">rgba</span>(30,144,255,0.2);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(180deg);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/circle2.png\" alt=\"\"><br>如果将:before半圆旋转270度，与：after半圆重合起来看就是一个角度为270的圆。刚开始设置其属性为opacity：0，等到:before的半圆转到180后，将其opacity设为1，让这个躲在后面的圆显现出来即可。还有一点就是左边的遮罩在before半圆旋转范围在0-180时应该一直保持遮罩，但在180-360时就应该将其背景色调为transparent，使得：before半圆能够在180-360的旋转过程中完整显现出来。<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/circle3.png\" alt=\"\"><br>完整的css代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:white;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">animation</span>:myRotate <span class=\"number\">2s</span>  linear forwards;<span class=\"comment\">/*forward的用处是让动画停止在最后1帧*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">-webkit-animation</span>:myRotate <span class=\"number\">2s</span>  linear forwards;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>,<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border</span>: solid;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-width</span>:<span class=\"number\">10px</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>;<span class=\"comment\">/*画圆环*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-color</span>:<span class=\"number\">#0cf</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">50px</span>;<span class=\"comment\">/*画半圆*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:white;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(0deg);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">animation</span>:myRotate-before <span class=\"number\">2s</span>  linear forwards;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">-webkit-animation</span>:myRotate-before <span class=\"number\">2s</span>  linear forwards;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(180deg);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">animation</span>:myRotate-after <span class=\"number\">2s</span> linear forwards;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">-webkit-animation</span>:myRotate-after <span class=\"number\">2s</span>  linear forwards;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@<span class=\"keyword\">-webkit-keyframes</span> myRotate-before /* Safari and Chrome */</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(0deg);&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(320deg);&#125;<span class=\"comment\">/*可以自己调整*/</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@<span class=\"keyword\">-webkit-keyframes</span> myRotate-after  /*Safari and Chrome*/</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t0%&#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">opacity</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  55%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">opacity</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  56%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">opacity</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  100%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">opacity</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@<span class=\"keyword\">-webkit-keyframes</span> myRotate  /*Safari and Chrome*/</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t0%&#123;</span><br><span class=\"line\">\t\t   <span class=\"attribute\">background</span>:white;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  56%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">background</span>:white;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  57%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">background</span>:transparent;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  100%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">background</span>:transparent;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/final.gif\" alt=\"\"><br>参考的这篇文章:<a href=\"http://www.oxxostudio.tw/articles/201503/css-pie-chart.html\" target=\"_blank\" rel=\"external\">純 CSS 繪製圓餅圖</a></p>\n","excerpt":"<h1 id=\"Demo\"><a href=\"http://jsfiddle.net/0m20xaLx/1/\">Demo</a></h1><p>刚开始在想如何画圆环，想着用两个Div嵌套，还一直研究如何使圆心居中，实际上就是如何是子div垂直水平居中，也算误打误撞学了一下知识。</p>\n<p>看了教程才意识到只需一个div设置一下边框宽度就可以画出圆环了。</p>\n<p>html:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"circle\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>","more":"<p>首先利用:before要画一个半圆:</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/half-circle.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">50px</span>;<span class=\"comment\">/*画半圆*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"number\">#0cf</span>;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>画半圆的关键是设置border-radius的大小和宽一致,以及宽度是高度的一半。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/radius-1.png\" alt=\"\"></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">30px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/radius-2.png\" alt=\"\"></p>\n<p>利用div本身的遮罩实现0度到180度的变换：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"built_in\">rgba</span>(0,0,0,0.2);<span class=\"comment\">/*为了看清楚，先随意设一个颜色*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;<span class=\"comment\">/*遮罩应该位于圆的上层，覆盖掉圆*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"number\">#0cf</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(30deg);<span class=\"comment\">/*旋转30度*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;<span class=\"comment\">/*旋转的圆心的位置应该位于直径的中点*/</span></span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/deg.png\" alt=\"\"><br>如果动态改变角度，就可以实现：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;<span class=\"comment\">/*遮罩应该位于园的上层，覆盖掉园*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"number\">#0cf</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(0deg);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">animation</span>:myRotate-before <span class=\"number\">2s</span> linear;<span class=\"comment\">/*自定义动画*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">-webkit-animation</span>:myRotate-before <span class=\"number\">2s</span> linear;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@<span class=\"keyword\">-webkit-keyframes</span> myRotate-before /* Safari and Chrome */</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(0deg);&#125;<span class=\"comment\">/*动画的实现是从0度转到180度*/</span></span><br><span class=\"line\">\t\t<span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(180deg);&#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/a.gif\" alt=\"\"></p>\n<p>利用:after为元素右侧也画一个半圆，代码部分的变动只是把刚才的半圆旋转到180度而已<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:<span class=\"built_in\">rgba</span>(30,144,255,0.2);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(180deg);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/circle2.png\" alt=\"\"><br>如果将:before半圆旋转270度，与：after半圆重合起来看就是一个角度为270的圆。刚开始设置其属性为opacity：0，等到:before的半圆转到180后，将其opacity设为1，让这个躲在后面的圆显现出来即可。还有一点就是左边的遮罩在before半圆旋转范围在0-180时应该一直保持遮罩，但在180-360时就应该将其背景色调为transparent，使得：before半圆能够在180-360的旋转过程中完整显现出来。<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/circle3.png\" alt=\"\"><br>完整的css代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:white;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">animation</span>:myRotate <span class=\"number\">2s</span>  linear forwards;<span class=\"comment\">/*forward的用处是让动画停止在最后1帧*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">-webkit-animation</span>:myRotate <span class=\"number\">2s</span>  linear forwards;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>,<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">z-index</span>: -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border</span>: solid;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-width</span>:<span class=\"number\">10px</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span>;<span class=\"comment\">/*画圆环*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-color</span>:<span class=\"number\">#0cf</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">50px</span>;<span class=\"comment\">/*画半圆*/</span></span><br><span class=\"line\">\t\t\t<span class=\"attribute\">background</span>:white;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:before</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(0deg);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">animation</span>:myRotate-before <span class=\"number\">2s</span>  linear forwards;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">-webkit-animation</span>:myRotate-before <span class=\"number\">2s</span>  linear forwards;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-class\">.circle</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(180deg);</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">transform-origin</span>:<span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">animation</span>:myRotate-after <span class=\"number\">2s</span> linear forwards;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">-webkit-animation</span>:myRotate-after <span class=\"number\">2s</span>  linear forwards;</span><br><span class=\"line\">\t\t\t<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@<span class=\"keyword\">-webkit-keyframes</span> myRotate-before /* Safari and Chrome */</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(0deg);&#125;</span><br><span class=\"line\">\t\t<span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(320deg);&#125;<span class=\"comment\">/*可以自己调整*/</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@<span class=\"keyword\">-webkit-keyframes</span> myRotate-after  /*Safari and Chrome*/</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t0%&#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">opacity</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  55%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">opacity</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  56%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">opacity</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  100%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">opacity</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t@<span class=\"keyword\">-webkit-keyframes</span> myRotate  /*Safari and Chrome*/</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t0%&#123;</span><br><span class=\"line\">\t\t   <span class=\"attribute\">background</span>:white;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  56%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">background</span>:white;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  57%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">background</span>:transparent;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t  100%</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t    <span class=\"attribute\">background</span>:transparent;</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/final.gif\" alt=\"\"><br>参考的这篇文章:<a href=\"http://www.oxxostudio.tw/articles/201503/css-pie-chart.html\">純 CSS 繪製圓餅圖</a></p>"},{"title":"css button host style","date":"2015-09-19T06:15:19.000Z","_content":"灵感来源于:[Michael Schmid](http://workdiary.de/)\n\n下面就利用CSS3中的transition 和 ::after ::before来制作。\n\n## 效果展示\n\n<!--more-->\n\n![end](http://7xk7fp.com1.z0.glb.clouddn.com/end.gif)\n\n\n## Turial\n\n###  画一个盒子装button\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n\t<style type=\"text/css\">\n\t.button{\n\t\theight: 100px;\n\t\twidth: 200px;\n\t\tborder: solid;\n\t\tborder-color: black;\n\t}\n\t</style>\n</head>\n<body>\n<div class=\"button\">button</div>\n</body>\n</html>\n```\n![button-start](http://7xk7fp.com1.z0.glb.clouddn.com/button-1.png)\n\n### button调到中间\n\n在button class里加上\n```\nline-height: 100px;/*单行文字居中的trick*/\ntext-align: center;\n```\n![button-center](http://7xk7fp.com1.z0.glb.clouddn.com/button-2.png)\n\n### 利用伪类::after ::before加入hover特效\n\n```\n.button::after{\n\t\tcontent: '';/*注意 即使没有内容 也要加上content 否则任何效果都显示不出来*/\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tleft: 0px;\n\t\theight: 100%;\n\t\twidth: 1%;/*为了让效果明显 先设置成1%,实际是从0%开始*/\n\t\tbackground: red;\n\t\t\n}\n.button:hover::after{\n\t\twidth: 100%;/*鼠标悬浮后宽度应变为100%*/\n}\n```\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/after.gif)\n如果加上过渡效果:\n```\n.button::after{\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tleft: 0px;\n\t\theight: 100%;\n\t\twidth: 1%;\n\t\tbackground: red;\n\t\ttransition: all 1s;/*为了让效果明显 先设置成1s*/\n\t\t\n}\n.button:hover::after{\n\t\twidth: 100%;\n}\n```\n加了特效 ,效果duang duang duang:\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/transition.gif)\n\n### 为什么在整个body里？\n为什么不是在button内部？\n\n因为absolute布局相对的父元素是上一级的relative 或者 absolute布局，button class里我们没有为他布局，相当默认的static，所以他直接相对于body，top:0;left:0;都是相对body的。因为body默认本身就是一个relative\n的布局。当我们为.button加上一个position:relative时：\n```\n.button{\n\t\tposition: relative;/*here！*/\n\t\theight: 100px;\n\t\twidth: 200px;\n\t\tborder: solid;\n\t\tborder-color: black;\n\t\tline-height: 100px;\n\t\ttext-align: center;\n\t}\n```\n效果就出来了:\n\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/button-content.gif)\n\n### 文字被遮住了\n\n怎么解决文字被遮住的问题？\n想到了用z-index，设置元素的堆叠顺序。默认是0，如果能让button比0高，不就可以一直在上面了。\n```\n#button{\n\t\tz-index: 1;\n}\n\n<div class=\"button\"><span id=\"button\">button</span></div>\n```\n然而效果没有改变：\n\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/button-content.gif)\n\n当:\n```\n#button{\n\t\tposition:relative;/*here!*/\n\t\tz-index: 1;\n}\n\n<div class=\"button\"><span id=\"button\">button</span></div>\n```\n效果就实现了。为什么加了一个position就实现了？请阅读：[CSS z-index 属性的使用方法和层级树的概念](http://www.neoease.com/css-z-index-property-and-layering-tree/)\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/label.gif)\n\n## 结语\n具体的色调 字体 大小 背景色就留给大家设计吧。\n","source":"_posts/css-learning.md","raw":"title: css button host style\ndate: 2015-09-19 14:15:19\ntags: css\n---\n灵感来源于:[Michael Schmid](http://workdiary.de/)\n\n下面就利用CSS3中的transition 和 ::after ::before来制作。\n\n## 效果展示\n\n<!--more-->\n\n![end](http://7xk7fp.com1.z0.glb.clouddn.com/end.gif)\n\n\n## Turial\n\n###  画一个盒子装button\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n\t<style type=\"text/css\">\n\t.button{\n\t\theight: 100px;\n\t\twidth: 200px;\n\t\tborder: solid;\n\t\tborder-color: black;\n\t}\n\t</style>\n</head>\n<body>\n<div class=\"button\">button</div>\n</body>\n</html>\n```\n![button-start](http://7xk7fp.com1.z0.glb.clouddn.com/button-1.png)\n\n### button调到中间\n\n在button class里加上\n```\nline-height: 100px;/*单行文字居中的trick*/\ntext-align: center;\n```\n![button-center](http://7xk7fp.com1.z0.glb.clouddn.com/button-2.png)\n\n### 利用伪类::after ::before加入hover特效\n\n```\n.button::after{\n\t\tcontent: '';/*注意 即使没有内容 也要加上content 否则任何效果都显示不出来*/\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tleft: 0px;\n\t\theight: 100%;\n\t\twidth: 1%;/*为了让效果明显 先设置成1%,实际是从0%开始*/\n\t\tbackground: red;\n\t\t\n}\n.button:hover::after{\n\t\twidth: 100%;/*鼠标悬浮后宽度应变为100%*/\n}\n```\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/after.gif)\n如果加上过渡效果:\n```\n.button::after{\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tleft: 0px;\n\t\theight: 100%;\n\t\twidth: 1%;\n\t\tbackground: red;\n\t\ttransition: all 1s;/*为了让效果明显 先设置成1s*/\n\t\t\n}\n.button:hover::after{\n\t\twidth: 100%;\n}\n```\n加了特效 ,效果duang duang duang:\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/transition.gif)\n\n### 为什么在整个body里？\n为什么不是在button内部？\n\n因为absolute布局相对的父元素是上一级的relative 或者 absolute布局，button class里我们没有为他布局，相当默认的static，所以他直接相对于body，top:0;left:0;都是相对body的。因为body默认本身就是一个relative\n的布局。当我们为.button加上一个position:relative时：\n```\n.button{\n\t\tposition: relative;/*here！*/\n\t\theight: 100px;\n\t\twidth: 200px;\n\t\tborder: solid;\n\t\tborder-color: black;\n\t\tline-height: 100px;\n\t\ttext-align: center;\n\t}\n```\n效果就出来了:\n\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/button-content.gif)\n\n### 文字被遮住了\n\n怎么解决文字被遮住的问题？\n想到了用z-index，设置元素的堆叠顺序。默认是0，如果能让button比0高，不就可以一直在上面了。\n```\n#button{\n\t\tz-index: 1;\n}\n\n<div class=\"button\"><span id=\"button\">button</span></div>\n```\n然而效果没有改变：\n\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/button-content.gif)\n\n当:\n```\n#button{\n\t\tposition:relative;/*here!*/\n\t\tz-index: 1;\n}\n\n<div class=\"button\"><span id=\"button\">button</span></div>\n```\n效果就实现了。为什么加了一个position就实现了？请阅读：[CSS z-index 属性的使用方法和层级树的概念](http://www.neoease.com/css-z-index-property-and-layering-tree/)\n![button：after](http://7xk7fp.com1.z0.glb.clouddn.com/label.gif)\n\n## 结语\n具体的色调 字体 大小 背景色就留给大家设计吧。\n","slug":"css-learning","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5o0007llsgxj5ilnbi","content":"<p>灵感来源于:<a href=\"http://workdiary.de/\" target=\"_blank\" rel=\"external\">Michael Schmid</a></p>\n<p>下面就利用CSS3中的transition 和 ::after ::before来制作。</p>\n<h2 id=\"效果展示\">效果展示</h2><a id=\"more\"></a>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/end.gif\" alt=\"end\"></p>\n<h2 id=\"Turial\">Turial</h2><h3 id=\"画一个盒子装button\">画一个盒子装button</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\"></span><br><span class=\"line\">\t<span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">border</span>: solid;</span><br><span class=\"line\">\t\t<span class=\"attribute\">border-color</span>: black;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/button-1.png\" alt=\"button-start\"></p>\n<h3 id=\"button调到中间\">button调到中间</h3><p>在button class里加上<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;<span class=\"comment\">/*单行文字居中的trick*/</span></span><br><span class=\"line\"><span class=\"attribute\">text-align</span>: center;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/button-2.png\" alt=\"button-center\"></p>\n<h3 id=\"利用伪类::after_::before加入hover特效\">利用伪类::after ::before加入hover特效</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">content</span>: <span class=\"string\">''</span>;<span class=\"comment\">/*注意 即使没有内容 也要加上content 否则任何效果都显示不出来*/</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">1%</span>;<span class=\"comment\">/*为了让效果明显 先设置成1%,实际是从0%开始*/</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"comment\">/*鼠标悬浮后宽度应变为100%*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/after.gif\" alt=\"button：after\"><br>如果加上过渡效果:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">1%</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">\t\t<span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;<span class=\"comment\">/*为了让效果明显 先设置成1s*/</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>加了特效 ,效果duang duang duang:<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/transition.gif\" alt=\"button：after\"></p>\n<h3 id=\"为什么在整个body里？\">为什么在整个body里？</h3><p>为什么不是在button内部？</p>\n<p>因为absolute布局相对的父元素是上一级的relative 或者 absolute布局，button class里我们没有为他布局，相当默认的static，所以他直接相对于body，top:0;left:0;都是相对body的。因为body默认本身就是一个relative<br>的布局。当我们为.button加上一个position:relative时：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">position</span>: relative;<span class=\"comment\">/*here！*/</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">border</span>: solid;</span><br><span class=\"line\">\t\t<span class=\"attribute\">border-color</span>: black;</span><br><span class=\"line\">\t\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果就出来了:</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/button-content.gif\" alt=\"button：after\"></p>\n<h3 id=\"文字被遮住了\">文字被遮住了</h3><p>怎么解决文字被遮住的问题？<br>想到了用z-index，设置元素的堆叠顺序。默认是0，如果能让button比0高，不就可以一直在上面了。<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#button&#123;</span></span><br><span class=\"line\">\t\tz-index: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"button\"</span>&gt;&lt;span <span class=\"built_in\">id</span>=<span class=\"string\">\"button\"</span>&gt;button&lt;/span&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然而效果没有改变：</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/button-content.gif\" alt=\"button：after\"></p>\n<p>当:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#button&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">position</span>:relative;<span class=\"comment\">/*here!*/</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"button\"</span>&gt;&lt;<span class=\"selector-tag\">span</span> id=<span class=\"string\">\"button\"</span>&gt;button&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>效果就实现了。为什么加了一个position就实现了？请阅读：<a href=\"http://www.neoease.com/css-z-index-property-and-layering-tree/\" target=\"_blank\" rel=\"external\">CSS z-index 属性的使用方法和层级树的概念</a><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/label.gif\" alt=\"button：after\"></p>\n<h2 id=\"结语\">结语</h2><p>具体的色调 字体 大小 背景色就留给大家设计吧。</p>\n","excerpt":"<p>灵感来源于:<a href=\"http://workdiary.de/\">Michael Schmid</a></p>\n<p>下面就利用CSS3中的transition 和 ::after ::before来制作。</p>\n<h2 id=\"效果展示\">效果展示</h2>","more":"<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/end.gif\" alt=\"end\"></p>\n<h2 id=\"Turial\">Turial</h2><h3 id=\"画一个盒子装button\">画一个盒子装button</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\"></span><br><span class=\"line\">\t<span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">border</span>: solid;</span><br><span class=\"line\">\t\t<span class=\"attribute\">border-color</span>: black;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/button-1.png\" alt=\"button-start\"></p>\n<h3 id=\"button调到中间\">button调到中间</h3><p>在button class里加上<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;<span class=\"comment\">/*单行文字居中的trick*/</span></span><br><span class=\"line\"><span class=\"attribute\">text-align</span>: center;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/button-2.png\" alt=\"button-center\"></p>\n<h3 id=\"利用伪类::after_::before加入hover特效\">利用伪类::after ::before加入hover特效</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">content</span>: <span class=\"string\">''</span>;<span class=\"comment\">/*注意 即使没有内容 也要加上content 否则任何效果都显示不出来*/</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">1%</span>;<span class=\"comment\">/*为了让效果明显 先设置成1%,实际是从0%开始*/</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"comment\">/*鼠标悬浮后宽度应变为100%*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/after.gif\" alt=\"button：after\"><br>如果加上过渡效果:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t\t<span class=\"attribute\">top</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">1%</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">\t\t<span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span>;<span class=\"comment\">/*为了让效果明显 先设置成1s*/</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-pseudo\">:hover</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>加了特效 ,效果duang duang duang:<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/transition.gif\" alt=\"button：after\"></p>\n<h3 id=\"为什么在整个body里？\">为什么在整个body里？</h3><p>为什么不是在button内部？</p>\n<p>因为absolute布局相对的父元素是上一级的relative 或者 absolute布局，button class里我们没有为他布局，相当默认的static，所以他直接相对于body，top:0;left:0;都是相对body的。因为body默认本身就是一个relative<br>的布局。当我们为.button加上一个position:relative时：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">position</span>: relative;<span class=\"comment\">/*here！*/</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">border</span>: solid;</span><br><span class=\"line\">\t\t<span class=\"attribute\">border-color</span>: black;</span><br><span class=\"line\">\t\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果就出来了:</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/button-content.gif\" alt=\"button：after\"></p>\n<h3 id=\"文字被遮住了\">文字被遮住了</h3><p>怎么解决文字被遮住的问题？<br>想到了用z-index，设置元素的堆叠顺序。默认是0，如果能让button比0高，不就可以一直在上面了。<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#button&#123;</span></span><br><span class=\"line\">\t\tz-index: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"button\"</span>&gt;&lt;span <span class=\"built_in\">id</span>=<span class=\"string\">\"button\"</span>&gt;button&lt;/span&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然而效果没有改变：</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/button-content.gif\" alt=\"button：after\"></p>\n<p>当:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#button&#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">position</span>:relative;<span class=\"comment\">/*here!*/</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"button\"</span>&gt;&lt;<span class=\"selector-tag\">span</span> id=<span class=\"string\">\"button\"</span>&gt;button&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>效果就实现了。为什么加了一个position就实现了？请阅读：<a href=\"http://www.neoease.com/css-z-index-property-and-layering-tree/\">CSS z-index 属性的使用方法和层级树的概念</a><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/label.gif\" alt=\"button：after\"></p>\n<h2 id=\"结语\">结语</h2><p>具体的色调 字体 大小 背景色就留给大家设计吧。</p>"},{"title":"CSS 权重","date":"2016-03-24T11:53:48.000Z","_content":"\n对css权重的概念理解的并不深入，很多是流于表面。先从css权重讲起吧。\n\n本文参考了：\n[你应该知道的一些事情——CSS权重](http://www.w3cplus.com/css/css-specificity-things-you-should-know.html)\n\n<!--more-->\n例如\n```\nhtml:\n<div class=\"a\" id=\"b\"></div>\ncss:\ndiv.a#b {}\ndiv#b.a {}\n.a#b {}\n#b.a {}\ndiv#b {}\n#b {}\ndiv.a {}\n.a {}\ndiv {}\n```\n哪个权重比较大？一般都知道!important>内嵌样式表>#id>.class>tag,那么组合起来又该如何比较。\n\n回来后经过一番实践。\n权重就是刚才顺序的从上到下，由大到小。\n给我的感性认识是：\n\n* 含有id选择器的权重总比没含的要大，即，如果一条规则包含了更高权重的选择器，那么这个规则权重更高。\n* 不过有谁会去使用这种多层的选择器呢？很明显id本来就是独一无二的。\n\n理性的认识：\n\n* 原来权重的计算还有一套公式的。\n* 选择器规则的优化\n\n下面摘录一些我认为比较重要的知识点：\n\n### 权重的等级分类\n\n分为四类：\n\n##### 行内样式，指的是html文档中定义的style\n\n权重：1000\n\n##### ID选择器\n\n权重：100\n\n##### 类，属性选择器和伪类选择器\n\n权重：010\n\n[属性选择器](http://www.w3cplus.com/css3/attribute-selectors)就是div[style=\"xxxxx\"]\n\n\n[伪类选择器有哪些？](http://www.w3cplus.com/css3/pseudo-class-selector)\n\n##### 元素和伪元素\n\n权重：001\n\n\n[伪元素有哪些？](http://www.w3cplus.com/css3/pseudo-class-selector)\n\n\n总的权重值计算方法就是：\n\n从0开始，一个行内样式+1000，一个id+100，一个属性选择器、class或者伪类+10，一个元素名或者伪元素+1.\n\n另一种方法：计算有几个id选择器的数量为a ,计算其他属性跟class选择器的数量为b ，计算元素名跟伪元素名的数量为c ，然后结合起来就是权重：a,b,c。\n\n所以刚才题目的权重是可以算出来的：\n\n```\n\t/*1:111*/ \n    div.a#b {}\n\n    /*2:111*/\n    div#b.a {}\n\n    /*3:110*/\n    .a#b {}\n\n    /*4:110*/\n    /*exmaple:#btn_specific.active*/\n    #b.a {}\n\n    /*5:101*/\n    div#b {}\n\n    /*6 :100*/\n    #b {}\n\n    /*7:011*/\n    /*这种写法感觉就是为了语义明确把，比如a.text-primary:hover(bootstrap)*/\n    div.a {}\n\n    /*8:010*/\n    .a {}\n\n    /*9:001*/\n    div {}\n```\n\nby the way ,多个class的权重都是一致的。谁离的最近谁优先级最高。\n比如\n```\n<div class=\"c d\"></div>\ncss:\n.c.d{}\n.d.c{}\n```\n谁放在后面就会显示谁,因为权重一样。\n\n如果足够多的低权重选择器累加到＝高权重选择器，权重就会反超。具体请戳\n\n[有趣：256个class选择器可以干掉1个id选择器](http://www.zhangxinxu.com/wordpress/2012/08/256-class-selector-beat-id-selector/)\n\n具体浏览器的对css权重的判断策略，大家可以去看看源代码。\n\n这里是[火狐](http://hg.mozilla.org/mozilla-central/file/tip/layout/style/StyleRule.cpp#l479)的。\n\n这里是[webkit](http://trac.webkit.org/browser/trunk/Source/WebCore/css/CSSSelector.cpp?rev=81845#L63)的\n\n大致就是，tag的＋1，id＋0x010000,class+0x000100\n\n[W3C标准计算css权重](https://www.w3.org/TR/css3-selectors/#specificity) \n\n[可视化计算css权重](https://specificity.keegan.st/)\n\n\n### CSS选择器的优化\n\n[编写高效的 CSS](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Writing_efficient_CSS)\n\n总的来说就是越具体的放在后面，少用子代选择器，少用后代选择器。id后不要再加类名或者tag，（例外：有一些会用js变动的class名）\n\n多用继承。\n\n[Writing efficient CSS selectors](http://csswizardry.com/2011/09/writing-efficient-css-selectors/)\n[CSS选择器的优化](http://www.w3cplus.com/css/css-selector-performance)","source":"_posts/css-specifity.md","raw":"title: CSS 权重\ndate: 2016-03-24 19:53:48\ntags: css\n---\n\n对css权重的概念理解的并不深入，很多是流于表面。先从css权重讲起吧。\n\n本文参考了：\n[你应该知道的一些事情——CSS权重](http://www.w3cplus.com/css/css-specificity-things-you-should-know.html)\n\n<!--more-->\n例如\n```\nhtml:\n<div class=\"a\" id=\"b\"></div>\ncss:\ndiv.a#b {}\ndiv#b.a {}\n.a#b {}\n#b.a {}\ndiv#b {}\n#b {}\ndiv.a {}\n.a {}\ndiv {}\n```\n哪个权重比较大？一般都知道!important>内嵌样式表>#id>.class>tag,那么组合起来又该如何比较。\n\n回来后经过一番实践。\n权重就是刚才顺序的从上到下，由大到小。\n给我的感性认识是：\n\n* 含有id选择器的权重总比没含的要大，即，如果一条规则包含了更高权重的选择器，那么这个规则权重更高。\n* 不过有谁会去使用这种多层的选择器呢？很明显id本来就是独一无二的。\n\n理性的认识：\n\n* 原来权重的计算还有一套公式的。\n* 选择器规则的优化\n\n下面摘录一些我认为比较重要的知识点：\n\n### 权重的等级分类\n\n分为四类：\n\n##### 行内样式，指的是html文档中定义的style\n\n权重：1000\n\n##### ID选择器\n\n权重：100\n\n##### 类，属性选择器和伪类选择器\n\n权重：010\n\n[属性选择器](http://www.w3cplus.com/css3/attribute-selectors)就是div[style=\"xxxxx\"]\n\n\n[伪类选择器有哪些？](http://www.w3cplus.com/css3/pseudo-class-selector)\n\n##### 元素和伪元素\n\n权重：001\n\n\n[伪元素有哪些？](http://www.w3cplus.com/css3/pseudo-class-selector)\n\n\n总的权重值计算方法就是：\n\n从0开始，一个行内样式+1000，一个id+100，一个属性选择器、class或者伪类+10，一个元素名或者伪元素+1.\n\n另一种方法：计算有几个id选择器的数量为a ,计算其他属性跟class选择器的数量为b ，计算元素名跟伪元素名的数量为c ，然后结合起来就是权重：a,b,c。\n\n所以刚才题目的权重是可以算出来的：\n\n```\n\t/*1:111*/ \n    div.a#b {}\n\n    /*2:111*/\n    div#b.a {}\n\n    /*3:110*/\n    .a#b {}\n\n    /*4:110*/\n    /*exmaple:#btn_specific.active*/\n    #b.a {}\n\n    /*5:101*/\n    div#b {}\n\n    /*6 :100*/\n    #b {}\n\n    /*7:011*/\n    /*这种写法感觉就是为了语义明确把，比如a.text-primary:hover(bootstrap)*/\n    div.a {}\n\n    /*8:010*/\n    .a {}\n\n    /*9:001*/\n    div {}\n```\n\nby the way ,多个class的权重都是一致的。谁离的最近谁优先级最高。\n比如\n```\n<div class=\"c d\"></div>\ncss:\n.c.d{}\n.d.c{}\n```\n谁放在后面就会显示谁,因为权重一样。\n\n如果足够多的低权重选择器累加到＝高权重选择器，权重就会反超。具体请戳\n\n[有趣：256个class选择器可以干掉1个id选择器](http://www.zhangxinxu.com/wordpress/2012/08/256-class-selector-beat-id-selector/)\n\n具体浏览器的对css权重的判断策略，大家可以去看看源代码。\n\n这里是[火狐](http://hg.mozilla.org/mozilla-central/file/tip/layout/style/StyleRule.cpp#l479)的。\n\n这里是[webkit](http://trac.webkit.org/browser/trunk/Source/WebCore/css/CSSSelector.cpp?rev=81845#L63)的\n\n大致就是，tag的＋1，id＋0x010000,class+0x000100\n\n[W3C标准计算css权重](https://www.w3.org/TR/css3-selectors/#specificity) \n\n[可视化计算css权重](https://specificity.keegan.st/)\n\n\n### CSS选择器的优化\n\n[编写高效的 CSS](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Writing_efficient_CSS)\n\n总的来说就是越具体的放在后面，少用子代选择器，少用后代选择器。id后不要再加类名或者tag，（例外：有一些会用js变动的class名）\n\n多用继承。\n\n[Writing efficient CSS selectors](http://csswizardry.com/2011/09/writing-efficient-css-selectors/)\n[CSS选择器的优化](http://www.w3cplus.com/css/css-selector-performance)","slug":"css-specifity","published":1,"updated":"2016-03-24T11:56:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5p0009llsgb7pgi50h","content":"<p>对css权重的概念理解的并不深入，很多是流于表面。先从css权重讲起吧。</p>\n<p>本文参考了：<br><a href=\"http://www.w3cplus.com/css/css-specificity-things-you-should-know.html\" target=\"_blank\" rel=\"external\">你应该知道的一些事情——CSS权重</a></p>\n<a id=\"more\"></a>\n<p>例如<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>:</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"a\"</span> id=<span class=\"string\">\"b\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">css:</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>.a<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\">div<span class=\"selector-id\">#b</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\">.a<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#b</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\">div<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>哪个权重比较大？一般都知道!important&gt;内嵌样式表&gt;#id&gt;.class&gt;tag,那么组合起来又该如何比较。</p>\n<p>回来后经过一番实践。<br>权重就是刚才顺序的从上到下，由大到小。<br>给我的感性认识是：</p>\n<ul>\n<li>含有id选择器的权重总比没含的要大，即，如果一条规则包含了更高权重的选择器，那么这个规则权重更高。</li>\n<li>不过有谁会去使用这种多层的选择器呢？很明显id本来就是独一无二的。</li>\n</ul>\n<p>理性的认识：</p>\n<ul>\n<li>原来权重的计算还有一套公式的。</li>\n<li>选择器规则的优化</li>\n</ul>\n<p>下面摘录一些我认为比较重要的知识点：</p>\n<h3 id=\"权重的等级分类\">权重的等级分类</h3><p>分为四类：</p>\n<h5 id=\"行内样式，指的是html文档中定义的style\">行内样式，指的是html文档中定义的style</h5><p>权重：1000</p>\n<h5 id=\"ID选择器\">ID选择器</h5><p>权重：100</p>\n<h5 id=\"类，属性选择器和伪类选择器\">类，属性选择器和伪类选择器</h5><p>权重：010</p>\n<p><a href=\"http://www.w3cplus.com/css3/attribute-selectors\" target=\"_blank\" rel=\"external\">属性选择器</a>就是div[style=”xxxxx”]</p>\n<p><a href=\"http://www.w3cplus.com/css3/pseudo-class-selector\" target=\"_blank\" rel=\"external\">伪类选择器有哪些？</a></p>\n<h5 id=\"元素和伪元素\">元素和伪元素</h5><p>权重：001</p>\n<p><a href=\"http://www.w3cplus.com/css3/pseudo-class-selector\" target=\"_blank\" rel=\"external\">伪元素有哪些？</a></p>\n<p>总的权重值计算方法就是：</p>\n<p>从0开始，一个行内样式+1000，一个id+100，一个属性选择器、class或者伪类+10，一个元素名或者伪元素+1.</p>\n<p>另一种方法：计算有几个id选择器的数量为a ,计算其他属性跟class选择器的数量为b ，计算元素名跟伪元素名的数量为c ，然后结合起来就是权重：a,b,c。</p>\n<p>所以刚才题目的权重是可以算出来的：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*1:111*/</span> </span><br><span class=\"line\">   <span class=\"selector-tag\">div</span>.a<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*2:111*/</span></span><br><span class=\"line\">   div<span class=\"selector-id\">#b</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*3:110*/</span></span><br><span class=\"line\">   .a<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*4:110*/</span></span><br><span class=\"line\">   <span class=\"comment\">/*exmaple:#btn_specific.active*/</span></span><br><span class=\"line\">   <span class=\"selector-id\">#b</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*5:101*/</span></span><br><span class=\"line\">   div<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*6 :100*/</span></span><br><span class=\"line\">   <span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*7:011*/</span></span><br><span class=\"line\">   <span class=\"comment\">/*这种写法感觉就是为了语义明确把，比如a.text-primary:hover(bootstrap)*/</span></span><br><span class=\"line\">   <span class=\"selector-tag\">div</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*8:010*/</span></span><br><span class=\"line\">   <span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*9:001*/</span></span><br><span class=\"line\">   <span class=\"selector-tag\">div</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>by the way ,多个class的权重都是一致的。谁离的最近谁优先级最高。<br>比如<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"c d\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">css:</span><br><span class=\"line\"><span class=\"selector-class\">.c</span><span class=\"selector-class\">.d</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d</span><span class=\"selector-class\">.c</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>谁放在后面就会显示谁,因为权重一样。</p>\n<p>如果足够多的低权重选择器累加到＝高权重选择器，权重就会反超。具体请戳</p>\n<p><a href=\"http://www.zhangxinxu.com/wordpress/2012/08/256-class-selector-beat-id-selector/\" target=\"_blank\" rel=\"external\">有趣：256个class选择器可以干掉1个id选择器</a></p>\n<p>具体浏览器的对css权重的判断策略，大家可以去看看源代码。</p>\n<p>这里是<a href=\"http://hg.mozilla.org/mozilla-central/file/tip/layout/style/StyleRule.cpp#l479\" target=\"_blank\" rel=\"external\">火狐</a>的。</p>\n<p>这里是<a href=\"http://trac.webkit.org/browser/trunk/Source/WebCore/css/CSSSelector.cpp?rev=81845#L63\" target=\"_blank\" rel=\"external\">webkit</a>的</p>\n<p>大致就是，tag的＋1，id＋0x010000,class+0x000100</p>\n<p><a href=\"https://www.w3.org/TR/css3-selectors/#specificity\" target=\"_blank\" rel=\"external\">W3C标准计算css权重</a> </p>\n<p><a href=\"https://specificity.keegan.st/\" target=\"_blank\" rel=\"external\">可视化计算css权重</a></p>\n<h3 id=\"CSS选择器的优化\">CSS选择器的优化</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Writing_efficient_CSS\" target=\"_blank\" rel=\"external\">编写高效的 CSS</a></p>\n<p>总的来说就是越具体的放在后面，少用子代选择器，少用后代选择器。id后不要再加类名或者tag，（例外：有一些会用js变动的class名）</p>\n<p>多用继承。</p>\n<p><a href=\"http://csswizardry.com/2011/09/writing-efficient-css-selectors/\" target=\"_blank\" rel=\"external\">Writing efficient CSS selectors</a><br><a href=\"http://www.w3cplus.com/css/css-selector-performance\" target=\"_blank\" rel=\"external\">CSS选择器的优化</a></p>\n","excerpt":"<p>对css权重的概念理解的并不深入，很多是流于表面。先从css权重讲起吧。</p>\n<p>本文参考了：<br><a href=\"http://www.w3cplus.com/css/css-specificity-things-you-should-know.html\">你应该知道的一些事情——CSS权重</a></p>","more":"<p>例如<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>:</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"a\"</span> id=<span class=\"string\">\"b\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">css:</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>.a<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\">div<span class=\"selector-id\">#b</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\">.a<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#b</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\">div<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>哪个权重比较大？一般都知道!important&gt;内嵌样式表&gt;#id&gt;.class&gt;tag,那么组合起来又该如何比较。</p>\n<p>回来后经过一番实践。<br>权重就是刚才顺序的从上到下，由大到小。<br>给我的感性认识是：</p>\n<ul>\n<li>含有id选择器的权重总比没含的要大，即，如果一条规则包含了更高权重的选择器，那么这个规则权重更高。</li>\n<li>不过有谁会去使用这种多层的选择器呢？很明显id本来就是独一无二的。</li>\n</ul>\n<p>理性的认识：</p>\n<ul>\n<li>原来权重的计算还有一套公式的。</li>\n<li>选择器规则的优化</li>\n</ul>\n<p>下面摘录一些我认为比较重要的知识点：</p>\n<h3 id=\"权重的等级分类\">权重的等级分类</h3><p>分为四类：</p>\n<h5 id=\"行内样式，指的是html文档中定义的style\">行内样式，指的是html文档中定义的style</h5><p>权重：1000</p>\n<h5 id=\"ID选择器\">ID选择器</h5><p>权重：100</p>\n<h5 id=\"类，属性选择器和伪类选择器\">类，属性选择器和伪类选择器</h5><p>权重：010</p>\n<p><a href=\"http://www.w3cplus.com/css3/attribute-selectors\">属性选择器</a>就是div[style=”xxxxx”]</p>\n<p><a href=\"http://www.w3cplus.com/css3/pseudo-class-selector\">伪类选择器有哪些？</a></p>\n<h5 id=\"元素和伪元素\">元素和伪元素</h5><p>权重：001</p>\n<p><a href=\"http://www.w3cplus.com/css3/pseudo-class-selector\">伪元素有哪些？</a></p>\n<p>总的权重值计算方法就是：</p>\n<p>从0开始，一个行内样式+1000，一个id+100，一个属性选择器、class或者伪类+10，一个元素名或者伪元素+1.</p>\n<p>另一种方法：计算有几个id选择器的数量为a ,计算其他属性跟class选择器的数量为b ，计算元素名跟伪元素名的数量为c ，然后结合起来就是权重：a,b,c。</p>\n<p>所以刚才题目的权重是可以算出来的：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*1:111*/</span> </span><br><span class=\"line\">   <span class=\"selector-tag\">div</span>.a<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*2:111*/</span></span><br><span class=\"line\">   div<span class=\"selector-id\">#b</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*3:110*/</span></span><br><span class=\"line\">   .a<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*4:110*/</span></span><br><span class=\"line\">   <span class=\"comment\">/*exmaple:#btn_specific.active*/</span></span><br><span class=\"line\">   <span class=\"selector-id\">#b</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*5:101*/</span></span><br><span class=\"line\">   div<span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*6 :100*/</span></span><br><span class=\"line\">   <span class=\"selector-id\">#b</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*7:011*/</span></span><br><span class=\"line\">   <span class=\"comment\">/*这种写法感觉就是为了语义明确把，比如a.text-primary:hover(bootstrap)*/</span></span><br><span class=\"line\">   <span class=\"selector-tag\">div</span><span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*8:010*/</span></span><br><span class=\"line\">   <span class=\"selector-class\">.a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*9:001*/</span></span><br><span class=\"line\">   <span class=\"selector-tag\">div</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>by the way ,多个class的权重都是一致的。谁离的最近谁优先级最高。<br>比如<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"c d\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">css:</span><br><span class=\"line\"><span class=\"selector-class\">.c</span><span class=\"selector-class\">.d</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d</span><span class=\"selector-class\">.c</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>谁放在后面就会显示谁,因为权重一样。</p>\n<p>如果足够多的低权重选择器累加到＝高权重选择器，权重就会反超。具体请戳</p>\n<p><a href=\"http://www.zhangxinxu.com/wordpress/2012/08/256-class-selector-beat-id-selector/\">有趣：256个class选择器可以干掉1个id选择器</a></p>\n<p>具体浏览器的对css权重的判断策略，大家可以去看看源代码。</p>\n<p>这里是<a href=\"http://hg.mozilla.org/mozilla-central/file/tip/layout/style/StyleRule.cpp#l479\">火狐</a>的。</p>\n<p>这里是<a href=\"http://trac.webkit.org/browser/trunk/Source/WebCore/css/CSSSelector.cpp?rev=81845#L63\">webkit</a>的</p>\n<p>大致就是，tag的＋1，id＋0x010000,class+0x000100</p>\n<p><a href=\"https://www.w3.org/TR/css3-selectors/#specificity\">W3C标准计算css权重</a> </p>\n<p><a href=\"https://specificity.keegan.st/\">可视化计算css权重</a></p>\n<h3 id=\"CSS选择器的优化\">CSS选择器的优化</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Writing_efficient_CSS\">编写高效的 CSS</a></p>\n<p>总的来说就是越具体的放在后面，少用子代选择器，少用后代选择器。id后不要再加类名或者tag，（例外：有一些会用js变动的class名）</p>\n<p>多用继承。</p>\n<p><a href=\"http://csswizardry.com/2011/09/writing-efficient-css-selectors/\">Writing efficient CSS selectors</a><br><a href=\"http://www.w3cplus.com/css/css-selector-performance\">CSS选择器的优化</a></p>"},{"title":"删除远程仓库的文件","date":"2015-11-16T02:10:37.000Z","_content":"经常遇到本地文件已经删了,然后执行git add .\n\n再git commit ,git push 。远程仓库上那些删掉的文件还是在。\n\n因为git add不能识别删除的文件。git rm才可以。\n\n<!-- more-->\n\n正确的做法是：\n```\ngit rm folder_name\ngit commit -m \"xxx\"\ngit push \n```\n# rm 和 git rm 的区别\n\nrm是在本地删除它，git rm 是在暂存区删除它\n\n如果只执行了rm，本地是删除掉了，用git status 查看会发现它提示你\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/git.png)\n用git rm 来更新等一下上传的东西。也就是说如果只执行了rm，并没有执行git rm然后就直接commit ，工作区还是会有你删掉的那个文件。\n\n如果直接一上来就用git rm删除了文件，本地文件会被删除，暂存区也会删除，所以就可以直接提交了。\n\n# git rm 和 git rm --cached\n\n这个 --cached选项允许你把文件保留在你的硬盘上.常见情况是有一些配置文件或者ide生成的工程文件你不想传到远程仓库，但又很重要不能在本地删除掉。\n使用git rm --cached file_name 就可以使这个文件不被git版本控制所追踪。\n\n或者像上一个例子中使用了rm 就直接提交了，本地已经没有了这个文件，但是远程仓库上还存在，只要使用it rm --cached file_name(或者git rm file_name都可以,这时候两者结果一样)就可以把在暂存区中的file删掉，commit 后再push,远程仓库上应该就删掉了。\n\n# 总结：\n\n* ```rm```只能删除本地文件\n* ```git rm```不仅删了本地文件，也删了暂存区文件\n* ```git rm --cached``` 只删除了暂存区文件\n\n# 实验过程\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/rma.png)\n![](http://7xk7fp.com1.z0.glb.clouddn.com/gitrma.png)\n![](http://7xk7fp.com1.z0.glb.clouddn.com/rmb.png)\n![](http://7xk7fp.com1.z0.glb.clouddn.com/gitrmcacheb.png)","source":"_posts/delete-remote-repository-folder.md","raw":"title: 删除远程仓库的文件\ndate: 2015-11-16 10:10:37\ntags: git\n---\n经常遇到本地文件已经删了,然后执行git add .\n\n再git commit ,git push 。远程仓库上那些删掉的文件还是在。\n\n因为git add不能识别删除的文件。git rm才可以。\n\n<!-- more-->\n\n正确的做法是：\n```\ngit rm folder_name\ngit commit -m \"xxx\"\ngit push \n```\n# rm 和 git rm 的区别\n\nrm是在本地删除它，git rm 是在暂存区删除它\n\n如果只执行了rm，本地是删除掉了，用git status 查看会发现它提示你\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/git.png)\n用git rm 来更新等一下上传的东西。也就是说如果只执行了rm，并没有执行git rm然后就直接commit ，工作区还是会有你删掉的那个文件。\n\n如果直接一上来就用git rm删除了文件，本地文件会被删除，暂存区也会删除，所以就可以直接提交了。\n\n# git rm 和 git rm --cached\n\n这个 --cached选项允许你把文件保留在你的硬盘上.常见情况是有一些配置文件或者ide生成的工程文件你不想传到远程仓库，但又很重要不能在本地删除掉。\n使用git rm --cached file_name 就可以使这个文件不被git版本控制所追踪。\n\n或者像上一个例子中使用了rm 就直接提交了，本地已经没有了这个文件，但是远程仓库上还存在，只要使用it rm --cached file_name(或者git rm file_name都可以,这时候两者结果一样)就可以把在暂存区中的file删掉，commit 后再push,远程仓库上应该就删掉了。\n\n# 总结：\n\n* ```rm```只能删除本地文件\n* ```git rm```不仅删了本地文件，也删了暂存区文件\n* ```git rm --cached``` 只删除了暂存区文件\n\n# 实验过程\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/rma.png)\n![](http://7xk7fp.com1.z0.glb.clouddn.com/gitrma.png)\n![](http://7xk7fp.com1.z0.glb.clouddn.com/rmb.png)\n![](http://7xk7fp.com1.z0.glb.clouddn.com/gitrmcacheb.png)","slug":"delete-remote-repository-folder","published":1,"updated":"2015-11-16T07:15:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5q000bllsg8j1d7nrm","content":"<p>经常遇到本地文件已经删了,然后执行git add .</p>\n<p>再git commit ,git push 。远程仓库上那些删掉的文件还是在。</p>\n<p>因为git add不能识别删除的文件。git rm才可以。</p>\n<a id=\"more\"></a>\n<p>正确的做法是：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">rm</span> folder_name</span><br><span class=\"line\">git commit -<span class=\"keyword\">m</span> <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"rm_和_git_rm_的区别\">rm 和 git rm 的区别</h1><p>rm是在本地删除它，git rm 是在暂存区删除它</p>\n<p>如果只执行了rm，本地是删除掉了，用git status 查看会发现它提示你</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/git.png\" alt=\"\"><br>用git rm 来更新等一下上传的东西。也就是说如果只执行了rm，并没有执行git rm然后就直接commit ，工作区还是会有你删掉的那个文件。</p>\n<p>如果直接一上来就用git rm删除了文件，本地文件会被删除，暂存区也会删除，所以就可以直接提交了。</p>\n<h1 id=\"git_rm_和_git_rm_—cached\">git rm 和 git rm —cached</h1><p>这个 —cached选项允许你把文件保留在你的硬盘上.常见情况是有一些配置文件或者ide生成的工程文件你不想传到远程仓库，但又很重要不能在本地删除掉。<br>使用git rm —cached file_name 就可以使这个文件不被git版本控制所追踪。</p>\n<p>或者像上一个例子中使用了rm 就直接提交了，本地已经没有了这个文件，但是远程仓库上还存在，只要使用it rm —cached file_name(或者git rm file_name都可以,这时候两者结果一样)就可以把在暂存区中的file删掉，commit 后再push,远程仓库上应该就删掉了。</p>\n<h1 id=\"总结：\">总结：</h1><ul>\n<li><code>rm</code>只能删除本地文件</li>\n<li><code>git rm</code>不仅删了本地文件，也删了暂存区文件</li>\n<li><code>git rm --cached</code> 只删除了暂存区文件</li>\n</ul>\n<h1 id=\"实验过程\">实验过程</h1><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/rma.png\" alt=\"\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/gitrma.png\" alt=\"\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/rmb.png\" alt=\"\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/gitrmcacheb.png\" alt=\"\"></p>\n","excerpt":"<p>经常遇到本地文件已经删了,然后执行git add .</p>\n<p>再git commit ,git push 。远程仓库上那些删掉的文件还是在。</p>\n<p>因为git add不能识别删除的文件。git rm才可以。</p>","more":"<p>正确的做法是：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">rm</span> folder_name</span><br><span class=\"line\">git commit -<span class=\"keyword\">m</span> <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"rm_和_git_rm_的区别\">rm 和 git rm 的区别</h1><p>rm是在本地删除它，git rm 是在暂存区删除它</p>\n<p>如果只执行了rm，本地是删除掉了，用git status 查看会发现它提示你</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/git.png\" alt=\"\"><br>用git rm 来更新等一下上传的东西。也就是说如果只执行了rm，并没有执行git rm然后就直接commit ，工作区还是会有你删掉的那个文件。</p>\n<p>如果直接一上来就用git rm删除了文件，本地文件会被删除，暂存区也会删除，所以就可以直接提交了。</p>\n<h1 id=\"git_rm_和_git_rm_—cached\">git rm 和 git rm —cached</h1><p>这个 —cached选项允许你把文件保留在你的硬盘上.常见情况是有一些配置文件或者ide生成的工程文件你不想传到远程仓库，但又很重要不能在本地删除掉。<br>使用git rm —cached file_name 就可以使这个文件不被git版本控制所追踪。</p>\n<p>或者像上一个例子中使用了rm 就直接提交了，本地已经没有了这个文件，但是远程仓库上还存在，只要使用it rm —cached file_name(或者git rm file_name都可以,这时候两者结果一样)就可以把在暂存区中的file删掉，commit 后再push,远程仓库上应该就删掉了。</p>\n<h1 id=\"总结：\">总结：</h1><ul>\n<li><code>rm</code>只能删除本地文件</li>\n<li><code>git rm</code>不仅删了本地文件，也删了暂存区文件</li>\n<li><code>git rm --cached</code> 只删除了暂存区文件</li>\n</ul>\n<h1 id=\"实验过程\">实验过程</h1><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/rma.png\" alt=\"\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/gitrma.png\" alt=\"\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/rmb.png\" alt=\"\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/gitrmcacheb.png\" alt=\"\"></p>"},{"title":"Icon Slide from the Center to Side","date":"2015-10-05T15:28:05.000Z","_content":"\n今天把transition翻来覆去的玩了玩，附加一点点JS，做了这样一个效果\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/bandicam%202015-10-05%2023-15-48-525.gif)\n\n仿照[这个网站](http://codingdivas.net/)","source":"_posts/gif.md","raw":"title: Icon Slide from the Center to Side\ndate: 2015-10-05 23:28:05\ntags:\n---\n\n今天把transition翻来覆去的玩了玩，附加一点点JS，做了这样一个效果\n\n![](http://7xk7fp.com1.z0.glb.clouddn.com/bandicam%202015-10-05%2023-15-48-525.gif)\n\n仿照[这个网站](http://codingdivas.net/)","slug":"gif","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5s000cllsgs5jbwrtc","content":"<p>今天把transition翻来覆去的玩了玩，附加一点点JS，做了这样一个效果</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/bandicam%202015-10-05%2023-15-48-525.gif\" alt=\"\"></p>\n<p>仿照<a href=\"http://codingdivas.net/\" target=\"_blank\" rel=\"external\">这个网站</a></p>\n","excerpt":"","more":"<p>今天把transition翻来覆去的玩了玩，附加一点点JS，做了这样一个效果</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/bandicam%202015-10-05%2023-15-48-525.gif\" alt=\"\"></p>\n<p>仿照<a href=\"http://codingdivas.net/\">这个网站</a></p>\n"},{"title":"Hello World","date":"2015-07-02T13:19:55.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\ndate: 2015-7-02 21:19:55\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5u000fllsgtwt156wn","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick_Start\">Quick Start</h2><h3 id=\"Create_a_new_post\">Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run_server\">Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate_static_files\">Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy_to_remote_sites\">Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick_Start\">Quick Start</h2><h3 id=\"Create_a_new_post\">Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run_server\">Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate_static_files\">Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy_to_remote_sites\">Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"gitError","date":"2016-05-07T14:10:38.000Z","_content":"今天遇到一个问题，在电脑a上修改了一些文件，并且没有add。突然断电了。我就打开电脑b，git fetch\ngit merge。修改好了。上传上去。电脑a开起来后。我直接git fetch／git merge。提示错误：\n```\nUpdating 1463929..0e12104\nerror: Your local changes to the following files would be overwritten by merge:\n\tchangeBgColor/popup.html\n\tchangeBgColor/popup.js\nPlease, commit your changes or stash them before you can merge.\nAborting\n```\n所以如果你在本地修改了乱七八糟一堆没用的，就可以用\n```\ngit reset --hard\ngit fetch\ngit merge\n```\n就可以了。```git reset --hard```的作用是把所有文件恢复到上一次commit时的状态。\n\n如果还没```git add```，想单独恢复一个文件：```git checkout filename```就可以了。","source":"_posts/gitError.md","raw":"title: gitError\ndate: 2016-05-07 22:10:38\ntags: git\n---\n今天遇到一个问题，在电脑a上修改了一些文件，并且没有add。突然断电了。我就打开电脑b，git fetch\ngit merge。修改好了。上传上去。电脑a开起来后。我直接git fetch／git merge。提示错误：\n```\nUpdating 1463929..0e12104\nerror: Your local changes to the following files would be overwritten by merge:\n\tchangeBgColor/popup.html\n\tchangeBgColor/popup.js\nPlease, commit your changes or stash them before you can merge.\nAborting\n```\n所以如果你在本地修改了乱七八糟一堆没用的，就可以用\n```\ngit reset --hard\ngit fetch\ngit merge\n```\n就可以了。```git reset --hard```的作用是把所有文件恢复到上一次commit时的状态。\n\n如果还没```git add```，想单独恢复一个文件：```git checkout filename```就可以了。","slug":"gitError","published":1,"updated":"2016-05-07T14:18:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5v000gllsgs8u54ny3","content":"<p>今天遇到一个问题，在电脑a上修改了一些文件，并且没有add。突然断电了。我就打开电脑b，git fetch<br>git merge。修改好了。上传上去。电脑a开起来后。我直接git fetch／git merge。提示错误：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updating <span class=\"number\">1463929.</span><span class=\"number\">.0e12104</span></span><br><span class=\"line\">error: Your <span class=\"built_in\">local</span> changes <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> following <span class=\"built_in\">files</span> would be overwritten <span class=\"keyword\">by</span> <span class=\"built_in\">merge</span>:</span><br><span class=\"line\">\tchangeBgColor/popup.html</span><br><span class=\"line\">\tchangeBgColor/popup.js</span><br><span class=\"line\">Please, commit your changes <span class=\"keyword\">or</span> stash them <span class=\"keyword\">before</span> you can <span class=\"built_in\">merge</span>.</span><br><span class=\"line\">Aborting</span><br></pre></td></tr></table></figure></p>\n<p>所以如果你在本地修改了乱七八糟一堆没用的，就可以用<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard</span></span><br><span class=\"line\">git <span class=\"keyword\">fetch</span></span><br><span class=\"line\">git <span class=\"keyword\">merge</span></span><br></pre></td></tr></table></figure></p>\n<p>就可以了。<code>git reset --hard</code>的作用是把所有文件恢复到上一次commit时的状态。</p>\n<p>如果还没<code>git add</code>，想单独恢复一个文件：<code>git checkout filename</code>就可以了。</p>\n","excerpt":"","more":"<p>今天遇到一个问题，在电脑a上修改了一些文件，并且没有add。突然断电了。我就打开电脑b，git fetch<br>git merge。修改好了。上传上去。电脑a开起来后。我直接git fetch／git merge。提示错误：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Updating <span class=\"number\">1463929.</span><span class=\"number\">.0e12104</span></span><br><span class=\"line\">error: Your <span class=\"built_in\">local</span> changes <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> following <span class=\"built_in\">files</span> would be overwritten <span class=\"keyword\">by</span> <span class=\"built_in\">merge</span>:</span><br><span class=\"line\">\tchangeBgColor/popup.html</span><br><span class=\"line\">\tchangeBgColor/popup.js</span><br><span class=\"line\">Please, commit your changes <span class=\"keyword\">or</span> stash them <span class=\"keyword\">before</span> you can <span class=\"built_in\">merge</span>.</span><br><span class=\"line\">Aborting</span><br></pre></td></tr></table></figure></p>\n<p>所以如果你在本地修改了乱七八糟一堆没用的，就可以用<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard</span></span><br><span class=\"line\">git <span class=\"keyword\">fetch</span></span><br><span class=\"line\">git <span class=\"keyword\">merge</span></span><br></pre></td></tr></table></figure></p>\n<p>就可以了。<code>git reset --hard</code>的作用是把所有文件恢复到上一次commit时的状态。</p>\n<p>如果还没<code>git add</code>，想单独恢复一个文件：<code>git checkout filename</code>就可以了。</p>\n"},{"title":"Hexo-DIY","date":"2015-10-03T13:19:55.000Z","_content":"\n### Change column-number\n\n**Compare**:\n\n![before](http://7xk7fp.com1.z0.glb.clouddn.com/archive-before.png)\n![after](http://7xk7fp.com1.z0.glb.clouddn.com/archive-after.png)\n\n**Reason**:Column 3 makes me feel that it's not clear about time line\n<!--more-->\n**File path**:themes\\landscape\\source\\css\\_partial\\archive.styl\n```\n.archives\n  column-gap: 10px\n  @media mq-tablet\n    column-count: 2\n  @media mq-normal\n    column-count: 1 //Before is 3 Now is 1\n\n```\n\n### Chang the archive\n**Compare**:\n![before](http://7xk7fp.com1.z0.glb.clouddn.com/head-before.png)\n![after](http://7xk7fp.com1.z0.glb.clouddn.com/head-after.png)\n**Reason**:The Archives and Home link is not apparent above some background image.I want to make it outstanding\n\n**File path**: themes\\landscape\\source\\css\\_partial\\header.styl\n\n```\n#header\nheight: banner-height\nposition: relative\nborder-bottom: 1px solid color-border\n&:before, &:after\ncontent: \"\"\nposition: absolute\nleft: 0\nright: 0\nheight: 50px\n&:before\ntop: 0\nbackground: linear-gradient(rgba(0, 0, 0, 0.5), transparent)//Before is 0.2 Now is 0.5\n&:after\nbottom: 0\nbackground: linear-gradient(transparent, rgba(0, 0, 0, 0.2))\n\n$nav-link\nfont-size:subtitle-size//Before is font-size now is subtitle-size\n//you can find more about font-size in css/_variables.style\nfloat: left\ncolor: #fff\nopacity: 0.9//Before is 0.6 Now is 0.9\ntext-decoration: none\ntext-shadow: 0 1px rgba(0, 0, 0, 0.2)\ntransition: opacity 0.2s\ndisplay: block\npadding: 20px 15px\n&:hover\nopacity: 1\n```\n### Change markdown blockquote style\n\n**Compare**:\n![before](http://7xk7fp.com1.z0.glb.clouddn.com/blockquote-before.png)\n![after](http://7xk7fp.com1.z0.glb.clouddn.com/blockquote-after.png)\n\n**Reason**:its ugly\n\n**File path**:themes\\landscape\\source\\css\\_partial\\article.styl\n```\nblockquote\n    padding: 0 15px//add padding\n    color: #777//add color\n    border-left: 4px solid #ddd//add border\n    font-family: font-serif\n    font-size: 1.0em\n    margin: line-height 20px\n    text-align: left\n\n```\n\n","source":"_posts/hexo-diy.md","raw":"title: Hexo-DIY\ndate: 2015-10-03 21:19:55\ntags: hexo\n---\n\n### Change column-number\n\n**Compare**:\n\n![before](http://7xk7fp.com1.z0.glb.clouddn.com/archive-before.png)\n![after](http://7xk7fp.com1.z0.glb.clouddn.com/archive-after.png)\n\n**Reason**:Column 3 makes me feel that it's not clear about time line\n<!--more-->\n**File path**:themes\\landscape\\source\\css\\_partial\\archive.styl\n```\n.archives\n  column-gap: 10px\n  @media mq-tablet\n    column-count: 2\n  @media mq-normal\n    column-count: 1 //Before is 3 Now is 1\n\n```\n\n### Chang the archive\n**Compare**:\n![before](http://7xk7fp.com1.z0.glb.clouddn.com/head-before.png)\n![after](http://7xk7fp.com1.z0.glb.clouddn.com/head-after.png)\n**Reason**:The Archives and Home link is not apparent above some background image.I want to make it outstanding\n\n**File path**: themes\\landscape\\source\\css\\_partial\\header.styl\n\n```\n#header\nheight: banner-height\nposition: relative\nborder-bottom: 1px solid color-border\n&:before, &:after\ncontent: \"\"\nposition: absolute\nleft: 0\nright: 0\nheight: 50px\n&:before\ntop: 0\nbackground: linear-gradient(rgba(0, 0, 0, 0.5), transparent)//Before is 0.2 Now is 0.5\n&:after\nbottom: 0\nbackground: linear-gradient(transparent, rgba(0, 0, 0, 0.2))\n\n$nav-link\nfont-size:subtitle-size//Before is font-size now is subtitle-size\n//you can find more about font-size in css/_variables.style\nfloat: left\ncolor: #fff\nopacity: 0.9//Before is 0.6 Now is 0.9\ntext-decoration: none\ntext-shadow: 0 1px rgba(0, 0, 0, 0.2)\ntransition: opacity 0.2s\ndisplay: block\npadding: 20px 15px\n&:hover\nopacity: 1\n```\n### Change markdown blockquote style\n\n**Compare**:\n![before](http://7xk7fp.com1.z0.glb.clouddn.com/blockquote-before.png)\n![after](http://7xk7fp.com1.z0.glb.clouddn.com/blockquote-after.png)\n\n**Reason**:its ugly\n\n**File path**:themes\\landscape\\source\\css\\_partial\\article.styl\n```\nblockquote\n    padding: 0 15px//add padding\n    color: #777//add color\n    border-left: 4px solid #ddd//add border\n    font-family: font-serif\n    font-size: 1.0em\n    margin: line-height 20px\n    text-align: left\n\n```\n\n","slug":"hexo-diy","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5y000jllsgzfdkgzwd","content":"<h3 id=\"Change_column-number\">Change column-number</h3><p><strong>Compare</strong>:</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/archive-before.png\" alt=\"before\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/archive-after.png\" alt=\"after\"></p>\n<p><strong>Reason</strong>:Column 3 makes me feel that it’s not clear about time line<br><a id=\"more\"></a><br><strong>File path</strong>:themes\\landscape\\source\\css_partial\\archive.styl<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.archives</span></span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">10px</span></span><br><span class=\"line\">  @media mq-tablet</span><br><span class=\"line\">    <span class=\"attribute\">column-count</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  @media mq-<span class=\"attribute\">normal</span></span><br><span class=\"line\">    <span class=\"attribute\">column-count</span>: <span class=\"number\">1</span> //Before is <span class=\"number\">3</span> Now is <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Chang_the_archive\">Chang the archive</h3><p><strong>Compare</strong>:<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/head-before.png\" alt=\"before\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/head-after.png\" alt=\"after\"><br><strong>Reason</strong>:The Archives and Home link is not apparent above some background image.I want to make it outstanding</p>\n<p><strong>File path</strong>: themes\\landscape\\source\\css_partial\\header.styl</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#header</span><br><span class=\"line\"><span class=\"built_in\">height</span>: banner-<span class=\"built_in\">height</span></span><br><span class=\"line\"><span class=\"built_in\">position</span>: relative</span><br><span class=\"line\"><span class=\"built_in\">border</span>-bottom: 1px solid <span class=\"built_in\">color</span>-<span class=\"built_in\">border</span></span><br><span class=\"line\">&amp;:before, &amp;:after</span><br><span class=\"line\"><span class=\"built_in\">content</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"built_in\">position</span>: absolute</span><br><span class=\"line\">left: <span class=\"number\">0</span></span><br><span class=\"line\">right: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">height</span>: 50px</span><br><span class=\"line\">&amp;:before</span><br><span class=\"line\">top: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">background</span>: <span class=\"built_in\">linear</span>-gradient(rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>), <span class=\"built_in\">transparent</span>)//Before <span class=\"built_in\">is</span> <span class=\"number\">0.2</span> Now <span class=\"built_in\">is</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">&amp;:after</span><br><span class=\"line\">bottom: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">background</span>: <span class=\"built_in\">linear</span>-gradient(<span class=\"built_in\">transparent</span>, rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">$nav-link</span><br><span class=\"line\"><span class=\"built_in\">font</span>-size:subtitle-size//Before <span class=\"built_in\">is</span> <span class=\"built_in\">font</span>-size now <span class=\"built_in\">is</span> subtitle-size</span><br><span class=\"line\">//you can find more about <span class=\"built_in\">font</span>-size <span class=\"keyword\">in</span> css/_variables.<span class=\"built_in\">style</span></span><br><span class=\"line\"><span class=\"built_in\">float</span>: left</span><br><span class=\"line\"><span class=\"built_in\">color</span>: #fff</span><br><span class=\"line\"><span class=\"built_in\">opacity</span>: <span class=\"number\">0.9</span>//Before <span class=\"built_in\">is</span> <span class=\"number\">0.6</span> Now <span class=\"built_in\">is</span> <span class=\"number\">0.9</span></span><br><span class=\"line\">text-decoration: none</span><br><span class=\"line\">text-shadow: <span class=\"number\">0</span> 1px rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.2</span>)</span><br><span class=\"line\">transition: <span class=\"built_in\">opacity</span> <span class=\"number\">0.</span>2s</span><br><span class=\"line\"><span class=\"built_in\">display</span>: <span class=\"built_in\">block</span></span><br><span class=\"line\">padding: 20px 15px</span><br><span class=\"line\">&amp;:hover</span><br><span class=\"line\"><span class=\"built_in\">opacity</span>: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Change_markdown_blockquote_style\">Change markdown blockquote style</h3><p><strong>Compare</strong>:<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/blockquote-before.png\" alt=\"before\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/blockquote-after.png\" alt=\"after\"></p>\n<p><strong>Reason</strong>:its ugly</p>\n<p><strong>File path</strong>:themes\\landscape\\source\\css_partial\\article.styl<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">blockquote</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">15px</span>//add padding</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#777</span>//add color</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">4px</span> solid <span class=\"number\">#ddd</span>//add border</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: font-serif</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.0em</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: line-height <span class=\"number\">20px</span></span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"Change_column-number\">Change column-number</h3><p><strong>Compare</strong>:</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/archive-before.png\" alt=\"before\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/archive-after.png\" alt=\"after\"></p>\n<p><strong>Reason</strong>:Column 3 makes me feel that it’s not clear about time line<br>","more":"<br><strong>File path</strong>:themes\\landscape\\source\\css_partial\\archive.styl<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.archives</span></span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"number\">10px</span></span><br><span class=\"line\">  @media mq-tablet</span><br><span class=\"line\">    <span class=\"attribute\">column-count</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  @media mq-<span class=\"attribute\">normal</span></span><br><span class=\"line\">    <span class=\"attribute\">column-count</span>: <span class=\"number\">1</span> //Before is <span class=\"number\">3</span> Now is <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Chang_the_archive\">Chang the archive</h3><p><strong>Compare</strong>:<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/head-before.png\" alt=\"before\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/head-after.png\" alt=\"after\"><br><strong>Reason</strong>:The Archives and Home link is not apparent above some background image.I want to make it outstanding</p>\n<p><strong>File path</strong>: themes\\landscape\\source\\css_partial\\header.styl</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#header</span><br><span class=\"line\"><span class=\"built_in\">height</span>: banner-<span class=\"built_in\">height</span></span><br><span class=\"line\"><span class=\"built_in\">position</span>: relative</span><br><span class=\"line\"><span class=\"built_in\">border</span>-bottom: 1px solid <span class=\"built_in\">color</span>-<span class=\"built_in\">border</span></span><br><span class=\"line\">&amp;:before, &amp;:after</span><br><span class=\"line\"><span class=\"built_in\">content</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"built_in\">position</span>: absolute</span><br><span class=\"line\">left: <span class=\"number\">0</span></span><br><span class=\"line\">right: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">height</span>: 50px</span><br><span class=\"line\">&amp;:before</span><br><span class=\"line\">top: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">background</span>: <span class=\"built_in\">linear</span>-gradient(rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>), <span class=\"built_in\">transparent</span>)//Before <span class=\"built_in\">is</span> <span class=\"number\">0.2</span> Now <span class=\"built_in\">is</span> <span class=\"number\">0.5</span></span><br><span class=\"line\">&amp;:after</span><br><span class=\"line\">bottom: <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">background</span>: <span class=\"built_in\">linear</span>-gradient(<span class=\"built_in\">transparent</span>, rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">$nav-link</span><br><span class=\"line\"><span class=\"built_in\">font</span>-size:subtitle-size//Before <span class=\"built_in\">is</span> <span class=\"built_in\">font</span>-size now <span class=\"built_in\">is</span> subtitle-size</span><br><span class=\"line\">//you can find more about <span class=\"built_in\">font</span>-size <span class=\"keyword\">in</span> css/_variables.<span class=\"built_in\">style</span></span><br><span class=\"line\"><span class=\"built_in\">float</span>: left</span><br><span class=\"line\"><span class=\"built_in\">color</span>: #fff</span><br><span class=\"line\"><span class=\"built_in\">opacity</span>: <span class=\"number\">0.9</span>//Before <span class=\"built_in\">is</span> <span class=\"number\">0.6</span> Now <span class=\"built_in\">is</span> <span class=\"number\">0.9</span></span><br><span class=\"line\">text-decoration: none</span><br><span class=\"line\">text-shadow: <span class=\"number\">0</span> 1px rgba(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.2</span>)</span><br><span class=\"line\">transition: <span class=\"built_in\">opacity</span> <span class=\"number\">0.</span>2s</span><br><span class=\"line\"><span class=\"built_in\">display</span>: <span class=\"built_in\">block</span></span><br><span class=\"line\">padding: 20px 15px</span><br><span class=\"line\">&amp;:hover</span><br><span class=\"line\"><span class=\"built_in\">opacity</span>: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Change_markdown_blockquote_style\">Change markdown blockquote style</h3><p><strong>Compare</strong>:<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/blockquote-before.png\" alt=\"before\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/blockquote-after.png\" alt=\"after\"></p>\n<p><strong>Reason</strong>:its ugly</p>\n<p><strong>File path</strong>:themes\\landscape\\source\\css_partial\\article.styl<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">blockquote</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">15px</span>//add padding</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#777</span>//add color</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">4px</span> solid <span class=\"number\">#ddd</span>//add border</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: font-serif</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.0em</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: line-height <span class=\"number\">20px</span></span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left</span><br></pre></td></tr></table></figure></p>"},{"title":"参加妍妍婚礼的流水账","date":"2015-07-07T02:17:54.000Z","_content":"##1天\n\n\n&emsp;&emsp;第一天在梧村汽车站等石欢欢，小燕相聚。下午跑到沙坡尾一家很有feel的奶茶店喝了奶茶。很贵很难喝，但花钱买环境吧。楼上是很宽敞的榻榻米，可以让小伙伴们很闲散的躺着，坐着，趴着。聊聊天。\n聊天的时间总是很快就过去了。讲讲各自的生活，只是觉得很惬意。\n<!--more-->\n![抹茶拿铁](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3437.JPG)\n\n\n&emsp;&emsp;下午我带她们去了理工学院那边吃了某人推荐的助屋。额，可以说，也不好吃啊，那个传说中的咖喱。吃完了欢欢就回到了小燕家，我跑来实验室搞了搞hexo。也没鼓捣出点啥，晚上回去坐等第二天搬宿舍。\n##2天\n\n\n&emsp;&emsp;搬了一天宿舍，幸亏实验室的小伙伴来帮忙，要不然真心搬不完。真是太感谢啦。不过也没来得及洗澡，就急匆匆的跑过去赶1:30的车去龙岩。打的过去，仅仅差了2分钟，检票时间。幸好赶上。动车真是快，喝了一杯烧仙草，在车上开开玩笑就到了。差不多一个小时。\n\n\n&emsp;&emsp;到了龙岩，一下子就在出站口看到了穿的很卡哇伊的黄圣妍，好瘦，而且好白。带着金手镯，金项链。结婚的节奏啊。接我们先到酒店，居然宾馆房间号小哥给的就是408，我觉得这绝壁是一种暗示。408，大学宿舍，好怀念，好怀念。\n\n\n&emsp;&emsp;下午见到了另一个伴娘，是妍妍的初中同学，一起去做了指甲。\n\n\n&emsp;&emsp;晚上和小妍妍秉烛夜聊，聊了一晚上。1年后，4人再次睡在一个房间真是不容易。以后不知道还有什么机会没有。\n\n\n&emsp;&emsp;早上起床，先去布置一下娘家房子，然后赶去拿充电器，接王瑜和杨秋娟，接着回去又布置了一会儿房间，整个房间变成了气球的海洋，我也机智的学会了如何给气球系口。成就感满满。\n\n\n&emsp;&emsp;中午，小丽和大妈都到齐了。只有大家一起坐在一个房间开始吃午饭的感觉，那种聚在一起的感觉好熟悉，就像当初毕业时吃的最后一顿饭。\n\n\n&emsp;&emsp;下午，开始了忙碌的布置之旅。最后成功布置了拱门。好漂亮的。大家虽然累，但都很有成就感吧。\n\n\n![彩虹拱门](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3467.JPG)\n\n\n&emsp;&emsp;晚上我就很累很累，头很痛，所以9点开始睡觉，10点查不到睡着。他们跑去商量第二天如何整伴郎和新郎。早上起床的感觉，真是幸福啊。嗓子也不疼了，头也不痛了。一天都感觉会很有活力。睡觉真是一个治愈的过程。\n##3天\n\n\n&emsp;&emsp;早上6:30起床开始化妆换衣服，然后等着新郎到来，感觉妍妍都还蛮放松的。还吃面包呢。闹腾的过程也是很欢乐，不过感觉他们都很矜持，也不够给力。难道这就是30岁大叔和90后的差别。感觉露露结婚的时候大家都是\n很给力的嘛。\n\n\n&emsp;&emsp;整个过程都是新郎打电话操心各种事宜，看的出新郎对妍妍还是很温柔的。\n\n\n&emsp;&emsp;站在下面跟着新娘迎接宾客的时候肚子好痛，终于熬到了开始典礼仪式。\n\n\n&emsp;&emsp;蓝色的主题很美，当司仪开始念到让新娘上台的时候，突然一瞬间，大学里第一幕见到圣妍的种种，在宿舍里度过的每一个瞬间，在一起做的一些脑残事，一起去琴房，一起画井盖，一起参加电子设计比赛，她还把手剪了，她一直都很坚强。去游乐场玩她都在鼓励我，爬屋顶也是，大家都把我拉上去。一幕幕的，算了，不敢回忆了。诸多，诸多，四年的时光。其实之前一直都没啥感觉，直到这一刻，突然意识到，嫁人了。长大了。一切都回不去了。欢欢也哭着看了我一眼。瞄到王瑜也在哭。大妈也在哭。大家都在感伤着时光吧。\n\n\n![新娘的背影](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3476.JPG)\n\n\n&emsp;&emsp;接下来就是吃饭，换票。到了他们的新房。\n\n\n&emsp;&emsp;大家又开始闹腾了。一瞬间好像又回到了大学。幻觉般的时光，过得好快。\n\n##结束\n&emsp;&emsp;妍妍送走了我们，到了车站，各奔东西。跟着妹子回到了软件园，见到了rp。感慨好多。再次聚会，是谁结婚？","source":"_posts/hh.md","raw":"title: 参加妍妍婚礼的流水账\ndate: 2015-07-07 10:17:54\ncategories: Life\ntags: [生活，婚礼，朋友]\n---\n##1天\n\n\n&emsp;&emsp;第一天在梧村汽车站等石欢欢，小燕相聚。下午跑到沙坡尾一家很有feel的奶茶店喝了奶茶。很贵很难喝，但花钱买环境吧。楼上是很宽敞的榻榻米，可以让小伙伴们很闲散的躺着，坐着，趴着。聊聊天。\n聊天的时间总是很快就过去了。讲讲各自的生活，只是觉得很惬意。\n<!--more-->\n![抹茶拿铁](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3437.JPG)\n\n\n&emsp;&emsp;下午我带她们去了理工学院那边吃了某人推荐的助屋。额，可以说，也不好吃啊，那个传说中的咖喱。吃完了欢欢就回到了小燕家，我跑来实验室搞了搞hexo。也没鼓捣出点啥，晚上回去坐等第二天搬宿舍。\n##2天\n\n\n&emsp;&emsp;搬了一天宿舍，幸亏实验室的小伙伴来帮忙，要不然真心搬不完。真是太感谢啦。不过也没来得及洗澡，就急匆匆的跑过去赶1:30的车去龙岩。打的过去，仅仅差了2分钟，检票时间。幸好赶上。动车真是快，喝了一杯烧仙草，在车上开开玩笑就到了。差不多一个小时。\n\n\n&emsp;&emsp;到了龙岩，一下子就在出站口看到了穿的很卡哇伊的黄圣妍，好瘦，而且好白。带着金手镯，金项链。结婚的节奏啊。接我们先到酒店，居然宾馆房间号小哥给的就是408，我觉得这绝壁是一种暗示。408，大学宿舍，好怀念，好怀念。\n\n\n&emsp;&emsp;下午见到了另一个伴娘，是妍妍的初中同学，一起去做了指甲。\n\n\n&emsp;&emsp;晚上和小妍妍秉烛夜聊，聊了一晚上。1年后，4人再次睡在一个房间真是不容易。以后不知道还有什么机会没有。\n\n\n&emsp;&emsp;早上起床，先去布置一下娘家房子，然后赶去拿充电器，接王瑜和杨秋娟，接着回去又布置了一会儿房间，整个房间变成了气球的海洋，我也机智的学会了如何给气球系口。成就感满满。\n\n\n&emsp;&emsp;中午，小丽和大妈都到齐了。只有大家一起坐在一个房间开始吃午饭的感觉，那种聚在一起的感觉好熟悉，就像当初毕业时吃的最后一顿饭。\n\n\n&emsp;&emsp;下午，开始了忙碌的布置之旅。最后成功布置了拱门。好漂亮的。大家虽然累，但都很有成就感吧。\n\n\n![彩虹拱门](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3467.JPG)\n\n\n&emsp;&emsp;晚上我就很累很累，头很痛，所以9点开始睡觉，10点查不到睡着。他们跑去商量第二天如何整伴郎和新郎。早上起床的感觉，真是幸福啊。嗓子也不疼了，头也不痛了。一天都感觉会很有活力。睡觉真是一个治愈的过程。\n##3天\n\n\n&emsp;&emsp;早上6:30起床开始化妆换衣服，然后等着新郎到来，感觉妍妍都还蛮放松的。还吃面包呢。闹腾的过程也是很欢乐，不过感觉他们都很矜持，也不够给力。难道这就是30岁大叔和90后的差别。感觉露露结婚的时候大家都是\n很给力的嘛。\n\n\n&emsp;&emsp;整个过程都是新郎打电话操心各种事宜，看的出新郎对妍妍还是很温柔的。\n\n\n&emsp;&emsp;站在下面跟着新娘迎接宾客的时候肚子好痛，终于熬到了开始典礼仪式。\n\n\n&emsp;&emsp;蓝色的主题很美，当司仪开始念到让新娘上台的时候，突然一瞬间，大学里第一幕见到圣妍的种种，在宿舍里度过的每一个瞬间，在一起做的一些脑残事，一起去琴房，一起画井盖，一起参加电子设计比赛，她还把手剪了，她一直都很坚强。去游乐场玩她都在鼓励我，爬屋顶也是，大家都把我拉上去。一幕幕的，算了，不敢回忆了。诸多，诸多，四年的时光。其实之前一直都没啥感觉，直到这一刻，突然意识到，嫁人了。长大了。一切都回不去了。欢欢也哭着看了我一眼。瞄到王瑜也在哭。大妈也在哭。大家都在感伤着时光吧。\n\n\n![新娘的背影](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3476.JPG)\n\n\n&emsp;&emsp;接下来就是吃饭，换票。到了他们的新房。\n\n\n&emsp;&emsp;大家又开始闹腾了。一瞬间好像又回到了大学。幻觉般的时光，过得好快。\n\n##结束\n&emsp;&emsp;妍妍送走了我们，到了车站，各奔东西。跟着妹子回到了软件园，见到了rp。感慨好多。再次聚会，是谁结婚？","slug":"hh","published":1,"updated":"2015-07-09T07:46:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo5z000kllsguvcx6i59","content":"<h2 id=\"1天\">1天</h2><p>&emsp;&emsp;第一天在梧村汽车站等石欢欢，小燕相聚。下午跑到沙坡尾一家很有feel的奶茶店喝了奶茶。很贵很难喝，但花钱买环境吧。楼上是很宽敞的榻榻米，可以让小伙伴们很闲散的躺着，坐着，趴着。聊聊天。<br>聊天的时间总是很快就过去了。讲讲各自的生活，只是觉得很惬意。<br><a id=\"more\"></a><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3437.JPG\" alt=\"抹茶拿铁\"></p>\n<p>&emsp;&emsp;下午我带她们去了理工学院那边吃了某人推荐的助屋。额，可以说，也不好吃啊，那个传说中的咖喱。吃完了欢欢就回到了小燕家，我跑来实验室搞了搞hexo。也没鼓捣出点啥，晚上回去坐等第二天搬宿舍。</p>\n<h2 id=\"2天\">2天</h2><p>&emsp;&emsp;搬了一天宿舍，幸亏实验室的小伙伴来帮忙，要不然真心搬不完。真是太感谢啦。不过也没来得及洗澡，就急匆匆的跑过去赶1:30的车去龙岩。打的过去，仅仅差了2分钟，检票时间。幸好赶上。动车真是快，喝了一杯烧仙草，在车上开开玩笑就到了。差不多一个小时。</p>\n<p>&emsp;&emsp;到了龙岩，一下子就在出站口看到了穿的很卡哇伊的黄圣妍，好瘦，而且好白。带着金手镯，金项链。结婚的节奏啊。接我们先到酒店，居然宾馆房间号小哥给的就是408，我觉得这绝壁是一种暗示。408，大学宿舍，好怀念，好怀念。</p>\n<p>&emsp;&emsp;下午见到了另一个伴娘，是妍妍的初中同学，一起去做了指甲。</p>\n<p>&emsp;&emsp;晚上和小妍妍秉烛夜聊，聊了一晚上。1年后，4人再次睡在一个房间真是不容易。以后不知道还有什么机会没有。</p>\n<p>&emsp;&emsp;早上起床，先去布置一下娘家房子，然后赶去拿充电器，接王瑜和杨秋娟，接着回去又布置了一会儿房间，整个房间变成了气球的海洋，我也机智的学会了如何给气球系口。成就感满满。</p>\n<p>&emsp;&emsp;中午，小丽和大妈都到齐了。只有大家一起坐在一个房间开始吃午饭的感觉，那种聚在一起的感觉好熟悉，就像当初毕业时吃的最后一顿饭。</p>\n<p>&emsp;&emsp;下午，开始了忙碌的布置之旅。最后成功布置了拱门。好漂亮的。大家虽然累，但都很有成就感吧。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3467.JPG\" alt=\"彩虹拱门\"></p>\n<p>&emsp;&emsp;晚上我就很累很累，头很痛，所以9点开始睡觉，10点查不到睡着。他们跑去商量第二天如何整伴郎和新郎。早上起床的感觉，真是幸福啊。嗓子也不疼了，头也不痛了。一天都感觉会很有活力。睡觉真是一个治愈的过程。</p>\n<h2 id=\"3天\">3天</h2><p>&emsp;&emsp;早上6:30起床开始化妆换衣服，然后等着新郎到来，感觉妍妍都还蛮放松的。还吃面包呢。闹腾的过程也是很欢乐，不过感觉他们都很矜持，也不够给力。难道这就是30岁大叔和90后的差别。感觉露露结婚的时候大家都是<br>很给力的嘛。</p>\n<p>&emsp;&emsp;整个过程都是新郎打电话操心各种事宜，看的出新郎对妍妍还是很温柔的。</p>\n<p>&emsp;&emsp;站在下面跟着新娘迎接宾客的时候肚子好痛，终于熬到了开始典礼仪式。</p>\n<p>&emsp;&emsp;蓝色的主题很美，当司仪开始念到让新娘上台的时候，突然一瞬间，大学里第一幕见到圣妍的种种，在宿舍里度过的每一个瞬间，在一起做的一些脑残事，一起去琴房，一起画井盖，一起参加电子设计比赛，她还把手剪了，她一直都很坚强。去游乐场玩她都在鼓励我，爬屋顶也是，大家都把我拉上去。一幕幕的，算了，不敢回忆了。诸多，诸多，四年的时光。其实之前一直都没啥感觉，直到这一刻，突然意识到，嫁人了。长大了。一切都回不去了。欢欢也哭着看了我一眼。瞄到王瑜也在哭。大妈也在哭。大家都在感伤着时光吧。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3476.JPG\" alt=\"新娘的背影\"></p>\n<p>&emsp;&emsp;接下来就是吃饭，换票。到了他们的新房。</p>\n<p>&emsp;&emsp;大家又开始闹腾了。一瞬间好像又回到了大学。幻觉般的时光，过得好快。</p>\n<h2 id=\"结束\">结束</h2><p>&emsp;&emsp;妍妍送走了我们，到了车站，各奔东西。跟着妹子回到了软件园，见到了rp。感慨好多。再次聚会，是谁结婚？</p>\n","excerpt":"<h2 id=\"1天\">1天</h2><p>&emsp;&emsp;第一天在梧村汽车站等石欢欢，小燕相聚。下午跑到沙坡尾一家很有feel的奶茶店喝了奶茶。很贵很难喝，但花钱买环境吧。楼上是很宽敞的榻榻米，可以让小伙伴们很闲散的躺着，坐着，趴着。聊聊天。<br>聊天的时间总是很快就过去了。讲讲各自的生活，只是觉得很惬意。<br>","more":"<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3437.JPG\" alt=\"抹茶拿铁\"></p>\n<p>&emsp;&emsp;下午我带她们去了理工学院那边吃了某人推荐的助屋。额，可以说，也不好吃啊，那个传说中的咖喱。吃完了欢欢就回到了小燕家，我跑来实验室搞了搞hexo。也没鼓捣出点啥，晚上回去坐等第二天搬宿舍。</p>\n<h2 id=\"2天\">2天</h2><p>&emsp;&emsp;搬了一天宿舍，幸亏实验室的小伙伴来帮忙，要不然真心搬不完。真是太感谢啦。不过也没来得及洗澡，就急匆匆的跑过去赶1:30的车去龙岩。打的过去，仅仅差了2分钟，检票时间。幸好赶上。动车真是快，喝了一杯烧仙草，在车上开开玩笑就到了。差不多一个小时。</p>\n<p>&emsp;&emsp;到了龙岩，一下子就在出站口看到了穿的很卡哇伊的黄圣妍，好瘦，而且好白。带着金手镯，金项链。结婚的节奏啊。接我们先到酒店，居然宾馆房间号小哥给的就是408，我觉得这绝壁是一种暗示。408，大学宿舍，好怀念，好怀念。</p>\n<p>&emsp;&emsp;下午见到了另一个伴娘，是妍妍的初中同学，一起去做了指甲。</p>\n<p>&emsp;&emsp;晚上和小妍妍秉烛夜聊，聊了一晚上。1年后，4人再次睡在一个房间真是不容易。以后不知道还有什么机会没有。</p>\n<p>&emsp;&emsp;早上起床，先去布置一下娘家房子，然后赶去拿充电器，接王瑜和杨秋娟，接着回去又布置了一会儿房间，整个房间变成了气球的海洋，我也机智的学会了如何给气球系口。成就感满满。</p>\n<p>&emsp;&emsp;中午，小丽和大妈都到齐了。只有大家一起坐在一个房间开始吃午饭的感觉，那种聚在一起的感觉好熟悉，就像当初毕业时吃的最后一顿饭。</p>\n<p>&emsp;&emsp;下午，开始了忙碌的布置之旅。最后成功布置了拱门。好漂亮的。大家虽然累，但都很有成就感吧。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3467.JPG\" alt=\"彩虹拱门\"></p>\n<p>&emsp;&emsp;晚上我就很累很累，头很痛，所以9点开始睡觉，10点查不到睡着。他们跑去商量第二天如何整伴郎和新郎。早上起床的感觉，真是幸福啊。嗓子也不疼了，头也不痛了。一天都感觉会很有活力。睡觉真是一个治愈的过程。</p>\n<h2 id=\"3天\">3天</h2><p>&emsp;&emsp;早上6:30起床开始化妆换衣服，然后等着新郎到来，感觉妍妍都还蛮放松的。还吃面包呢。闹腾的过程也是很欢乐，不过感觉他们都很矜持，也不够给力。难道这就是30岁大叔和90后的差别。感觉露露结婚的时候大家都是<br>很给力的嘛。</p>\n<p>&emsp;&emsp;整个过程都是新郎打电话操心各种事宜，看的出新郎对妍妍还是很温柔的。</p>\n<p>&emsp;&emsp;站在下面跟着新娘迎接宾客的时候肚子好痛，终于熬到了开始典礼仪式。</p>\n<p>&emsp;&emsp;蓝色的主题很美，当司仪开始念到让新娘上台的时候，突然一瞬间，大学里第一幕见到圣妍的种种，在宿舍里度过的每一个瞬间，在一起做的一些脑残事，一起去琴房，一起画井盖，一起参加电子设计比赛，她还把手剪了，她一直都很坚强。去游乐场玩她都在鼓励我，爬屋顶也是，大家都把我拉上去。一幕幕的，算了，不敢回忆了。诸多，诸多，四年的时光。其实之前一直都没啥感觉，直到这一刻，突然意识到，嫁人了。长大了。一切都回不去了。欢欢也哭着看了我一眼。瞄到王瑜也在哭。大妈也在哭。大家都在感伤着时光吧。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3476.JPG\" alt=\"新娘的背影\"></p>\n<p>&emsp;&emsp;接下来就是吃饭，换票。到了他们的新房。</p>\n<p>&emsp;&emsp;大家又开始闹腾了。一瞬间好像又回到了大学。幻觉般的时光，过得好快。</p>\n<h2 id=\"结束\">结束</h2><p>&emsp;&emsp;妍妍送走了我们，到了车站，各奔东西。跟着妹子回到了软件园，见到了rp。感慨好多。再次聚会，是谁结婚？</p>"},{"title":"inline-block元素的诡异样式问题","date":"2018-07-12T13:49:34.000Z","_content":"### 记录一次inline-block引起的诡异样式错位\n![](cssp.PNG)\n想在colorPicker后面加一个icon，点击增加就可以继续增加colorPicker，\n用了一个div套i标签，然后设置div为inline-block，但是发现这个div和前面的colorPicker的div怎么都不在一条水平线上。特别尴尬。\n同样都是inline-block布局，到底哪里出了问题。\n后来仔细看了zxx大佬的博客[CSS深入理解vertical-align和line-height的基友关系](https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)，终于找到了理论基础[w3c可视化格式模型文档](https://www.w3.org/TR/CSS21/visudet.html#propdef-vertical-align)：\n```\nThe baseline of an 'inline-block' is the baseline of its last line box in the normal flow, unless it has either no in-flow line boxes or if its 'overflow' property has a computed value other than 'visible', in which case the baseline is the bottom margin edge.\n```\n意思就是：\n```\n一个inline-block元素，如果里面没有inline内联元素，或者overflow不是visible，则该元素的基线就是其margin底边缘，否则，其基线就是元素里面最后一行内联元素的基线\n```\n这就解释了本文中的两个inline-block元素无法对齐：\n因为colorPicker的div里面没有inline内联元素，所以其基线就是margin底边缘。\n但是我的icon div盒子里有一个i标签是inline内联元素，所以其基线是i标签内联元素的基线。\n\nzxx博客的这部分内容很好的复现了上述问题。\n![](exa.png)\n\n针对博客最后的那个例子我做了几个demo，和博客对比着看。\n\n1. 通过那个规则，改变inline-block基线的位置，从而间距消除\n![](a.gif)\n\n2. 通过改变font-size使基线和中线重合\n![](b.gif)\n\n3. 通过改变vertical-align的规则，不要基线对齐。从而消除间距\n![](c.gif)","source":"_posts/inline-block元素的诡异样式问题.md","raw":"title: inline-block元素的诡异样式问题\ndate: 2018-07-12 21:49:34\ntags:\n---\n### 记录一次inline-block引起的诡异样式错位\n![](cssp.PNG)\n想在colorPicker后面加一个icon，点击增加就可以继续增加colorPicker，\n用了一个div套i标签，然后设置div为inline-block，但是发现这个div和前面的colorPicker的div怎么都不在一条水平线上。特别尴尬。\n同样都是inline-block布局，到底哪里出了问题。\n后来仔细看了zxx大佬的博客[CSS深入理解vertical-align和line-height的基友关系](https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)，终于找到了理论基础[w3c可视化格式模型文档](https://www.w3.org/TR/CSS21/visudet.html#propdef-vertical-align)：\n```\nThe baseline of an 'inline-block' is the baseline of its last line box in the normal flow, unless it has either no in-flow line boxes or if its 'overflow' property has a computed value other than 'visible', in which case the baseline is the bottom margin edge.\n```\n意思就是：\n```\n一个inline-block元素，如果里面没有inline内联元素，或者overflow不是visible，则该元素的基线就是其margin底边缘，否则，其基线就是元素里面最后一行内联元素的基线\n```\n这就解释了本文中的两个inline-block元素无法对齐：\n因为colorPicker的div里面没有inline内联元素，所以其基线就是margin底边缘。\n但是我的icon div盒子里有一个i标签是inline内联元素，所以其基线是i标签内联元素的基线。\n\nzxx博客的这部分内容很好的复现了上述问题。\n![](exa.png)\n\n针对博客最后的那个例子我做了几个demo，和博客对比着看。\n\n1. 通过那个规则，改变inline-block基线的位置，从而间距消除\n![](a.gif)\n\n2. 通过改变font-size使基线和中线重合\n![](b.gif)\n\n3. 通过改变vertical-align的规则，不要基线对齐。从而消除间距\n![](c.gif)","slug":"inline-block元素的诡异样式问题","published":1,"updated":"2018-07-12T13:54:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo60000nllsgq3shvry0","content":"<h3 id=\"记录一次inline-block引起的诡异样式错位\">记录一次inline-block引起的诡异样式错位</h3><p><img src=\"cssp.PNG\" alt=\"\"><br>想在colorPicker后面加一个icon，点击增加就可以继续增加colorPicker，<br>用了一个div套i标签，然后设置div为inline-block，但是发现这个div和前面的colorPicker的div怎么都不在一条水平线上。特别尴尬。<br>同样都是inline-block布局，到底哪里出了问题。<br>后来仔细看了zxx大佬的博客<a href=\"https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"external\">CSS深入理解vertical-align和line-height的基友关系</a>，终于找到了理论基础<a href=\"https://www.w3.org/TR/CSS21/visudet.html#propdef-vertical-align\" target=\"_blank\" rel=\"external\">w3c可视化格式模型文档</a>：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The baseline <span class=\"keyword\">of</span> <span class=\"keyword\">an</span> <span class=\"string\">'inline-block'</span> is <span class=\"keyword\">the</span> baseline <span class=\"keyword\">of</span> its <span class=\"keyword\">last</span> <span class=\"built_in\">line</span> box <span class=\"keyword\">in</span> <span class=\"keyword\">the</span> <span class=\"keyword\">normal</span> flow, unless <span class=\"keyword\">it</span> has either no <span class=\"keyword\">in</span>-flow <span class=\"built_in\">line</span> boxes <span class=\"keyword\">or</span> <span class=\"keyword\">if</span> its <span class=\"string\">'overflow'</span> property has <span class=\"keyword\">a</span> computed <span class=\"built_in\">value</span> other than <span class=\"string\">'visible'</span>, <span class=\"keyword\">in</span> which <span class=\"keyword\">case</span> <span class=\"keyword\">the</span> baseline is <span class=\"keyword\">the</span> bottom margin edge.</span><br></pre></td></tr></table></figure></p>\n<p>意思就是：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个inline-block元素，如果里面没有inline内联元素，或者<span class=\"attribute\">overflow</span>不是visible，则该元素的基线就是其<span class=\"attribute\">margin</span>底边缘，否则，其基线就是元素里面最后一行内联元素的基线</span><br></pre></td></tr></table></figure></p>\n<p>这就解释了本文中的两个inline-block元素无法对齐：<br>因为colorPicker的div里面没有inline内联元素，所以其基线就是margin底边缘。<br>但是我的icon div盒子里有一个i标签是inline内联元素，所以其基线是i标签内联元素的基线。</p>\n<p>zxx博客的这部分内容很好的复现了上述问题。<br><img src=\"exa.png\" alt=\"\"></p>\n<p>针对博客最后的那个例子我做了几个demo，和博客对比着看。</p>\n<ol>\n<li><p>通过那个规则，改变inline-block基线的位置，从而间距消除<br><img src=\"a.gif\" alt=\"\"></p>\n</li>\n<li><p>通过改变font-size使基线和中线重合<br><img src=\"b.gif\" alt=\"\"></p>\n</li>\n<li><p>通过改变vertical-align的规则，不要基线对齐。从而消除间距<br><img src=\"c.gif\" alt=\"\"></p>\n</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"记录一次inline-block引起的诡异样式错位\">记录一次inline-block引起的诡异样式错位</h3><p><img src=\"cssp.PNG\" alt=\"\"><br>想在colorPicker后面加一个icon，点击增加就可以继续增加colorPicker，<br>用了一个div套i标签，然后设置div为inline-block，但是发现这个div和前面的colorPicker的div怎么都不在一条水平线上。特别尴尬。<br>同样都是inline-block布局，到底哪里出了问题。<br>后来仔细看了zxx大佬的博客<a href=\"https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\">CSS深入理解vertical-align和line-height的基友关系</a>，终于找到了理论基础<a href=\"https://www.w3.org/TR/CSS21/visudet.html#propdef-vertical-align\">w3c可视化格式模型文档</a>：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The baseline <span class=\"keyword\">of</span> <span class=\"keyword\">an</span> <span class=\"string\">'inline-block'</span> is <span class=\"keyword\">the</span> baseline <span class=\"keyword\">of</span> its <span class=\"keyword\">last</span> <span class=\"built_in\">line</span> box <span class=\"keyword\">in</span> <span class=\"keyword\">the</span> <span class=\"keyword\">normal</span> flow, unless <span class=\"keyword\">it</span> has either no <span class=\"keyword\">in</span>-flow <span class=\"built_in\">line</span> boxes <span class=\"keyword\">or</span> <span class=\"keyword\">if</span> its <span class=\"string\">'overflow'</span> property has <span class=\"keyword\">a</span> computed <span class=\"built_in\">value</span> other than <span class=\"string\">'visible'</span>, <span class=\"keyword\">in</span> which <span class=\"keyword\">case</span> <span class=\"keyword\">the</span> baseline is <span class=\"keyword\">the</span> bottom margin edge.</span><br></pre></td></tr></table></figure></p>\n<p>意思就是：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个inline-block元素，如果里面没有inline内联元素，或者<span class=\"attribute\">overflow</span>不是visible，则该元素的基线就是其<span class=\"attribute\">margin</span>底边缘，否则，其基线就是元素里面最后一行内联元素的基线</span><br></pre></td></tr></table></figure></p>\n<p>这就解释了本文中的两个inline-block元素无法对齐：<br>因为colorPicker的div里面没有inline内联元素，所以其基线就是margin底边缘。<br>但是我的icon div盒子里有一个i标签是inline内联元素，所以其基线是i标签内联元素的基线。</p>\n<p>zxx博客的这部分内容很好的复现了上述问题。<br><img src=\"exa.png\" alt=\"\"></p>\n<p>针对博客最后的那个例子我做了几个demo，和博客对比着看。</p>\n<ol>\n<li><p>通过那个规则，改变inline-block基线的位置，从而间距消除<br><img src=\"a.gif\" alt=\"\"></p>\n</li>\n<li><p>通过改变font-size使基线和中线重合<br><img src=\"b.gif\" alt=\"\"></p>\n</li>\n<li><p>通过改变vertical-align的规则，不要基线对齐。从而消除间距<br><img src=\"c.gif\" alt=\"\"></p>\n</li>\n</ol>\n"},{"title":"json数据要用双引号","date":"2016-03-31T06:24:47.000Z","_content":"今天遇到了一个json的坑，原来json里的字符串必须是双引号，我用单引号，sublime就提示高亮的错误，而且jquery的\n$.get()或者 $.getJSON()都没反应，调不到数据。改成双引号就一切ok了\n[json 官方网站](http://www.json.org/index.html)也是这么说的(double quote!)\n\n<!--more-->\n又遇到了一个坑，原来json里不能有注释的东西。\n\n由于jQuery使用get请求获取json data的时候出错了也不提示的。静默错误。\n\n> it will fail silently unless the script has also called the global .ajaxError() method\n\njQuery.get()会返回一个jqXHR对象，在1.5中是包含jqXHR.success(), jqXHR.error(), and jqXHR.complete()三个方法，其中jqXHR.error()可以处理错误，但是1.8之后都替换成了jqXHR.done(), jqXHR.fail(), and jqXHR.always()方法，其中jqXHR.fail()用来处理错误。\n\n```\nvar jqxhr = $.get( \"example.json\", function() {\n  alert( \"success\" );\n})\n .fail(function(error) {\n    alert(error);\n  })\n```\n\n可以看出错误的信息。\n\n不过最好用一些在线的json工具检查一下是否有错，这样就不会像无头苍蝇一样了。比如[jsonlint](http://jsonlint.com/)\n\ngulp也有相关的[测试插件](https://www.npmjs.com/package/gulp-json-lint)\n\n\n```\n$.get(function(){\n\t//success1!\n}).done(function(){\n\t//success2!\n})\n```\n有什么区别？\n\n为了搞清楚这个问题，不得不去看了javascript的各种回调方法。\n\njquery本来的方法是用监听事件来实现，这里的get方法是底层ajax的简写。监听了success事件，然后才来执行success1\n```\n$.ajax({\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n```\n\n后来又加了一个[Deferred()](http://api.jquery.com/jQuery.Deferred/)方法，是基于CommonJS Promises/A 设计的，返回一个promise对象（对应jqXHR对象），promise对象会有一个then方法（对应done方法），可以在异步任务完成后，才执行回调函数。所以两个都保留了下来。\n\n阮一峰的博客逻辑很清楚。[avascript异步编程的4种方法](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)\n\n## json的知识点\n\n要区分清楚json对象，和json文本\n\n```\n var str= '{ \"name\": \"张三\", \"sex\": \"男\" }';   //文本\n\n var obj=str.parseJSON();   //把其Json文本解析成为json对象   \n\n alert(obj.toJSONString()); //把json对象转换成JSON 文本  \n```\n\n所有highchart的函数都要写在$(function(){\n\t.....\n})\n里。\n\n```\n$(function(){\n\t//\n})\n```\n等价于\n```\njQuery(function() { \n\t//\t\n})\n```\n等价于\n```\n$(document).ready(funtion(){\n\t//\n})\n```\n的缩写。\n```\n\njQuery(function($){\n\t//最安全的写法。$作为局部变量。这样就不会和外面定义的$混淆了。\n})\n```\n","source":"_posts/json-format.md","raw":"title: json数据要用双引号\ndate: 2016-03-31 14:24:47\ntags: Javascript\n---\n今天遇到了一个json的坑，原来json里的字符串必须是双引号，我用单引号，sublime就提示高亮的错误，而且jquery的\n$.get()或者 $.getJSON()都没反应，调不到数据。改成双引号就一切ok了\n[json 官方网站](http://www.json.org/index.html)也是这么说的(double quote!)\n\n<!--more-->\n又遇到了一个坑，原来json里不能有注释的东西。\n\n由于jQuery使用get请求获取json data的时候出错了也不提示的。静默错误。\n\n> it will fail silently unless the script has also called the global .ajaxError() method\n\njQuery.get()会返回一个jqXHR对象，在1.5中是包含jqXHR.success(), jqXHR.error(), and jqXHR.complete()三个方法，其中jqXHR.error()可以处理错误，但是1.8之后都替换成了jqXHR.done(), jqXHR.fail(), and jqXHR.always()方法，其中jqXHR.fail()用来处理错误。\n\n```\nvar jqxhr = $.get( \"example.json\", function() {\n  alert( \"success\" );\n})\n .fail(function(error) {\n    alert(error);\n  })\n```\n\n可以看出错误的信息。\n\n不过最好用一些在线的json工具检查一下是否有错，这样就不会像无头苍蝇一样了。比如[jsonlint](http://jsonlint.com/)\n\ngulp也有相关的[测试插件](https://www.npmjs.com/package/gulp-json-lint)\n\n\n```\n$.get(function(){\n\t//success1!\n}).done(function(){\n\t//success2!\n})\n```\n有什么区别？\n\n为了搞清楚这个问题，不得不去看了javascript的各种回调方法。\n\njquery本来的方法是用监听事件来实现，这里的get方法是底层ajax的简写。监听了success事件，然后才来执行success1\n```\n$.ajax({\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n```\n\n后来又加了一个[Deferred()](http://api.jquery.com/jQuery.Deferred/)方法，是基于CommonJS Promises/A 设计的，返回一个promise对象（对应jqXHR对象），promise对象会有一个then方法（对应done方法），可以在异步任务完成后，才执行回调函数。所以两个都保留了下来。\n\n阮一峰的博客逻辑很清楚。[avascript异步编程的4种方法](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)\n\n## json的知识点\n\n要区分清楚json对象，和json文本\n\n```\n var str= '{ \"name\": \"张三\", \"sex\": \"男\" }';   //文本\n\n var obj=str.parseJSON();   //把其Json文本解析成为json对象   \n\n alert(obj.toJSONString()); //把json对象转换成JSON 文本  \n```\n\n所有highchart的函数都要写在$(function(){\n\t.....\n})\n里。\n\n```\n$(function(){\n\t//\n})\n```\n等价于\n```\njQuery(function() { \n\t//\t\n})\n```\n等价于\n```\n$(document).ready(funtion(){\n\t//\n})\n```\n的缩写。\n```\n\njQuery(function($){\n\t//最安全的写法。$作为局部变量。这样就不会和外面定义的$混淆了。\n})\n```\n","slug":"json-format","published":1,"updated":"2016-04-03T10:01:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo61000pllsgy36vz2c3","content":"<p>今天遇到了一个json的坑，原来json里的字符串必须是双引号，我用单引号，sublime就提示高亮的错误，而且jquery的<br>$.get()或者 $.getJSON()都没反应，调不到数据。改成双引号就一切ok了<br><a href=\"http://www.json.org/index.html\" target=\"_blank\" rel=\"external\">json 官方网站</a>也是这么说的(double quote!)</p>\n<a id=\"more\"></a>\n<p>又遇到了一个坑，原来json里不能有注释的东西。</p>\n<p>由于jQuery使用get请求获取json data的时候出错了也不提示的。静默错误。</p>\n<blockquote>\n<p>it will fail silently unless the script has also called the global .ajaxError() method</p>\n</blockquote>\n<p>jQuery.get()会返回一个jqXHR对象，在1.5中是包含jqXHR.success(), jqXHR.error(), and jqXHR.complete()三个方法，其中jqXHR.error()可以处理错误，但是1.8之后都替换成了jqXHR.done(), jqXHR.fail(), and jqXHR.always()方法，其中jqXHR.fail()用来处理错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jqxhr = $.get( <span class=\"string\">\"example.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert( <span class=\"string\">\"success\"</span> );</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> .fail(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    alert(error);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>可以看出错误的信息。</p>\n<p>不过最好用一些在线的json工具检查一下是否有错，这样就不会像无头苍蝇一样了。比如<a href=\"http://jsonlint.com/\" target=\"_blank\" rel=\"external\">jsonlint</a></p>\n<p>gulp也有相关的<a href=\"https://www.npmjs.com/package/gulp-json-lint\" target=\"_blank\" rel=\"external\">测试插件</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//success1!</span></span><br><span class=\"line\">&#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//success2!</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>有什么区别？</p>\n<p>为了搞清楚这个问题，不得不去看了javascript的各种回调方法。</p>\n<p>jquery本来的方法是用监听事件来实现，这里的get方法是底层ajax的简写。监听了success事件，然后才来执行success1<br><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">url</span>: <span class=\"built_in\">url</span>,</span><br><span class=\"line\">  <span class=\"attribute\">data</span>: data,</span><br><span class=\"line\">  <span class=\"attribute\">success</span>: success,</span><br><span class=\"line\">  <span class=\"attribute\">dataType</span>: dataType</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>后来又加了一个<a href=\"http://api.jquery.com/jQuery.Deferred/\" target=\"_blank\" rel=\"external\">Deferred()</a>方法，是基于CommonJS Promises/A 设计的，返回一个promise对象（对应jqXHR对象），promise对象会有一个then方法（对应done方法），可以在异步任务完成后，才执行回调函数。所以两个都保留了下来。</p>\n<p>阮一峰的博客逻辑很清楚。<a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\" target=\"_blank\" rel=\"external\">avascript异步编程的4种方法</a></p>\n<h2 id=\"json的知识点\">json的知识点</h2><p>要区分清楚json对象，和json文本</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">var</span> str</span>= '&#123; <span class=\"string\">\"name\"</span>: <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"男\"</span> &#125;';   <span class=\"comment\">//文本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">var</span> obj</span>=str.parseJSON();   <span class=\"comment\">//把其Json文本解析成为json对象   </span></span><br><span class=\"line\"></span><br><span class=\"line\">alert(obj.toJSONString()); <span class=\"comment\">//把json对象转换成JSON 文本</span></span><br></pre></td></tr></table></figure>\n<p>所有highchart的函数都要写在$(function(){<br>    …..<br>})<br>里。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>等价于<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//\t</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"comment\">(document)</span>.ready<span class=\"comment\">(funtion()</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>的缩写。<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">jQuery(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//最安全的写法。$作为局部变量。这样就不会和外面定义的$混淆了。</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>今天遇到了一个json的坑，原来json里的字符串必须是双引号，我用单引号，sublime就提示高亮的错误，而且jquery的<br>$.get()或者 $.getJSON()都没反应，调不到数据。改成双引号就一切ok了<br><a href=\"http://www.json.org/index.html\">json 官方网站</a>也是这么说的(double quote!)</p>","more":"<p>又遇到了一个坑，原来json里不能有注释的东西。</p>\n<p>由于jQuery使用get请求获取json data的时候出错了也不提示的。静默错误。</p>\n<blockquote>\n<p>it will fail silently unless the script has also called the global .ajaxError() method</p>\n</blockquote>\n<p>jQuery.get()会返回一个jqXHR对象，在1.5中是包含jqXHR.success(), jqXHR.error(), and jqXHR.complete()三个方法，其中jqXHR.error()可以处理错误，但是1.8之后都替换成了jqXHR.done(), jqXHR.fail(), and jqXHR.always()方法，其中jqXHR.fail()用来处理错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jqxhr = $.get( <span class=\"string\">\"example.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert( <span class=\"string\">\"success\"</span> );</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> .fail(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    alert(error);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>可以看出错误的信息。</p>\n<p>不过最好用一些在线的json工具检查一下是否有错，这样就不会像无头苍蝇一样了。比如<a href=\"http://jsonlint.com/\">jsonlint</a></p>\n<p>gulp也有相关的<a href=\"https://www.npmjs.com/package/gulp-json-lint\">测试插件</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//success1!</span></span><br><span class=\"line\">&#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//success2!</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>有什么区别？</p>\n<p>为了搞清楚这个问题，不得不去看了javascript的各种回调方法。</p>\n<p>jquery本来的方法是用监听事件来实现，这里的get方法是底层ajax的简写。监听了success事件，然后才来执行success1<br><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">url</span>: <span class=\"built_in\">url</span>,</span><br><span class=\"line\">  <span class=\"attribute\">data</span>: data,</span><br><span class=\"line\">  <span class=\"attribute\">success</span>: success,</span><br><span class=\"line\">  <span class=\"attribute\">dataType</span>: dataType</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>后来又加了一个<a href=\"http://api.jquery.com/jQuery.Deferred/\">Deferred()</a>方法，是基于CommonJS Promises/A 设计的，返回一个promise对象（对应jqXHR对象），promise对象会有一个then方法（对应done方法），可以在异步任务完成后，才执行回调函数。所以两个都保留了下来。</p>\n<p>阮一峰的博客逻辑很清楚。<a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\">avascript异步编程的4种方法</a></p>\n<h2 id=\"json的知识点\">json的知识点</h2><p>要区分清楚json对象，和json文本</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">var</span> str</span>= '&#123; <span class=\"string\">\"name\"</span>: <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"男\"</span> &#125;';   <span class=\"comment\">//文本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\"><span class=\"keyword\">var</span> obj</span>=str.parseJSON();   <span class=\"comment\">//把其Json文本解析成为json对象   </span></span><br><span class=\"line\"></span><br><span class=\"line\">alert(obj.toJSONString()); <span class=\"comment\">//把json对象转换成JSON 文本</span></span><br></pre></td></tr></table></figure>\n<p>所有highchart的函数都要写在$(function(){<br>    …..<br>})<br>里。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>等价于<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//\t</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"comment\">(document)</span>.ready<span class=\"comment\">(funtion()</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>的缩写。<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">jQuery(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//最安全的写法。$作为局部变量。这样就不会和外面定义的$混淆了。</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>"},{"title":"About Git","date":"2015-07-03T02:05:36.000Z","_content":"### My first post \n-------------\n\n> recommend a website about learning git :\n[廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n","source":"_posts/kenzi-s-first-post.md","raw":"title: \"About Git\"\ndate: 2015-07-03 10:05:36\ntags:\n---\n### My first post \n-------------\n\n> recommend a website about learning git :\n[廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n","slug":"kenzi-s-first-post","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo62000rllsg1vjo4z7z","content":"<h3 id=\"My_first_post\">My first post</h3><hr>\n<blockquote>\n<p>recommend a website about learning git :<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">廖雪峰的官方网站</a></p>\n</blockquote>\n","excerpt":"","more":"<h3 id=\"My_first_post\">My first post</h3><hr>\n<blockquote>\n<p>recommend a website about learning git :<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">廖雪峰的官方网站</a></p>\n</blockquote>\n"},{"title":"http协议学习笔记","date":"2016-05-14T07:38:48.000Z","_content":"有部分内容来自[Unacceptable Browser HTTP Accept Headers (Yes, You Safari and Internet Explorer)](http://www.newmediacampaigns.com/blog/browser-rest-http-accept-headers)\n\n## 报头详解\n\n### Accept 深入理解\n属于请求头。客户端对服务端的协商。\n\n表示接受的 MIME type.\n\nMIME(Multipurpose Internet Mail Extensions) 表示多功能 Internet 邮件扩充服务。本来是用来定义邮件接受的媒体类型。后来被应用到http协议上后，内容就变得多种多样了。一共有七种\ntext,img,video,audio,multipart,application,\n其中他们还有子类。比如text/html,text/plain,img/jpeg,img/gif等。\n\n格式为：\\*/\\*;q=float 用分号分隔; 默认情况为q=1。q表示用户对某种类型的接受程度。\n\n比如：chrome 浏览器下：\n```\nGET /Protocols/rfc2616/rfc2616-sec7.html HTTP/1.1\nHost: www.w3.org\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n```\n表示:\n\n如果有text/html image/webp application/xhtml+xml这些格式最好。100%\n\n如果上面的都没有，给我xml格式。90%\n\n如果还是没有就给我啥都行。80%\n\n再比如：\n```\nAccept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,text/html;level=2;q=0.4, */*;q=0.5\n```\ntext/html;level=1         = 1\n\ntext/html                 = 0.7\n\ntext/plain                = 0.3\n\nimage/jpeg                = 0.5\n\ntext/html;level=2         = 0.4\n\ntext/html;level=3         = 0.7\n\n我在想，请求行里的url的扩展里已经包括了资源的类型:.html,.jpeg等，为什么还要通过accept告诉服务器自己接受什么类型的文件呢？猜想直接指明类型会更快的响应请求。省的解析url里的类型。也有的不一定就能返回特定的指定类型，如果没有，也可以用其他类型代替。有一定的容错性。而且不一定url的请求就是一个指定的文件，可能只是某个文件夹。\n\n不过听说，这些服务商都不用accept：\n\n> As stated, Twitter's REST API doesn't use the Accept header for content-negotiation, they use extensions on the URL '.json' and '.xml'.\n\n> Rails disables the Accept header by default. \n\n> Frameworks can enhance performance by ignoring the Accept header and relying on '.xml'-like extensions.\n\n> As such the next release of the Recess Framework, too, will disable Accept header based content-negotiation by default.\n\n这里的twitter就是直接通过解析扩展来确定类型的。\n\n因为不同的浏览器对于某种类型的文件都有自己特定的accept定义，告诉服务器自己接受什么类型的文件。\n如：firefox浏览器对于html文件的accept是：\n> text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n\n表示\n\n> Dear host,\nI want the resource in an HTML or XHTML format. If you cannot serve me this way, I'll take it in an XML instead. If you can't even give it to me in XML, well, I'll take anything you've got!\nLove,\nFirefox\n\nie 呢，就发一大堆：\n\n> image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/x-shockwave-flash, application/msword, */*\n\n[具体不同浏览器的文件类型对应的accept形式](https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation)\n\n## content-type\n\ncontent-type不管是请求还是响应都应该有。\n\n响应中的content-type很好理解。通过请求中的accept来告知响应内容的类型。\n\n那么请求中的content-type又是什么意思呢？\n\n如果是post方法，那么空格后的那个message-body 里的格式就可以由content-type来传达。比如form。application/x-www-form-urlencoded or multipart/form-data\n\n但如果是get方法呢？为什么需要这个东西？\n\n我发现如果把响应中的content-type写成text/html 刷新时浏览器会渲染html页面。而如果把content-type写成img/jpeg，刷新chrome浏览器的时候会直接下载文件。可能这就是chrome浏览器针对http协议的一些设置。看来了解http协议这种约定俗称的规范，可以让浏览器帮助完成一些事情。\n\n## 区别\ncontent－type和accept有啥区别呢？虽然都规定了mime的类型，\n缓存机制：\n\nHTTP定义了3种缓存机制：\nl Freshness allows a response to be used without re-checking it on the origin server, and can be controlled by both the server and the client. For example, the Expires response header gives a date when the document becomes stale, and the Cache-Control: max-age directive tells the cache how many seconds the response is fresh for.\nl Validation can be used to check whether a cached response is still good after it becomes stale. For example, if the response has a Last-Modified header, a cache can make a conditional request using the If-Modified-Since header to see if it has changed.\nl Invalidation is usually a side effect of another request that passes through the cache. For example, if URL associated with a cached response subsequently gets a POST, PUT or DELETE request, the cached response will be invalidated.\n\n也就是说post发送的东西都不会被缓存，get方法发送的会被缓存哦。\n\n## 参考\n[面向站长和网站管理员的Web缓存加速指南](http://www.chedong.com/tech/cache_docs.html)\n[Hypertext Transfer Protocol -- HTTP/1.1](https://www.w3.org/Protocols/rfc2616/rfc2616.html)\n[HTTP协议详解](https://www.zybuluo.com/yangfch3/note/167490)\n[输入网址之后发生了什么](https://www.zybuluo.com/yangfch3/note/113028)","source":"_posts/http.md","raw":"title: http协议学习笔记\ndate: 2016-05-14 15:38:48\ntags: protocal\n---\n有部分内容来自[Unacceptable Browser HTTP Accept Headers (Yes, You Safari and Internet Explorer)](http://www.newmediacampaigns.com/blog/browser-rest-http-accept-headers)\n\n## 报头详解\n\n### Accept 深入理解\n属于请求头。客户端对服务端的协商。\n\n表示接受的 MIME type.\n\nMIME(Multipurpose Internet Mail Extensions) 表示多功能 Internet 邮件扩充服务。本来是用来定义邮件接受的媒体类型。后来被应用到http协议上后，内容就变得多种多样了。一共有七种\ntext,img,video,audio,multipart,application,\n其中他们还有子类。比如text/html,text/plain,img/jpeg,img/gif等。\n\n格式为：\\*/\\*;q=float 用分号分隔; 默认情况为q=1。q表示用户对某种类型的接受程度。\n\n比如：chrome 浏览器下：\n```\nGET /Protocols/rfc2616/rfc2616-sec7.html HTTP/1.1\nHost: www.w3.org\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n```\n表示:\n\n如果有text/html image/webp application/xhtml+xml这些格式最好。100%\n\n如果上面的都没有，给我xml格式。90%\n\n如果还是没有就给我啥都行。80%\n\n再比如：\n```\nAccept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,text/html;level=2;q=0.4, */*;q=0.5\n```\ntext/html;level=1         = 1\n\ntext/html                 = 0.7\n\ntext/plain                = 0.3\n\nimage/jpeg                = 0.5\n\ntext/html;level=2         = 0.4\n\ntext/html;level=3         = 0.7\n\n我在想，请求行里的url的扩展里已经包括了资源的类型:.html,.jpeg等，为什么还要通过accept告诉服务器自己接受什么类型的文件呢？猜想直接指明类型会更快的响应请求。省的解析url里的类型。也有的不一定就能返回特定的指定类型，如果没有，也可以用其他类型代替。有一定的容错性。而且不一定url的请求就是一个指定的文件，可能只是某个文件夹。\n\n不过听说，这些服务商都不用accept：\n\n> As stated, Twitter's REST API doesn't use the Accept header for content-negotiation, they use extensions on the URL '.json' and '.xml'.\n\n> Rails disables the Accept header by default. \n\n> Frameworks can enhance performance by ignoring the Accept header and relying on '.xml'-like extensions.\n\n> As such the next release of the Recess Framework, too, will disable Accept header based content-negotiation by default.\n\n这里的twitter就是直接通过解析扩展来确定类型的。\n\n因为不同的浏览器对于某种类型的文件都有自己特定的accept定义，告诉服务器自己接受什么类型的文件。\n如：firefox浏览器对于html文件的accept是：\n> text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n\n表示\n\n> Dear host,\nI want the resource in an HTML or XHTML format. If you cannot serve me this way, I'll take it in an XML instead. If you can't even give it to me in XML, well, I'll take anything you've got!\nLove,\nFirefox\n\nie 呢，就发一大堆：\n\n> image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/x-shockwave-flash, application/msword, */*\n\n[具体不同浏览器的文件类型对应的accept形式](https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation)\n\n## content-type\n\ncontent-type不管是请求还是响应都应该有。\n\n响应中的content-type很好理解。通过请求中的accept来告知响应内容的类型。\n\n那么请求中的content-type又是什么意思呢？\n\n如果是post方法，那么空格后的那个message-body 里的格式就可以由content-type来传达。比如form。application/x-www-form-urlencoded or multipart/form-data\n\n但如果是get方法呢？为什么需要这个东西？\n\n我发现如果把响应中的content-type写成text/html 刷新时浏览器会渲染html页面。而如果把content-type写成img/jpeg，刷新chrome浏览器的时候会直接下载文件。可能这就是chrome浏览器针对http协议的一些设置。看来了解http协议这种约定俗称的规范，可以让浏览器帮助完成一些事情。\n\n## 区别\ncontent－type和accept有啥区别呢？虽然都规定了mime的类型，\n缓存机制：\n\nHTTP定义了3种缓存机制：\nl Freshness allows a response to be used without re-checking it on the origin server, and can be controlled by both the server and the client. For example, the Expires response header gives a date when the document becomes stale, and the Cache-Control: max-age directive tells the cache how many seconds the response is fresh for.\nl Validation can be used to check whether a cached response is still good after it becomes stale. For example, if the response has a Last-Modified header, a cache can make a conditional request using the If-Modified-Since header to see if it has changed.\nl Invalidation is usually a side effect of another request that passes through the cache. For example, if URL associated with a cached response subsequently gets a POST, PUT or DELETE request, the cached response will be invalidated.\n\n也就是说post发送的东西都不会被缓存，get方法发送的会被缓存哦。\n\n## 参考\n[面向站长和网站管理员的Web缓存加速指南](http://www.chedong.com/tech/cache_docs.html)\n[Hypertext Transfer Protocol -- HTTP/1.1](https://www.w3.org/Protocols/rfc2616/rfc2616.html)\n[HTTP协议详解](https://www.zybuluo.com/yangfch3/note/167490)\n[输入网址之后发生了什么](https://www.zybuluo.com/yangfch3/note/113028)","slug":"http","published":1,"updated":"2016-05-20T09:46:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo63000tllsgm29oghgk","content":"<p>有部分内容来自<a href=\"http://www.newmediacampaigns.com/blog/browser-rest-http-accept-headers\" target=\"_blank\" rel=\"external\">Unacceptable Browser HTTP Accept Headers (Yes, You Safari and Internet Explorer)</a></p>\n<h2 id=\"报头详解\">报头详解</h2><h3 id=\"Accept_深入理解\">Accept 深入理解</h3><p>属于请求头。客户端对服务端的协商。</p>\n<p>表示接受的 MIME type.</p>\n<p>MIME(Multipurpose Internet Mail Extensions) 表示多功能 Internet 邮件扩充服务。本来是用来定义邮件接受的媒体类型。后来被应用到http协议上后，内容就变得多种多样了。一共有七种<br>text,img,video,audio,multipart,application,<br>其中他们还有子类。比如text/html,text/plain,img/jpeg,img/gif等。</p>\n<p>格式为：*/*;q=float 用分号分隔; 默认情况为q=1。q表示用户对某种类型的接受程度。</p>\n<p>比如：chrome 浏览器下：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET <span class=\"regexp\">/Protocols/</span>rfc2616<span class=\"regexp\">/rfc2616-sec7.html HTTP/</span><span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"string\">Host:</span> www.w3.org</span><br><span class=\"line\"><span class=\"string\">Accept:</span>text<span class=\"regexp\">/html,application/</span>xhtml+xml,application<span class=\"regexp\">/xml;q=0.9,image/</span>webp,*<span class=\"comment\">/*;q=0.8</span></span><br></pre></td></tr></table></figure></p>\n<p>表示:</p>\n<p>如果有text/html image/webp application/xhtml+xml这些格式最好。100%</p>\n<p>如果上面的都没有，给我xml格式。90%</p>\n<p>如果还是没有就给我啥都行。80%</p>\n<p>再比如：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept: <span class=\"built_in\">text</span>/*;q=<span class=\"number\">0.3</span>, <span class=\"built_in\">text</span>/html;q=<span class=\"number\">0.7</span>, <span class=\"built_in\">text</span>/html;level=<span class=\"number\">1</span>,<span class=\"built_in\">text</span>/html;level=<span class=\"number\">2</span>;q=<span class=\"number\">0.4</span>, */*;q=<span class=\"number\">0.5</span></span><br></pre></td></tr></table></figure></p>\n<p>text/html;level=1         = 1</p>\n<p>text/html                 = 0.7</p>\n<p>text/plain                = 0.3</p>\n<p>image/jpeg                = 0.5</p>\n<p>text/html;level=2         = 0.4</p>\n<p>text/html;level=3         = 0.7</p>\n<p>我在想，请求行里的url的扩展里已经包括了资源的类型:.html,.jpeg等，为什么还要通过accept告诉服务器自己接受什么类型的文件呢？猜想直接指明类型会更快的响应请求。省的解析url里的类型。也有的不一定就能返回特定的指定类型，如果没有，也可以用其他类型代替。有一定的容错性。而且不一定url的请求就是一个指定的文件，可能只是某个文件夹。</p>\n<p>不过听说，这些服务商都不用accept：</p>\n<blockquote>\n<p>As stated, Twitter’s REST API doesn’t use the Accept header for content-negotiation, they use extensions on the URL ‘.json’ and ‘.xml’.</p>\n<p>Rails disables the Accept header by default. </p>\n<p>Frameworks can enhance performance by ignoring the Accept header and relying on ‘.xml’-like extensions.</p>\n<p>As such the next release of the Recess Framework, too, will disable Accept header based content-negotiation by default.</p>\n</blockquote>\n<p>这里的twitter就是直接通过解析扩展来确定类型的。</p>\n<p>因为不同的浏览器对于某种类型的文件都有自己特定的accept定义，告诉服务器自己接受什么类型的文件。<br>如：firefox浏览器对于html文件的accept是：</p>\n<blockquote>\n<p>text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</p>\n</blockquote>\n<p>表示</p>\n<blockquote>\n<p>Dear host,<br>I want the resource in an HTML or XHTML format. If you cannot serve me this way, I’ll take it in an XML instead. If you can’t even give it to me in XML, well, I’ll take anything you’ve got!<br>Love,<br>Firefox</p>\n</blockquote>\n<p>ie 呢，就发一大堆：</p>\n<blockquote>\n<p>image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/x-shockwave-flash, application/msword, <em>/</em></p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation\" target=\"_blank\" rel=\"external\">具体不同浏览器的文件类型对应的accept形式</a></p>\n<h2 id=\"content-type\">content-type</h2><p>content-type不管是请求还是响应都应该有。</p>\n<p>响应中的content-type很好理解。通过请求中的accept来告知响应内容的类型。</p>\n<p>那么请求中的content-type又是什么意思呢？</p>\n<p>如果是post方法，那么空格后的那个message-body 里的格式就可以由content-type来传达。比如form。application/x-www-form-urlencoded or multipart/form-data</p>\n<p>但如果是get方法呢？为什么需要这个东西？</p>\n<p>我发现如果把响应中的content-type写成text/html 刷新时浏览器会渲染html页面。而如果把content-type写成img/jpeg，刷新chrome浏览器的时候会直接下载文件。可能这就是chrome浏览器针对http协议的一些设置。看来了解http协议这种约定俗称的规范，可以让浏览器帮助完成一些事情。</p>\n<h2 id=\"区别\">区别</h2><p>content－type和accept有啥区别呢？虽然都规定了mime的类型，<br>缓存机制：</p>\n<p>HTTP定义了3种缓存机制：<br>l Freshness allows a response to be used without re-checking it on the origin server, and can be controlled by both the server and the client. For example, the Expires response header gives a date when the document becomes stale, and the Cache-Control: max-age directive tells the cache how many seconds the response is fresh for.<br>l Validation can be used to check whether a cached response is still good after it becomes stale. For example, if the response has a Last-Modified header, a cache can make a conditional request using the If-Modified-Since header to see if it has changed.<br>l Invalidation is usually a side effect of another request that passes through the cache. For example, if URL associated with a cached response subsequently gets a POST, PUT or DELETE request, the cached response will be invalidated.</p>\n<p>也就是说post发送的东西都不会被缓存，get方法发送的会被缓存哦。</p>\n<h2 id=\"参考\">参考</h2><p><a href=\"http://www.chedong.com/tech/cache_docs.html\" target=\"_blank\" rel=\"external\">面向站长和网站管理员的Web缓存加速指南</a><br><a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616.html\" target=\"_blank\" rel=\"external\">Hypertext Transfer Protocol — HTTP/1.1</a><br><a href=\"https://www.zybuluo.com/yangfch3/note/167490\" target=\"_blank\" rel=\"external\">HTTP协议详解</a><br><a href=\"https://www.zybuluo.com/yangfch3/note/113028\" target=\"_blank\" rel=\"external\">输入网址之后发生了什么</a></p>\n","excerpt":"","more":"<p>有部分内容来自<a href=\"http://www.newmediacampaigns.com/blog/browser-rest-http-accept-headers\">Unacceptable Browser HTTP Accept Headers (Yes, You Safari and Internet Explorer)</a></p>\n<h2 id=\"报头详解\">报头详解</h2><h3 id=\"Accept_深入理解\">Accept 深入理解</h3><p>属于请求头。客户端对服务端的协商。</p>\n<p>表示接受的 MIME type.</p>\n<p>MIME(Multipurpose Internet Mail Extensions) 表示多功能 Internet 邮件扩充服务。本来是用来定义邮件接受的媒体类型。后来被应用到http协议上后，内容就变得多种多样了。一共有七种<br>text,img,video,audio,multipart,application,<br>其中他们还有子类。比如text/html,text/plain,img/jpeg,img/gif等。</p>\n<p>格式为：*/*;q=float 用分号分隔; 默认情况为q=1。q表示用户对某种类型的接受程度。</p>\n<p>比如：chrome 浏览器下：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET <span class=\"regexp\">/Protocols/</span>rfc2616<span class=\"regexp\">/rfc2616-sec7.html HTTP/</span><span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"string\">Host:</span> www.w3.org</span><br><span class=\"line\"><span class=\"string\">Accept:</span>text<span class=\"regexp\">/html,application/</span>xhtml+xml,application<span class=\"regexp\">/xml;q=0.9,image/</span>webp,*<span class=\"comment\">/*;q=0.8</span></span><br></pre></td></tr></table></figure></p>\n<p>表示:</p>\n<p>如果有text/html image/webp application/xhtml+xml这些格式最好。100%</p>\n<p>如果上面的都没有，给我xml格式。90%</p>\n<p>如果还是没有就给我啥都行。80%</p>\n<p>再比如：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept: <span class=\"built_in\">text</span>/*;q=<span class=\"number\">0.3</span>, <span class=\"built_in\">text</span>/html;q=<span class=\"number\">0.7</span>, <span class=\"built_in\">text</span>/html;level=<span class=\"number\">1</span>,<span class=\"built_in\">text</span>/html;level=<span class=\"number\">2</span>;q=<span class=\"number\">0.4</span>, */*;q=<span class=\"number\">0.5</span></span><br></pre></td></tr></table></figure></p>\n<p>text/html;level=1         = 1</p>\n<p>text/html                 = 0.7</p>\n<p>text/plain                = 0.3</p>\n<p>image/jpeg                = 0.5</p>\n<p>text/html;level=2         = 0.4</p>\n<p>text/html;level=3         = 0.7</p>\n<p>我在想，请求行里的url的扩展里已经包括了资源的类型:.html,.jpeg等，为什么还要通过accept告诉服务器自己接受什么类型的文件呢？猜想直接指明类型会更快的响应请求。省的解析url里的类型。也有的不一定就能返回特定的指定类型，如果没有，也可以用其他类型代替。有一定的容错性。而且不一定url的请求就是一个指定的文件，可能只是某个文件夹。</p>\n<p>不过听说，这些服务商都不用accept：</p>\n<blockquote>\n<p>As stated, Twitter’s REST API doesn’t use the Accept header for content-negotiation, they use extensions on the URL ‘.json’ and ‘.xml’.</p>\n<p>Rails disables the Accept header by default. </p>\n<p>Frameworks can enhance performance by ignoring the Accept header and relying on ‘.xml’-like extensions.</p>\n<p>As such the next release of the Recess Framework, too, will disable Accept header based content-negotiation by default.</p>\n</blockquote>\n<p>这里的twitter就是直接通过解析扩展来确定类型的。</p>\n<p>因为不同的浏览器对于某种类型的文件都有自己特定的accept定义，告诉服务器自己接受什么类型的文件。<br>如：firefox浏览器对于html文件的accept是：</p>\n<blockquote>\n<p>text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</p>\n</blockquote>\n<p>表示</p>\n<blockquote>\n<p>Dear host,<br>I want the resource in an HTML or XHTML format. If you cannot serve me this way, I’ll take it in an XML instead. If you can’t even give it to me in XML, well, I’ll take anything you’ve got!<br>Love,<br>Firefox</p>\n</blockquote>\n<p>ie 呢，就发一大堆：</p>\n<blockquote>\n<p>image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/x-shockwave-flash, application/msword, <em>/</em></p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation\">具体不同浏览器的文件类型对应的accept形式</a></p>\n<h2 id=\"content-type\">content-type</h2><p>content-type不管是请求还是响应都应该有。</p>\n<p>响应中的content-type很好理解。通过请求中的accept来告知响应内容的类型。</p>\n<p>那么请求中的content-type又是什么意思呢？</p>\n<p>如果是post方法，那么空格后的那个message-body 里的格式就可以由content-type来传达。比如form。application/x-www-form-urlencoded or multipart/form-data</p>\n<p>但如果是get方法呢？为什么需要这个东西？</p>\n<p>我发现如果把响应中的content-type写成text/html 刷新时浏览器会渲染html页面。而如果把content-type写成img/jpeg，刷新chrome浏览器的时候会直接下载文件。可能这就是chrome浏览器针对http协议的一些设置。看来了解http协议这种约定俗称的规范，可以让浏览器帮助完成一些事情。</p>\n<h2 id=\"区别\">区别</h2><p>content－type和accept有啥区别呢？虽然都规定了mime的类型，<br>缓存机制：</p>\n<p>HTTP定义了3种缓存机制：<br>l Freshness allows a response to be used without re-checking it on the origin server, and can be controlled by both the server and the client. For example, the Expires response header gives a date when the document becomes stale, and the Cache-Control: max-age directive tells the cache how many seconds the response is fresh for.<br>l Validation can be used to check whether a cached response is still good after it becomes stale. For example, if the response has a Last-Modified header, a cache can make a conditional request using the If-Modified-Since header to see if it has changed.<br>l Invalidation is usually a side effect of another request that passes through the cache. For example, if URL associated with a cached response subsequently gets a POST, PUT or DELETE request, the cached response will be invalidated.</p>\n<p>也就是说post发送的东西都不会被缓存，get方法发送的会被缓存哦。</p>\n<h2 id=\"参考\">参考</h2><p><a href=\"http://www.chedong.com/tech/cache_docs.html\">面向站长和网站管理员的Web缓存加速指南</a><br><a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616.html\">Hypertext Transfer Protocol — HTTP/1.1</a><br><a href=\"https://www.zybuluo.com/yangfch3/note/167490\">HTTP协议详解</a><br><a href=\"https://www.zybuluo.com/yangfch3/note/113028\">输入网址之后发生了什么</a></p>\n"},{"title":"min-height:100%","date":"2015-10-08T15:05:10.000Z","_content":"[quick learn form here](http://www.tutwow.com/htmlcss/quick-tip-css-100-height/)\n\n如果想要子元素页面100%\n父元素要设为height:100%,子元素设为min-height:100%.当然也可以子元素设为height:100%,不过这样高度就不会随着内容的增多而被撑高。\n\n如果父元素高度也是min-height:100%,子元素也设置为min-height:100%,子没办法是真正的满屏。\n\n<!--more-->\n\n>Incidentally, the reason why you have to specify height and min-height to html and body respectively is because neither element has any intrinsic height. **Both are height: auto by default.** It is the viewport that has 100% height, so height: 100% is taken from the viewport, then applied to body as a minimum to allow for scrolling of content.\n\n\n>using min-height: 100% on both, doesn't cause #child to expand to the full height of #father because min-height with a percentage doesn't work on #child unless #father has an explicit height.\n\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>ppt</title>\n        <style type=\"text/css\">\n            html, body {\n                height: 100%;\n                width: 100%;\n                margin: 0;\n                padding: 0;\n                background: red;\n            }\n            #father {\n                min-width: 100%;\n                min-height: 100%;\n                background: #AEEEEE;\n            }\n            #child {\n                min-height: 100%;\n                min-width: 100%;\n                background:#FFC0CB;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"father\">\n            <div id=\"child\">\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis beatae quasi ipsum nihil perferendis rerum ex sit, asperiores officia totam eveniet magnam, repellat animi unde commodi, perspiciatis obcaecati cupiditate tempora.\n            </div>\n        </div>\n    </body>\n</html>\n\n```\n![father:min-height:100%](http://7xk7fp.com1.z0.glb.clouddn.com/min-height.png)\n\n如果把father的min-height改为height:100%，child就可以满屏啦。\n\n效果如图：\n\n![father:min-height:100%](http://7xk7fp.com1.z0.glb.clouddn.com/height.png)","source":"_posts/min-height-1.md","raw":"title: min-height:100%\ndate: 2015-10-08 23:05:10\ntags: css\n---\n[quick learn form here](http://www.tutwow.com/htmlcss/quick-tip-css-100-height/)\n\n如果想要子元素页面100%\n父元素要设为height:100%,子元素设为min-height:100%.当然也可以子元素设为height:100%,不过这样高度就不会随着内容的增多而被撑高。\n\n如果父元素高度也是min-height:100%,子元素也设置为min-height:100%,子没办法是真正的满屏。\n\n<!--more-->\n\n>Incidentally, the reason why you have to specify height and min-height to html and body respectively is because neither element has any intrinsic height. **Both are height: auto by default.** It is the viewport that has 100% height, so height: 100% is taken from the viewport, then applied to body as a minimum to allow for scrolling of content.\n\n\n>using min-height: 100% on both, doesn't cause #child to expand to the full height of #father because min-height with a percentage doesn't work on #child unless #father has an explicit height.\n\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>ppt</title>\n        <style type=\"text/css\">\n            html, body {\n                height: 100%;\n                width: 100%;\n                margin: 0;\n                padding: 0;\n                background: red;\n            }\n            #father {\n                min-width: 100%;\n                min-height: 100%;\n                background: #AEEEEE;\n            }\n            #child {\n                min-height: 100%;\n                min-width: 100%;\n                background:#FFC0CB;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"father\">\n            <div id=\"child\">\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis beatae quasi ipsum nihil perferendis rerum ex sit, asperiores officia totam eveniet magnam, repellat animi unde commodi, perspiciatis obcaecati cupiditate tempora.\n            </div>\n        </div>\n    </body>\n</html>\n\n```\n![father:min-height:100%](http://7xk7fp.com1.z0.glb.clouddn.com/min-height.png)\n\n如果把father的min-height改为height:100%，child就可以满屏啦。\n\n效果如图：\n\n![father:min-height:100%](http://7xk7fp.com1.z0.glb.clouddn.com/height.png)","slug":"min-height-1","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo64000vllsg675q093h","content":"<p><a href=\"http://www.tutwow.com/htmlcss/quick-tip-css-100-height/\" target=\"_blank\" rel=\"external\">quick learn form here</a></p>\n<p>如果想要子元素页面100%<br>父元素要设为height:100%,子元素设为min-height:100%.当然也可以子元素设为height:100%,不过这样高度就不会随着内容的增多而被撑高。</p>\n<p>如果父元素高度也是min-height:100%,子元素也设置为min-height:100%,子没办法是真正的满屏。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>Incidentally, the reason why you have to specify height and min-height to html and body respectively is because neither element has any intrinsic height. <strong>Both are height: auto by default.</strong> It is the viewport that has 100% height, so height: 100% is taken from the viewport, then applied to body as a minimum to allow for scrolling of content.</p>\n<p>using min-height: 100% on both, doesn’t cause #child to expand to the full height of #father because min-height with a percentage doesn’t work on #child unless #father has an explicit height.</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ppt<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\"></span><br><span class=\"line\">            <span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"selector-id\">#father</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">min-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">min-height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">background</span>: <span class=\"number\">#AEEEEE</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"selector-id\">#child</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">min-height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">min-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">background</span>:<span class=\"number\">#FFC0CB</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"father\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span>&gt;</span></span><br><span class=\"line\">                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis beatae quasi ipsum nihil perferendis rerum ex sit, asperiores officia totam eveniet magnam, repellat animi unde commodi, perspiciatis obcaecati cupiditate tempora.</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/min-height.png\" alt=\"father:min-height:100%\"></p>\n<p>如果把father的min-height改为height:100%，child就可以满屏啦。</p>\n<p>效果如图：</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/height.png\" alt=\"father:min-height:100%\"></p>\n","excerpt":"<p><a href=\"http://www.tutwow.com/htmlcss/quick-tip-css-100-height/\">quick learn form here</a></p>\n<p>如果想要子元素页面100%<br>父元素要设为height:100%,子元素设为min-height:100%.当然也可以子元素设为height:100%,不过这样高度就不会随着内容的增多而被撑高。</p>\n<p>如果父元素高度也是min-height:100%,子元素也设置为min-height:100%,子没办法是真正的满屏。</p>","more":"<blockquote>\n<p>Incidentally, the reason why you have to specify height and min-height to html and body respectively is because neither element has any intrinsic height. <strong>Both are height: auto by default.</strong> It is the viewport that has 100% height, so height: 100% is taken from the viewport, then applied to body as a minimum to allow for scrolling of content.</p>\n<p>using min-height: 100% on both, doesn’t cause #child to expand to the full height of #father because min-height with a percentage doesn’t work on #child unless #father has an explicit height.</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ppt<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"css\"></span><br><span class=\"line\">            <span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"selector-id\">#father</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">min-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">min-height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">background</span>: <span class=\"number\">#AEEEEE</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"selector-id\">#child</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">min-height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">min-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">                <span class=\"attribute\">background</span>:<span class=\"number\">#FFC0CB</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"father\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span>&gt;</span></span><br><span class=\"line\">                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis beatae quasi ipsum nihil perferendis rerum ex sit, asperiores officia totam eveniet magnam, repellat animi unde commodi, perspiciatis obcaecati cupiditate tempora.</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/min-height.png\" alt=\"father:min-height:100%\"></p>\n<p>如果把father的min-height改为height:100%，child就可以满屏啦。</p>\n<p>效果如图：</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/height.png\" alt=\"father:min-height:100%\"></p>"},{"title":"编译APM源码基于pixhawk硬件","date":"2015-11-27T03:04:26.000Z","_content":"参考:[福利来了，关于在win7下编译pixhawk源码的教程](http://bbs.loveuav.com/thread-499-2-1.html)\n根据这个教程做下来，执行make px4-v2的时候总是提示错误:\n```\nerror:cannot determine sketchbook location - please specify on the commandline with SKETCHBOOK=<path>\n```\n出现这个错误的原因是文件路径里含有空格，把所有空格去掉了就好了。\nMINGWIN 在win中遇到空格会有误解。\n\n<!--more-->\n比如\n```\ncd E:/Program\\ Files\n```\n就是进入Program Files文件夹\n\n如果\n```\ncd E:/Program Files\n```\n他会理解成进入Program文件夹\n\n\nFrom the [MinGW \"Getting Started\" guide](http://www.mingw.org/wiki/getting_started):\n> MinGW may have problems with paths containing spaces, and if not, usually other programs used with MinGW will experience problems with such paths. Thus, we strongly recommend that you do not install MinGW in any location with spaces in the path name reference; i.e. you should avoid installing into any subdirectory of \"Program Files\" or \"My Documents\", or the like.\n\n","source":"_posts/pixhawk.md","raw":"title: 编译APM源码基于pixhawk硬件\ndate: 2015-11-27 11:04:26\ntags: pixhawk\n---\n参考:[福利来了，关于在win7下编译pixhawk源码的教程](http://bbs.loveuav.com/thread-499-2-1.html)\n根据这个教程做下来，执行make px4-v2的时候总是提示错误:\n```\nerror:cannot determine sketchbook location - please specify on the commandline with SKETCHBOOK=<path>\n```\n出现这个错误的原因是文件路径里含有空格，把所有空格去掉了就好了。\nMINGWIN 在win中遇到空格会有误解。\n\n<!--more-->\n比如\n```\ncd E:/Program\\ Files\n```\n就是进入Program Files文件夹\n\n如果\n```\ncd E:/Program Files\n```\n他会理解成进入Program文件夹\n\n\nFrom the [MinGW \"Getting Started\" guide](http://www.mingw.org/wiki/getting_started):\n> MinGW may have problems with paths containing spaces, and if not, usually other programs used with MinGW will experience problems with such paths. Thus, we strongly recommend that you do not install MinGW in any location with spaces in the path name reference; i.e. you should avoid installing into any subdirectory of \"Program Files\" or \"My Documents\", or the like.\n\n","slug":"pixhawk","published":1,"updated":"2015-12-07T08:23:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo65000yllsg2en2zf56","content":"<p>参考:<a href=\"http://bbs.loveuav.com/thread-499-2-1.html\" target=\"_blank\" rel=\"external\">福利来了，关于在win7下编译pixhawk源码的教程</a><br>根据这个教程做下来，执行make px4-v2的时候总是提示错误:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">error</span>:cannot determine sketchbook location - please specify <span class=\"keyword\">on</span> <span class=\"keyword\">the</span> commandline <span class=\"keyword\">with</span> SKETCHBOOK=&lt;path&gt;</span><br></pre></td></tr></table></figure></p>\n<p>出现这个错误的原因是文件路径里含有空格，把所有空格去掉了就好了。<br>MINGWIN 在win中遇到空格会有误解。</p>\n<a id=\"more\"></a>\n<p>比如<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"keyword\">E</span>:/<span class=\"keyword\">Program</span>\\ Files</span><br></pre></td></tr></table></figure></p>\n<p>就是进入Program Files文件夹</p>\n<p>如果<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"keyword\">E</span>:/<span class=\"keyword\">Program</span> Files</span><br></pre></td></tr></table></figure></p>\n<p>他会理解成进入Program文件夹</p>\n<p>From the <a href=\"http://www.mingw.org/wiki/getting_started\" target=\"_blank\" rel=\"external\">MinGW “Getting Started” guide</a>:</p>\n<blockquote>\n<p>MinGW may have problems with paths containing spaces, and if not, usually other programs used with MinGW will experience problems with such paths. Thus, we strongly recommend that you do not install MinGW in any location with spaces in the path name reference; i.e. you should avoid installing into any subdirectory of “Program Files” or “My Documents”, or the like.</p>\n</blockquote>\n","excerpt":"<p>参考:<a href=\"http://bbs.loveuav.com/thread-499-2-1.html\">福利来了，关于在win7下编译pixhawk源码的教程</a><br>根据这个教程做下来，执行make px4-v2的时候总是提示错误:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">error</span>:cannot determine sketchbook location - please specify <span class=\"keyword\">on</span> <span class=\"keyword\">the</span> commandline <span class=\"keyword\">with</span> SKETCHBOOK=&lt;path&gt;</span><br></pre></td></tr></table></figure></p>\n<p>出现这个错误的原因是文件路径里含有空格，把所有空格去掉了就好了。<br>MINGWIN 在win中遇到空格会有误解。</p>","more":"<p>比如<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"keyword\">E</span>:/<span class=\"keyword\">Program</span>\\ Files</span><br></pre></td></tr></table></figure></p>\n<p>就是进入Program Files文件夹</p>\n<p>如果<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"keyword\">E</span>:/<span class=\"keyword\">Program</span> Files</span><br></pre></td></tr></table></figure></p>\n<p>他会理解成进入Program文件夹</p>\n<p>From the <a href=\"http://www.mingw.org/wiki/getting_started\">MinGW “Getting Started” guide</a>:</p>\n<blockquote>\n<p>MinGW may have problems with paths containing spaces, and if not, usually other programs used with MinGW will experience problems with such paths. Thus, we strongly recommend that you do not install MinGW in any location with spaces in the path name reference; i.e. you should avoid installing into any subdirectory of “Program Files” or “My Documents”, or the like.</p>\n</blockquote>"},{"title":"nodeJsSimpleServer","date":"2016-05-21T16:25:50.000Z","_content":"","source":"_posts/nodeJsSimpleServer.md","raw":"title: nodeJsSimpleServer\ndate: 2016-05-22 00:25:50\ntags:\n---\n","slug":"nodeJsSimpleServer","published":1,"updated":"2016-05-21T16:25:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo660011llsglcw89hw3","content":"","excerpt":"","more":""},{"title":"Pixhawk log日志分析 by MissionPlanner","date":"2015-11-24T05:21:28.000Z","_content":"![](http://7xk7fp.com1.z0.glb.clouddn.com/powerOn.png)\n![](http://7xk7fp.com1.z0.glb.clouddn.com/start.png)\n从上电到开始飞行，说明等待其初始化时间，包括飞控初始化，GPS锁星，错误解除等。\n\n<!--more-->\n从CTUN:ThrIn和ThrOut的曲线可以详细看出操作手的操作过程和飞行情况。\n![](http://7xk7fp.com1.z0.glb.clouddn.com/ThrInvsThrOut.png)\n第一次第二次的自稳飞行都没有太大的问题。\n\n仔细观察高度和输入输出的油门曲线：\n![](http://7xk7fp.com1.z0.glb.clouddn.com/heightCompare.png)\n设定为定高模式起飞的时候，遥控油门上推，但是四轴油门并没有跟踪遥控油门，导致四轴飞不起来.\nA点时刻，飞机突然升到1.6米高，所以操作手快速减少了油门，飞机掉落一点，然后又稍稍加大油门，飞机油门输出开始不受控制，表现为飞机抖动，切换成自稳模式后，飞机油门重新恢复跟踪遥控油门，所以猜想原因是定高模式下油门跟踪不灵敏。\n下一个时刻的真实情况是飞机撞到了墙壁，浆被摔断。所以飞机开始失去平衡。并掉落下来。\n从加速度计的Roll的情况可以看出：\n![](http://7xk7fp.com1.z0.glb.clouddn.com/accCompare.png)\n初步分析为，定高模式的跟踪不够灵敏，或者电机导致。\n\n> 定高模式是由气压计进行测量的。高度每升高9米，气压大概降低100Pa，我们知道了海平面的气压是101325Pa和当前的气压值，就可以根据差值大概计算当前高度。\n\n> 加速度计和气压计协同定高就像陀螺仪和加速度计协同进行姿态解算一样，各有各优缺点。加速度计有静差，而且加速度计进行二次积分后数据漂移过大，但是加速度计进行积分短时间内是精准的，就像姿态解算中陀螺仪的积分短时间内是非常精准的。气压计由于测量精度有限，只能达到10cm，所以气压计输出的数据直接转化为高度的话会有几十厘米的浮动，直接用于高度控制显然是不现实的，但是气压计长时间来看，其值又是非常具有参考性的，因为它的值在真实值附近浮动。基于此，我们可以将加速度计的值进行积分后与气压计的值进行互补滤波或卡尔曼滤波，这样就能取长补短，获得较好的效果。\n\n所以加速度计的抖动可能会导致高度测量不准确，使定高模式的飞机一飞冲天。\n\n正如官网上所说：\n\n> Vibrations\nHigh vibrations cause the Copter’s accelerometer based altitude and horizontal position estimates to drift far off from reality which leads to problems with alt hold (normally rocketing into the sky) or Loiter (drifting).\n\n> 大幅度振动使得依赖于加速度计的高度和水平位置的估测不准确，会有飘逸，远离真实值，将导致定高出现问题（像火箭一样冲天）和定点出现问题（漂移）\n\n也就是官网上给出的原因是加速度计的振动。且官方给出的范围是X，Y不要超过+-3，Z轴为-15至-5.\n\n我的log：\n![](http://7xk7fp.com1.z0.glb.clouddn.com/vib.png)\n在前面的自稳飞行是正常的。即使是定高模式，也处于正常范围内。后面的大幅度抖动应该是由于撞落瞬间导致的。所以我认为我的飞机有一飞冲天的趋势的原因与加速度z轴的抖动无关。\n\n官网关于消除抖动的说明：\n\n> My overpowered copter rockets into the air can’t be brought down unless I cut the throttle\n\n> Very over powered multicopters can require so little throttle to hover that even the minimum throttle (13%) is enough for them climb. In addition, the default Rate roll/pitch gains, which are meant for weaker copter, are too high for a powerful copter and can lead to roll/pitch instability. The Copter firmware may try to compensate for this roll/pitch instability by increasing the overall throttle which can lead to the copter climbing further (Note: in this particular case Copter increasing the overall throttle is counter-productive but in a properly tuned quad it helps in cases where there is a motor failure).\n\n> The possible solutions are:\n\n> \n* add extra weight to your frame to bring the hover throttle closer to mid stick\n* reduce the THR_MIN parameter (default is 130 or 13%) to the lowest value that will still keep all motors spinning reliably\n* set the rate roll/pitch gains low (perhaps 1/2 the default) during the first flight and increase them from there. Consider using the CH6 tuning feature to allow you to tune your roll/pitch gains for the first few flights.\n\n官网关于定高说明的介绍：\n\n> 如果油門在40% ~ 60%之間，飛行器會維持當時高度。\n在油門的中間無效區之外（40%以下或60%以上），飛行器會傷聲或下降，視搖桿偏向而定。搖桿向下打到底，飛行器以2.5公尺/秒速度下降，油門向上打到頂，飛行器以2.5公尺/秒速度上升。這些速度可以由PILOT_VELZ_MAX參數調整。\n\n参数调节\n\n> Altitude Hold P值是用來把高度誤差（要求高度和實際高度的差距）換算為上升或下降速度。較高的P值會比較靈敏地維持高度，但是設得太高會使油門反應好像抽筋一樣。\n\n> Throttle Rate (通常不需要調校) 把要求的上升或下降速度換算為要求的向上或向下的加速度。\n\n> Throttle Accel PID 值把加速度誤差（要求加速度和實際加速度的誤差）換算為馬達的輸出。如果你要修改P跟I這兩個參數時應該要維持P:I為1:2 的比例(I是P的兩倍)。這些數值應該永遠不會去增加，但如果您的飛行品的動力非常大時將它們各降低50%將會反應更為良好(就是P降為0.5，I降為1.0)。\n\n\n也就是说如果从自稳时的悬停切换到定高，如果此时油门在40%~60%之间，飞行器一般就能维持现在的高度。这时他有一个死区，就是油门在40%-60%,无论如何操作，飞行器应该高度不变。\n\n但如果你自稳模式下，悬停的油门低于40%(exmple:30%)，切换到定高时，假设油门杆在30%，低于死区，所以他会猛然下降。高于60%的话，切换到定高时，假设油门杆在70%，高于死区，所以他会猛然上升。其速率由Altitude Hold P控制(待验证)。\n\n所以解决办法就是，避免用定高起飞，先用自稳飞到悬停时的那个油门（尽量调整在操作杆的40%，60%位置，如果高或者低用以下[方法](http://copter.ardupilot.com/wiki/ac_throttlemid/)调整油门中位，或者可以调整死区范围），保证悬停后，再切换定高模式。\n\n附GPS飞行路线图\n![](http://7xk7fp.com1.z0.glb.clouddn.com/Image%206.jpg)","source":"_posts/px4-analyze.md","raw":"title: Pixhawk log日志分析 by MissionPlanner\ndate: 2015-11-24 13:21:28\ntags: pixhawk\n---\n![](http://7xk7fp.com1.z0.glb.clouddn.com/powerOn.png)\n![](http://7xk7fp.com1.z0.glb.clouddn.com/start.png)\n从上电到开始飞行，说明等待其初始化时间，包括飞控初始化，GPS锁星，错误解除等。\n\n<!--more-->\n从CTUN:ThrIn和ThrOut的曲线可以详细看出操作手的操作过程和飞行情况。\n![](http://7xk7fp.com1.z0.glb.clouddn.com/ThrInvsThrOut.png)\n第一次第二次的自稳飞行都没有太大的问题。\n\n仔细观察高度和输入输出的油门曲线：\n![](http://7xk7fp.com1.z0.glb.clouddn.com/heightCompare.png)\n设定为定高模式起飞的时候，遥控油门上推，但是四轴油门并没有跟踪遥控油门，导致四轴飞不起来.\nA点时刻，飞机突然升到1.6米高，所以操作手快速减少了油门，飞机掉落一点，然后又稍稍加大油门，飞机油门输出开始不受控制，表现为飞机抖动，切换成自稳模式后，飞机油门重新恢复跟踪遥控油门，所以猜想原因是定高模式下油门跟踪不灵敏。\n下一个时刻的真实情况是飞机撞到了墙壁，浆被摔断。所以飞机开始失去平衡。并掉落下来。\n从加速度计的Roll的情况可以看出：\n![](http://7xk7fp.com1.z0.glb.clouddn.com/accCompare.png)\n初步分析为，定高模式的跟踪不够灵敏，或者电机导致。\n\n> 定高模式是由气压计进行测量的。高度每升高9米，气压大概降低100Pa，我们知道了海平面的气压是101325Pa和当前的气压值，就可以根据差值大概计算当前高度。\n\n> 加速度计和气压计协同定高就像陀螺仪和加速度计协同进行姿态解算一样，各有各优缺点。加速度计有静差，而且加速度计进行二次积分后数据漂移过大，但是加速度计进行积分短时间内是精准的，就像姿态解算中陀螺仪的积分短时间内是非常精准的。气压计由于测量精度有限，只能达到10cm，所以气压计输出的数据直接转化为高度的话会有几十厘米的浮动，直接用于高度控制显然是不现实的，但是气压计长时间来看，其值又是非常具有参考性的，因为它的值在真实值附近浮动。基于此，我们可以将加速度计的值进行积分后与气压计的值进行互补滤波或卡尔曼滤波，这样就能取长补短，获得较好的效果。\n\n所以加速度计的抖动可能会导致高度测量不准确，使定高模式的飞机一飞冲天。\n\n正如官网上所说：\n\n> Vibrations\nHigh vibrations cause the Copter’s accelerometer based altitude and horizontal position estimates to drift far off from reality which leads to problems with alt hold (normally rocketing into the sky) or Loiter (drifting).\n\n> 大幅度振动使得依赖于加速度计的高度和水平位置的估测不准确，会有飘逸，远离真实值，将导致定高出现问题（像火箭一样冲天）和定点出现问题（漂移）\n\n也就是官网上给出的原因是加速度计的振动。且官方给出的范围是X，Y不要超过+-3，Z轴为-15至-5.\n\n我的log：\n![](http://7xk7fp.com1.z0.glb.clouddn.com/vib.png)\n在前面的自稳飞行是正常的。即使是定高模式，也处于正常范围内。后面的大幅度抖动应该是由于撞落瞬间导致的。所以我认为我的飞机有一飞冲天的趋势的原因与加速度z轴的抖动无关。\n\n官网关于消除抖动的说明：\n\n> My overpowered copter rockets into the air can’t be brought down unless I cut the throttle\n\n> Very over powered multicopters can require so little throttle to hover that even the minimum throttle (13%) is enough for them climb. In addition, the default Rate roll/pitch gains, which are meant for weaker copter, are too high for a powerful copter and can lead to roll/pitch instability. The Copter firmware may try to compensate for this roll/pitch instability by increasing the overall throttle which can lead to the copter climbing further (Note: in this particular case Copter increasing the overall throttle is counter-productive but in a properly tuned quad it helps in cases where there is a motor failure).\n\n> The possible solutions are:\n\n> \n* add extra weight to your frame to bring the hover throttle closer to mid stick\n* reduce the THR_MIN parameter (default is 130 or 13%) to the lowest value that will still keep all motors spinning reliably\n* set the rate roll/pitch gains low (perhaps 1/2 the default) during the first flight and increase them from there. Consider using the CH6 tuning feature to allow you to tune your roll/pitch gains for the first few flights.\n\n官网关于定高说明的介绍：\n\n> 如果油門在40% ~ 60%之間，飛行器會維持當時高度。\n在油門的中間無效區之外（40%以下或60%以上），飛行器會傷聲或下降，視搖桿偏向而定。搖桿向下打到底，飛行器以2.5公尺/秒速度下降，油門向上打到頂，飛行器以2.5公尺/秒速度上升。這些速度可以由PILOT_VELZ_MAX參數調整。\n\n参数调节\n\n> Altitude Hold P值是用來把高度誤差（要求高度和實際高度的差距）換算為上升或下降速度。較高的P值會比較靈敏地維持高度，但是設得太高會使油門反應好像抽筋一樣。\n\n> Throttle Rate (通常不需要調校) 把要求的上升或下降速度換算為要求的向上或向下的加速度。\n\n> Throttle Accel PID 值把加速度誤差（要求加速度和實際加速度的誤差）換算為馬達的輸出。如果你要修改P跟I這兩個參數時應該要維持P:I為1:2 的比例(I是P的兩倍)。這些數值應該永遠不會去增加，但如果您的飛行品的動力非常大時將它們各降低50%將會反應更為良好(就是P降為0.5，I降為1.0)。\n\n\n也就是说如果从自稳时的悬停切换到定高，如果此时油门在40%~60%之间，飞行器一般就能维持现在的高度。这时他有一个死区，就是油门在40%-60%,无论如何操作，飞行器应该高度不变。\n\n但如果你自稳模式下，悬停的油门低于40%(exmple:30%)，切换到定高时，假设油门杆在30%，低于死区，所以他会猛然下降。高于60%的话，切换到定高时，假设油门杆在70%，高于死区，所以他会猛然上升。其速率由Altitude Hold P控制(待验证)。\n\n所以解决办法就是，避免用定高起飞，先用自稳飞到悬停时的那个油门（尽量调整在操作杆的40%，60%位置，如果高或者低用以下[方法](http://copter.ardupilot.com/wiki/ac_throttlemid/)调整油门中位，或者可以调整死区范围），保证悬停后，再切换定高模式。\n\n附GPS飞行路线图\n![](http://7xk7fp.com1.z0.glb.clouddn.com/Image%206.jpg)","slug":"px4-analyze","published":1,"updated":"2015-11-26T08:40:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo670013llsgntl1oms7","content":"<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/powerOn.png\" alt=\"\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/start.png\" alt=\"\"><br>从上电到开始飞行，说明等待其初始化时间，包括飞控初始化，GPS锁星，错误解除等。</p>\n<a id=\"more\"></a>\n<p>从CTUN:ThrIn和ThrOut的曲线可以详细看出操作手的操作过程和飞行情况。<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/ThrInvsThrOut.png\" alt=\"\"><br>第一次第二次的自稳飞行都没有太大的问题。</p>\n<p>仔细观察高度和输入输出的油门曲线：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/heightCompare.png\" alt=\"\"><br>设定为定高模式起飞的时候，遥控油门上推，但是四轴油门并没有跟踪遥控油门，导致四轴飞不起来.<br>A点时刻，飞机突然升到1.6米高，所以操作手快速减少了油门，飞机掉落一点，然后又稍稍加大油门，飞机油门输出开始不受控制，表现为飞机抖动，切换成自稳模式后，飞机油门重新恢复跟踪遥控油门，所以猜想原因是定高模式下油门跟踪不灵敏。<br>下一个时刻的真实情况是飞机撞到了墙壁，浆被摔断。所以飞机开始失去平衡。并掉落下来。<br>从加速度计的Roll的情况可以看出：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/accCompare.png\" alt=\"\"><br>初步分析为，定高模式的跟踪不够灵敏，或者电机导致。</p>\n<blockquote>\n<p>定高模式是由气压计进行测量的。高度每升高9米，气压大概降低100Pa，我们知道了海平面的气压是101325Pa和当前的气压值，就可以根据差值大概计算当前高度。</p>\n<p>加速度计和气压计协同定高就像陀螺仪和加速度计协同进行姿态解算一样，各有各优缺点。加速度计有静差，而且加速度计进行二次积分后数据漂移过大，但是加速度计进行积分短时间内是精准的，就像姿态解算中陀螺仪的积分短时间内是非常精准的。气压计由于测量精度有限，只能达到10cm，所以气压计输出的数据直接转化为高度的话会有几十厘米的浮动，直接用于高度控制显然是不现实的，但是气压计长时间来看，其值又是非常具有参考性的，因为它的值在真实值附近浮动。基于此，我们可以将加速度计的值进行积分后与气压计的值进行互补滤波或卡尔曼滤波，这样就能取长补短，获得较好的效果。</p>\n</blockquote>\n<p>所以加速度计的抖动可能会导致高度测量不准确，使定高模式的飞机一飞冲天。</p>\n<p>正如官网上所说：</p>\n<blockquote>\n<p>Vibrations<br>High vibrations cause the Copter’s accelerometer based altitude and horizontal position estimates to drift far off from reality which leads to problems with alt hold (normally rocketing into the sky) or Loiter (drifting).</p>\n<p>大幅度振动使得依赖于加速度计的高度和水平位置的估测不准确，会有飘逸，远离真实值，将导致定高出现问题（像火箭一样冲天）和定点出现问题（漂移）</p>\n</blockquote>\n<p>也就是官网上给出的原因是加速度计的振动。且官方给出的范围是X，Y不要超过+-3，Z轴为-15至-5.</p>\n<p>我的log：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/vib.png\" alt=\"\"><br>在前面的自稳飞行是正常的。即使是定高模式，也处于正常范围内。后面的大幅度抖动应该是由于撞落瞬间导致的。所以我认为我的飞机有一飞冲天的趋势的原因与加速度z轴的抖动无关。</p>\n<p>官网关于消除抖动的说明：</p>\n<blockquote>\n<p>My overpowered copter rockets into the air can’t be brought down unless I cut the throttle</p>\n<p>Very over powered multicopters can require so little throttle to hover that even the minimum throttle (13%) is enough for them climb. In addition, the default Rate roll/pitch gains, which are meant for weaker copter, are too high for a powerful copter and can lead to roll/pitch instability. The Copter firmware may try to compensate for this roll/pitch instability by increasing the overall throttle which can lead to the copter climbing further (Note: in this particular case Copter increasing the overall throttle is counter-productive but in a properly tuned quad it helps in cases where there is a motor failure).</p>\n<p>The possible solutions are:</p>\n<ul>\n<li>add extra weight to your frame to bring the hover throttle closer to mid stick</li>\n<li>reduce the THR_MIN parameter (default is 130 or 13%) to the lowest value that will still keep all motors spinning reliably</li>\n<li>set the rate roll/pitch gains low (perhaps 1/2 the default) during the first flight and increase them from there. Consider using the CH6 tuning feature to allow you to tune your roll/pitch gains for the first few flights.</li>\n</ul>\n</blockquote>\n<p>官网关于定高说明的介绍：</p>\n<blockquote>\n<p>如果油門在40% ~ 60%之間，飛行器會維持當時高度。<br>在油門的中間無效區之外（40%以下或60%以上），飛行器會傷聲或下降，視搖桿偏向而定。搖桿向下打到底，飛行器以2.5公尺/秒速度下降，油門向上打到頂，飛行器以2.5公尺/秒速度上升。這些速度可以由PILOT_VELZ_MAX參數調整。</p>\n</blockquote>\n<p>参数调节</p>\n<blockquote>\n<p>Altitude Hold P值是用來把高度誤差（要求高度和實際高度的差距）換算為上升或下降速度。較高的P值會比較靈敏地維持高度，但是設得太高會使油門反應好像抽筋一樣。</p>\n<p>Throttle Rate (通常不需要調校) 把要求的上升或下降速度換算為要求的向上或向下的加速度。</p>\n<p>Throttle Accel PID 值把加速度誤差（要求加速度和實際加速度的誤差）換算為馬達的輸出。如果你要修改P跟I這兩個參數時應該要維持P:I為1:2 的比例(I是P的兩倍)。這些數值應該永遠不會去增加，但如果您的飛行品的動力非常大時將它們各降低50%將會反應更為良好(就是P降為0.5，I降為1.0)。</p>\n</blockquote>\n<p>也就是说如果从自稳时的悬停切换到定高，如果此时油门在40%~60%之间，飞行器一般就能维持现在的高度。这时他有一个死区，就是油门在40%-60%,无论如何操作，飞行器应该高度不变。</p>\n<p>但如果你自稳模式下，悬停的油门低于40%(exmple:30%)，切换到定高时，假设油门杆在30%，低于死区，所以他会猛然下降。高于60%的话，切换到定高时，假设油门杆在70%，高于死区，所以他会猛然上升。其速率由Altitude Hold P控制(待验证)。</p>\n<p>所以解决办法就是，避免用定高起飞，先用自稳飞到悬停时的那个油门（尽量调整在操作杆的40%，60%位置，如果高或者低用以下<a href=\"http://copter.ardupilot.com/wiki/ac_throttlemid/\" target=\"_blank\" rel=\"external\">方法</a>调整油门中位，或者可以调整死区范围），保证悬停后，再切换定高模式。</p>\n<p>附GPS飞行路线图<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/Image%206.jpg\" alt=\"\"></p>\n","excerpt":"<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/powerOn.png\" alt=\"\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/start.png\" alt=\"\"><br>从上电到开始飞行，说明等待其初始化时间，包括飞控初始化，GPS锁星，错误解除等。</p>","more":"<p>从CTUN:ThrIn和ThrOut的曲线可以详细看出操作手的操作过程和飞行情况。<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/ThrInvsThrOut.png\" alt=\"\"><br>第一次第二次的自稳飞行都没有太大的问题。</p>\n<p>仔细观察高度和输入输出的油门曲线：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/heightCompare.png\" alt=\"\"><br>设定为定高模式起飞的时候，遥控油门上推，但是四轴油门并没有跟踪遥控油门，导致四轴飞不起来.<br>A点时刻，飞机突然升到1.6米高，所以操作手快速减少了油门，飞机掉落一点，然后又稍稍加大油门，飞机油门输出开始不受控制，表现为飞机抖动，切换成自稳模式后，飞机油门重新恢复跟踪遥控油门，所以猜想原因是定高模式下油门跟踪不灵敏。<br>下一个时刻的真实情况是飞机撞到了墙壁，浆被摔断。所以飞机开始失去平衡。并掉落下来。<br>从加速度计的Roll的情况可以看出：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/accCompare.png\" alt=\"\"><br>初步分析为，定高模式的跟踪不够灵敏，或者电机导致。</p>\n<blockquote>\n<p>定高模式是由气压计进行测量的。高度每升高9米，气压大概降低100Pa，我们知道了海平面的气压是101325Pa和当前的气压值，就可以根据差值大概计算当前高度。</p>\n<p>加速度计和气压计协同定高就像陀螺仪和加速度计协同进行姿态解算一样，各有各优缺点。加速度计有静差，而且加速度计进行二次积分后数据漂移过大，但是加速度计进行积分短时间内是精准的，就像姿态解算中陀螺仪的积分短时间内是非常精准的。气压计由于测量精度有限，只能达到10cm，所以气压计输出的数据直接转化为高度的话会有几十厘米的浮动，直接用于高度控制显然是不现实的，但是气压计长时间来看，其值又是非常具有参考性的，因为它的值在真实值附近浮动。基于此，我们可以将加速度计的值进行积分后与气压计的值进行互补滤波或卡尔曼滤波，这样就能取长补短，获得较好的效果。</p>\n</blockquote>\n<p>所以加速度计的抖动可能会导致高度测量不准确，使定高模式的飞机一飞冲天。</p>\n<p>正如官网上所说：</p>\n<blockquote>\n<p>Vibrations<br>High vibrations cause the Copter’s accelerometer based altitude and horizontal position estimates to drift far off from reality which leads to problems with alt hold (normally rocketing into the sky) or Loiter (drifting).</p>\n<p>大幅度振动使得依赖于加速度计的高度和水平位置的估测不准确，会有飘逸，远离真实值，将导致定高出现问题（像火箭一样冲天）和定点出现问题（漂移）</p>\n</blockquote>\n<p>也就是官网上给出的原因是加速度计的振动。且官方给出的范围是X，Y不要超过+-3，Z轴为-15至-5.</p>\n<p>我的log：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/vib.png\" alt=\"\"><br>在前面的自稳飞行是正常的。即使是定高模式，也处于正常范围内。后面的大幅度抖动应该是由于撞落瞬间导致的。所以我认为我的飞机有一飞冲天的趋势的原因与加速度z轴的抖动无关。</p>\n<p>官网关于消除抖动的说明：</p>\n<blockquote>\n<p>My overpowered copter rockets into the air can’t be brought down unless I cut the throttle</p>\n<p>Very over powered multicopters can require so little throttle to hover that even the minimum throttle (13%) is enough for them climb. In addition, the default Rate roll/pitch gains, which are meant for weaker copter, are too high for a powerful copter and can lead to roll/pitch instability. The Copter firmware may try to compensate for this roll/pitch instability by increasing the overall throttle which can lead to the copter climbing further (Note: in this particular case Copter increasing the overall throttle is counter-productive but in a properly tuned quad it helps in cases where there is a motor failure).</p>\n<p>The possible solutions are:</p>\n<ul>\n<li>add extra weight to your frame to bring the hover throttle closer to mid stick</li>\n<li>reduce the THR_MIN parameter (default is 130 or 13%) to the lowest value that will still keep all motors spinning reliably</li>\n<li>set the rate roll/pitch gains low (perhaps 1/2 the default) during the first flight and increase them from there. Consider using the CH6 tuning feature to allow you to tune your roll/pitch gains for the first few flights.</li>\n</ul>\n</blockquote>\n<p>官网关于定高说明的介绍：</p>\n<blockquote>\n<p>如果油門在40% ~ 60%之間，飛行器會維持當時高度。<br>在油門的中間無效區之外（40%以下或60%以上），飛行器會傷聲或下降，視搖桿偏向而定。搖桿向下打到底，飛行器以2.5公尺/秒速度下降，油門向上打到頂，飛行器以2.5公尺/秒速度上升。這些速度可以由PILOT_VELZ_MAX參數調整。</p>\n</blockquote>\n<p>参数调节</p>\n<blockquote>\n<p>Altitude Hold P值是用來把高度誤差（要求高度和實際高度的差距）換算為上升或下降速度。較高的P值會比較靈敏地維持高度，但是設得太高會使油門反應好像抽筋一樣。</p>\n<p>Throttle Rate (通常不需要調校) 把要求的上升或下降速度換算為要求的向上或向下的加速度。</p>\n<p>Throttle Accel PID 值把加速度誤差（要求加速度和實際加速度的誤差）換算為馬達的輸出。如果你要修改P跟I這兩個參數時應該要維持P:I為1:2 的比例(I是P的兩倍)。這些數值應該永遠不會去增加，但如果您的飛行品的動力非常大時將它們各降低50%將會反應更為良好(就是P降為0.5，I降為1.0)。</p>\n</blockquote>\n<p>也就是说如果从自稳时的悬停切换到定高，如果此时油门在40%~60%之间，飞行器一般就能维持现在的高度。这时他有一个死区，就是油门在40%-60%,无论如何操作，飞行器应该高度不变。</p>\n<p>但如果你自稳模式下，悬停的油门低于40%(exmple:30%)，切换到定高时，假设油门杆在30%，低于死区，所以他会猛然下降。高于60%的话，切换到定高时，假设油门杆在70%，高于死区，所以他会猛然上升。其速率由Altitude Hold P控制(待验证)。</p>\n<p>所以解决办法就是，避免用定高起飞，先用自稳飞到悬停时的那个油门（尽量调整在操作杆的40%，60%位置，如果高或者低用以下<a href=\"http://copter.ardupilot.com/wiki/ac_throttlemid/\">方法</a>调整油门中位，或者可以调整死区范围），保证悬停后，再切换定高模式。</p>\n<p>附GPS飞行路线图<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/Image%206.jpg\" alt=\"\"></p>"},{"title":"px4 matlab package","date":"2015-12-07T03:52:45.000Z","_content":"[Pixhawk PX4 Support from Embedded Coder](http://cn.mathworks.com/hardware-support/pixhawk.html)\n这个安装包貌似只支持matlab 2014b 或者 2015a 64位\n\n* 先安装matlab 2014b 或者 2015a 64位\n\n* 下载px4 toolchain \n\n> 因为这个package会对toolchain做一些修改。所以在安装这个matlab前要先装好toolchain\n\n* 安装这个包\n\n<!--more-->\n然后你的simulink里会出现![](http://7xk7fp.com1.z0.glb.clouddn.com/simulink.png)\n\n详细教程下载[官方文档](http://www.mathworks.com/hardware-support/files/dds-blockset-support-package-user-guide.pdf)\n\n使用之前应该要有源码。并且应该被初次编译过。\n\n可以从git上直接clone：[Firmware](https://github.com/PX4)\n\n也可以直接从PX4 Toolchain里有一个选项：PX4 Software Download\n\n点击这个后他会自动帮你从Github上下载Firmware Bootloader libopencm3三个文件夹到你安装PX4 Toolchain(比如D:/PX4)的路径里。\n\n下载完成后要用PX4 Console进行编译\n\n```\nmake archives\nmake all\n```\nall 目标在我上一篇的makefile解析里有。可以看出分别都是那些任务\n第一次编译要久一点。\n\n","source":"_posts/px4-matlab-package.md","raw":"title: px4 matlab package\ndate: 2015-12-07 11:52:45\ntags: pixhawk\n---\n[Pixhawk PX4 Support from Embedded Coder](http://cn.mathworks.com/hardware-support/pixhawk.html)\n这个安装包貌似只支持matlab 2014b 或者 2015a 64位\n\n* 先安装matlab 2014b 或者 2015a 64位\n\n* 下载px4 toolchain \n\n> 因为这个package会对toolchain做一些修改。所以在安装这个matlab前要先装好toolchain\n\n* 安装这个包\n\n<!--more-->\n然后你的simulink里会出现![](http://7xk7fp.com1.z0.glb.clouddn.com/simulink.png)\n\n详细教程下载[官方文档](http://www.mathworks.com/hardware-support/files/dds-blockset-support-package-user-guide.pdf)\n\n使用之前应该要有源码。并且应该被初次编译过。\n\n可以从git上直接clone：[Firmware](https://github.com/PX4)\n\n也可以直接从PX4 Toolchain里有一个选项：PX4 Software Download\n\n点击这个后他会自动帮你从Github上下载Firmware Bootloader libopencm3三个文件夹到你安装PX4 Toolchain(比如D:/PX4)的路径里。\n\n下载完成后要用PX4 Console进行编译\n\n```\nmake archives\nmake all\n```\nall 目标在我上一篇的makefile解析里有。可以看出分别都是那些任务\n第一次编译要久一点。\n\n","slug":"px4-matlab-package","published":1,"updated":"2015-12-07T08:26:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo680016llsgi8d9san0","content":"<p><a href=\"http://cn.mathworks.com/hardware-support/pixhawk.html\" target=\"_blank\" rel=\"external\">Pixhawk PX4 Support from Embedded Coder</a><br>这个安装包貌似只支持matlab 2014b 或者 2015a 64位</p>\n<ul>\n<li><p>先安装matlab 2014b 或者 2015a 64位</p>\n</li>\n<li><p>下载px4 toolchain </p>\n</li>\n</ul>\n<blockquote>\n<p>因为这个package会对toolchain做一些修改。所以在安装这个matlab前要先装好toolchain</p>\n</blockquote>\n<ul>\n<li>安装这个包</li>\n</ul>\n<a id=\"more\"></a>\n<p>然后你的simulink里会出现<img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/simulink.png\" alt=\"\"></p>\n<p>详细教程下载<a href=\"http://www.mathworks.com/hardware-support/files/dds-blockset-support-package-user-guide.pdf\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p>使用之前应该要有源码。并且应该被初次编译过。</p>\n<p>可以从git上直接clone：<a href=\"https://github.com/PX4\" target=\"_blank\" rel=\"external\">Firmware</a></p>\n<p>也可以直接从PX4 Toolchain里有一个选项：PX4 Software Download</p>\n<p>点击这个后他会自动帮你从Github上下载Firmware Bootloader libopencm3三个文件夹到你安装PX4 Toolchain(比如D:/PX4)的路径里。</p>\n<p>下载完成后要用PX4 Console进行编译</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">make</span> archives</span><br><span class=\"line\"><span class=\"keyword\">make</span> <span class=\"keyword\">all</span></span><br></pre></td></tr></table></figure>\n<p>all 目标在我上一篇的makefile解析里有。可以看出分别都是那些任务<br>第一次编译要久一点。</p>\n","excerpt":"<p><a href=\"http://cn.mathworks.com/hardware-support/pixhawk.html\">Pixhawk PX4 Support from Embedded Coder</a><br>这个安装包貌似只支持matlab 2014b 或者 2015a 64位</p>\n<ul>\n<li><p>先安装matlab 2014b 或者 2015a 64位</p>\n</li>\n<li><p>下载px4 toolchain </p>\n</li>\n</ul>\n<blockquote>\n<p>因为这个package会对toolchain做一些修改。所以在安装这个matlab前要先装好toolchain</p>\n</blockquote>\n<ul>\n<li>安装这个包</li>\n</ul>","more":"<p>然后你的simulink里会出现<img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/simulink.png\" alt=\"\"></p>\n<p>详细教程下载<a href=\"http://www.mathworks.com/hardware-support/files/dds-blockset-support-package-user-guide.pdf\">官方文档</a></p>\n<p>使用之前应该要有源码。并且应该被初次编译过。</p>\n<p>可以从git上直接clone：<a href=\"https://github.com/PX4\">Firmware</a></p>\n<p>也可以直接从PX4 Toolchain里有一个选项：PX4 Software Download</p>\n<p>点击这个后他会自动帮你从Github上下载Firmware Bootloader libopencm3三个文件夹到你安装PX4 Toolchain(比如D:/PX4)的路径里。</p>\n<p>下载完成后要用PX4 Console进行编译</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">make</span> archives</span><br><span class=\"line\"><span class=\"keyword\">make</span> <span class=\"keyword\">all</span></span><br></pre></td></tr></table></figure>\n<p>all 目标在我上一篇的makefile解析里有。可以看出分别都是那些任务<br>第一次编译要久一点。</p>"},{"title":"初探promise","date":"2016-05-08T14:37:59.000Z","_content":"## 插件\n\n今天实现了一个插件的动画，就是纸从折叠到展开的效果。主要用css3的tansition实现。js监听第一个列表rotate结束(监听transitionend事件)，然后开始第二个rotate开始，transition结束后，再开始第三个的展开。回调地狱有木有。于是学了一下promise规范。发现es6已经有了原生的方法。就没有用库。看了回调地狱的官网(居然有官网)，感觉概念清晰了很多。按照里面的方法重构了代码。看起来清晰多了。\n\n<!--more-->\n\n```\nfunction folderPaper() {\n    var otherLi = document.querySelectorAll('.colorBtnList li:nth-child(n+2)');\n\n    function animation1() {\n        var animate = new Promise(function(resolve, reject) {\n            otherLi[0].style.display = \"block\";\n            window.setTimeout(function() {\n                // this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work\n                otherLi[0].setAttribute(\"id\", \"display0deg\");\n                otherLi[0].addEventListener(\"transitionend\", function() {\n                    resolve(0);\n                });\n            }, 100);\n\n        });\n        return animate\n    }\n\n    function animation2() {\n        var animate = new Promise(function(resolve, reject) {\n            otherLi[1].style.display = \"block\";\n            window.setTimeout(function() {\n                // this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work\n                otherLi[1].setAttribute(\"id\", \"display0deg\");\n                otherLi[1].addEventListener(\"transitionend\", function() {\n                    resolve(1);\n                });\n            }, 5);\n\n        });\n        return animate\n    }\n\n    function animation3() {\n        var animate = new Promise(function(resolve, reject) {\n            otherLi[2].style.display = \"block\";\n            window.setTimeout(function() {\n                // this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work\n                otherLi[2].setAttribute(\"id\", \"display0deg\");\n                otherLi[2].addEventListener(\"transitionend\", function() {\n                    resolve(2);\n                });\n            }, 5);\n\n        });\n        return animate\n    }\n\n    animation1().then(animation2).then(animation3);\n    // Promise.all([animation1(0), animation1(1), animation1(2)]);\n}\n\n```\n不过你应该也发现代码有一堆重复的部分。\n于是我继续重构\n```\nfunction folderPaper() {\n    var otherLi = document.querySelectorAll('.colorBtnList li:nth-child(n+2)');\n\n    function animation(index) {\n        var animate = new Promise(function(resolve, reject) {\n            otherLi[index].style.display = \"block\";\n            window.setTimeout(function() {\n                // this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work\n                otherLi[index].setAttribute(\"id\", \"display0deg\");\n                otherLi[index].addEventListener(\"transitionend\", function() {\n                    console.log(\"over\");\n                    //关键\n                    resolve(index+1);\n                });\n            }, 100);\n\n        });\n        return animate\n    }\n\n    animation(0).then(animation).then(animation)\n\n}\n\n```\n清晰多了有木有。\n\n后来我尝试了promise.all方法，结果发现promise.all不能一个接一个，而是同时执行的。仍需探索。后续补充。\n\n## 参考\n[javascript异步编程原理](http://www.cnblogs.com/hustskyking/p/javascript-asynchronous-programming.html)\n[异步编程：When.js快速上手](https://imququ.com/post/promises-when-js.html)\n[Callback Hell](http://callbackhell.com/)\n[Javascript Promise 迷你书](http://liubin.org/promises-book/#introduction)","source":"_posts/promise.md","raw":"title: 初探promise\ndate: 2016-05-08 22:37:59\ntags: Javascript\n---\n## 插件\n\n今天实现了一个插件的动画，就是纸从折叠到展开的效果。主要用css3的tansition实现。js监听第一个列表rotate结束(监听transitionend事件)，然后开始第二个rotate开始，transition结束后，再开始第三个的展开。回调地狱有木有。于是学了一下promise规范。发现es6已经有了原生的方法。就没有用库。看了回调地狱的官网(居然有官网)，感觉概念清晰了很多。按照里面的方法重构了代码。看起来清晰多了。\n\n<!--more-->\n\n```\nfunction folderPaper() {\n    var otherLi = document.querySelectorAll('.colorBtnList li:nth-child(n+2)');\n\n    function animation1() {\n        var animate = new Promise(function(resolve, reject) {\n            otherLi[0].style.display = \"block\";\n            window.setTimeout(function() {\n                // this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work\n                otherLi[0].setAttribute(\"id\", \"display0deg\");\n                otherLi[0].addEventListener(\"transitionend\", function() {\n                    resolve(0);\n                });\n            }, 100);\n\n        });\n        return animate\n    }\n\n    function animation2() {\n        var animate = new Promise(function(resolve, reject) {\n            otherLi[1].style.display = \"block\";\n            window.setTimeout(function() {\n                // this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work\n                otherLi[1].setAttribute(\"id\", \"display0deg\");\n                otherLi[1].addEventListener(\"transitionend\", function() {\n                    resolve(1);\n                });\n            }, 5);\n\n        });\n        return animate\n    }\n\n    function animation3() {\n        var animate = new Promise(function(resolve, reject) {\n            otherLi[2].style.display = \"block\";\n            window.setTimeout(function() {\n                // this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work\n                otherLi[2].setAttribute(\"id\", \"display0deg\");\n                otherLi[2].addEventListener(\"transitionend\", function() {\n                    resolve(2);\n                });\n            }, 5);\n\n        });\n        return animate\n    }\n\n    animation1().then(animation2).then(animation3);\n    // Promise.all([animation1(0), animation1(1), animation1(2)]);\n}\n\n```\n不过你应该也发现代码有一堆重复的部分。\n于是我继续重构\n```\nfunction folderPaper() {\n    var otherLi = document.querySelectorAll('.colorBtnList li:nth-child(n+2)');\n\n    function animation(index) {\n        var animate = new Promise(function(resolve, reject) {\n            otherLi[index].style.display = \"block\";\n            window.setTimeout(function() {\n                // this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work\n                otherLi[index].setAttribute(\"id\", \"display0deg\");\n                otherLi[index].addEventListener(\"transitionend\", function() {\n                    console.log(\"over\");\n                    //关键\n                    resolve(index+1);\n                });\n            }, 100);\n\n        });\n        return animate\n    }\n\n    animation(0).then(animation).then(animation)\n\n}\n\n```\n清晰多了有木有。\n\n后来我尝试了promise.all方法，结果发现promise.all不能一个接一个，而是同时执行的。仍需探索。后续补充。\n\n## 参考\n[javascript异步编程原理](http://www.cnblogs.com/hustskyking/p/javascript-asynchronous-programming.html)\n[异步编程：When.js快速上手](https://imququ.com/post/promises-when-js.html)\n[Callback Hell](http://callbackhell.com/)\n[Javascript Promise 迷你书](http://liubin.org/promises-book/#introduction)","slug":"promise","published":1,"updated":"2016-05-09T11:39:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo690018llsg1lhvdljm","content":"<h2 id=\"插件\">插件</h2><p>今天实现了一个插件的动画，就是纸从折叠到展开的效果。主要用css3的tansition实现。js监听第一个列表rotate结束(监听transitionend事件)，然后开始第二个rotate开始，transition结束后，再开始第三个的展开。回调地狱有木有。于是学了一下promise规范。发现es6已经有了原生的方法。就没有用库。看了回调地狱的官网(居然有官网)，感觉概念清晰了很多。按照里面的方法重构了代码。看起来清晰多了。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">folderPaper</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> otherLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.colorBtnList li:nth-child(n+2)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animation1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            otherLi[<span class=\"number\">0</span>].style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work</span></span><br><span class=\"line\">                otherLi[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"display0deg\"</span>);</span><br><span class=\"line\">                otherLi[<span class=\"number\">0</span>].addEventListener(<span class=\"string\">\"transitionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animation2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            otherLi[<span class=\"number\">1</span>].style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work</span></span><br><span class=\"line\">                otherLi[<span class=\"number\">1</span>].setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"display0deg\"</span>);</span><br><span class=\"line\">                otherLi[<span class=\"number\">1</span>].addEventListener(<span class=\"string\">\"transitionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animation3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            otherLi[<span class=\"number\">2</span>].style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work</span></span><br><span class=\"line\">                otherLi[<span class=\"number\">2</span>].setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"display0deg\"</span>);</span><br><span class=\"line\">                otherLi[<span class=\"number\">2</span>].addEventListener(<span class=\"string\">\"transitionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    animation1().then(animation2).then(animation3);</span><br><span class=\"line\">    <span class=\"comment\">// Promise.all([animation1(0), animation1(1), animation1(2)]);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过你应该也发现代码有一堆重复的部分。<br>于是我继续重构<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">folderPaper</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> otherLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.colorBtnList li:nth-child(n+2)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animation</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            otherLi[index].style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work</span></span><br><span class=\"line\">                otherLi[index].setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"display0deg\"</span>);</span><br><span class=\"line\">                otherLi[index].addEventListener(<span class=\"string\">\"transitionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"over\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//关键</span></span><br><span class=\"line\">                    resolve(index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    animation(<span class=\"number\">0</span>).then(animation).then(animation)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>清晰多了有木有。</p>\n<p>后来我尝试了promise.all方法，结果发现promise.all不能一个接一个，而是同时执行的。仍需探索。后续补充。</p>\n<h2 id=\"参考\">参考</h2><p><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-asynchronous-programming.html\" target=\"_blank\" rel=\"external\">javascript异步编程原理</a><br><a href=\"https://imququ.com/post/promises-when-js.html\" target=\"_blank\" rel=\"external\">异步编程：When.js快速上手</a><br><a href=\"http://callbackhell.com/\" target=\"_blank\" rel=\"external\">Callback Hell</a><br><a href=\"http://liubin.org/promises-book/#introduction\" target=\"_blank\" rel=\"external\">Javascript Promise 迷你书</a></p>\n","excerpt":"<h2 id=\"插件\">插件</h2><p>今天实现了一个插件的动画，就是纸从折叠到展开的效果。主要用css3的tansition实现。js监听第一个列表rotate结束(监听transitionend事件)，然后开始第二个rotate开始，transition结束后，再开始第三个的展开。回调地狱有木有。于是学了一下promise规范。发现es6已经有了原生的方法。就没有用库。看了回调地狱的官网(居然有官网)，感觉概念清晰了很多。按照里面的方法重构了代码。看起来清晰多了。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">folderPaper</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> otherLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.colorBtnList li:nth-child(n+2)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animation1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            otherLi[<span class=\"number\">0</span>].style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work</span></span><br><span class=\"line\">                otherLi[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"display0deg\"</span>);</span><br><span class=\"line\">                otherLi[<span class=\"number\">0</span>].addEventListener(<span class=\"string\">\"transitionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animation2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            otherLi[<span class=\"number\">1</span>].style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work</span></span><br><span class=\"line\">                otherLi[<span class=\"number\">1</span>].setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"display0deg\"</span>);</span><br><span class=\"line\">                otherLi[<span class=\"number\">1</span>].addEventListener(<span class=\"string\">\"transitionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animation3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            otherLi[<span class=\"number\">2</span>].style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work</span></span><br><span class=\"line\">                otherLi[<span class=\"number\">2</span>].setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"display0deg\"</span>);</span><br><span class=\"line\">                otherLi[<span class=\"number\">2</span>].addEventListener(<span class=\"string\">\"transitionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    animation1().then(animation2).then(animation3);</span><br><span class=\"line\">    <span class=\"comment\">// Promise.all([animation1(0), animation1(1), animation1(2)]);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过你应该也发现代码有一堆重复的部分。<br>于是我继续重构<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">folderPaper</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> otherLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.colorBtnList li:nth-child(n+2)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animation</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> animate = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">            otherLi[index].style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// this has to be add id .if add class,the preority are small then css3 li:nth-child selector.transition will not work</span></span><br><span class=\"line\">                otherLi[index].setAttribute(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"display0deg\"</span>);</span><br><span class=\"line\">                otherLi[index].addEventListener(<span class=\"string\">\"transitionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"over\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//关键</span></span><br><span class=\"line\">                    resolve(index+<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    animation(<span class=\"number\">0</span>).then(animation).then(animation)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>清晰多了有木有。</p>\n<p>后来我尝试了promise.all方法，结果发现promise.all不能一个接一个，而是同时执行的。仍需探索。后续补充。</p>\n<h2 id=\"参考\">参考</h2><p><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-asynchronous-programming.html\">javascript异步编程原理</a><br><a href=\"https://imququ.com/post/promises-when-js.html\">异步编程：When.js快速上手</a><br><a href=\"http://callbackhell.com/\">Callback Hell</a><br><a href=\"http://liubin.org/promises-book/#introduction\">Javascript Promise 迷你书</a></p>"},{"ltitle":"pure-nodejs-simple-server","date":"2016-05-22T08:02:30.000Z","_content":"用nodejs的http模块和fs模块。搭建一个简单的服务器。路由规则用正则。\n\n## 创建一个服务端\n\nnode可以发送请求，也可以监听某个端口，响应http请求。\n\n创建服务端,并监听2016端口。\n\n处理get请求:get.js\n\n```\n// 引用http模块\nvar http = require(\"http\");\n \n// 引用url模块\nvar url = require(\"url\");\n \n// 引用querystring模块\nvar querystring = require(\"querystring\");\n \nhttp.createServer(function (request, response) {\n\tvar objectUrl = url.parse(request.url);\n\n\tvar objectQuery = querystring.parse(objectUrl.query);\n \n\tresponse.writeHead(200, {\n\t\t\"content-type\": \"text/html\"\n\t});\n \n\t// 输出url的各项参数\n\tresponse.write(\"<h1>objectUrl</h1>\");\n\tfor (var i in objectUrl) {\n\t\tif (typeof (objectUrl[i]) != \"function\") \n\t\t\tresponse.write(i + \"=>\" + objectUrl[i] + \"<br>\");\n\t}\n \n\t// 输出url中的query的各项参数\n\tresponse.write(\"<h1>objectQuery</h1>\");\n\tfor (var i in objectQuery) {\n\t\tresponse.write(i + \"=>\" + objectQuery[i] + \"<br>\");\n\t}\n \n\tresponse.end();\n}).listen(2016);\n```\n在本文件的目录下，运行node get.js\n\n然后浏览器输入localhost:2016回车。\n\nrequest.url表示请求的url。如：\"/\",如果你输入form。则会返回\"/form\"。\n\n比如你输了这样一串url:\n\n```\nhttp://localhost:2014/form?name=kenzi&age=20&sex=female\n\n```\n\nurl.parse这个模块会对url进行解析：\n\n```\nUrl {\nprotocol: null,\nslashes: null,\nauth: null,\nhost: null,\nport: null,\nhostname: null,\nhash: null,\nsearch: '?name=kenzi&age=20&sex=female',\nquery: 'name=kenzi&age=20&sex=female',\npathname: '/form',\npath: '/form?name=kenzi&age=20&sex=female',\nhref: '/form?name=kenzi&age=20&sex=female' \n}\n```\n\n[url模块的使用方法](http://itbilu.com/nodejs/core/NJGRdjgU.html)\n\n## 参考\n\n[Accessing the HTTP message body (e.g. POST data) in node.js](http://blog.frankgrimm.net/2010/11/howto-access-http-message-body-post-data-in-node-js/)\n\n[http://www.dotnetcurry.com/nodejs/1144/nodejs-html-static-pages-website](http://www.dotnetcurry.com/nodejs/1144/nodejs-html-static-pages-website)\n\n[https://github.com/dotnetcurry/node.js-html-static-content/blob/master/server.js](https://github.com/dotnetcurry/node.js-html-static-content/blob/master/server.js)\n\n[https://cnodejs.org/topic/51738afd6d38277306ef98ad](https://cnodejs.org/topic/51738afd6d38277306ef98ad)\n\n[mongoose quik start](http://mongoosejs.com/docs/index.html)\n## 题外话\n\n因为刚学http协议，很想自己搭建一个服务器实践一下。比如实现一个简单的点赞功能，登录功能等。而且一直想学习node所以选了node作为后端语言。如果以后有机会，也许会用其他语言试一试。网上搜索的很多例子都是nodejs＋express框架。使用express框架可能会方便很多。不过我认为还是应该从基层写起，这样才会知道为啥要使用某个框架，框架帮你处理了什么。","source":"_posts/pure-nodejs-simple-server.md","raw":"ltitle: pure-nodejs-simple-server\ndate: 2016-05-22 16:02:30\ntags: nodeJs,protocal\n---\n用nodejs的http模块和fs模块。搭建一个简单的服务器。路由规则用正则。\n\n## 创建一个服务端\n\nnode可以发送请求，也可以监听某个端口，响应http请求。\n\n创建服务端,并监听2016端口。\n\n处理get请求:get.js\n\n```\n// 引用http模块\nvar http = require(\"http\");\n \n// 引用url模块\nvar url = require(\"url\");\n \n// 引用querystring模块\nvar querystring = require(\"querystring\");\n \nhttp.createServer(function (request, response) {\n\tvar objectUrl = url.parse(request.url);\n\n\tvar objectQuery = querystring.parse(objectUrl.query);\n \n\tresponse.writeHead(200, {\n\t\t\"content-type\": \"text/html\"\n\t});\n \n\t// 输出url的各项参数\n\tresponse.write(\"<h1>objectUrl</h1>\");\n\tfor (var i in objectUrl) {\n\t\tif (typeof (objectUrl[i]) != \"function\") \n\t\t\tresponse.write(i + \"=>\" + objectUrl[i] + \"<br>\");\n\t}\n \n\t// 输出url中的query的各项参数\n\tresponse.write(\"<h1>objectQuery</h1>\");\n\tfor (var i in objectQuery) {\n\t\tresponse.write(i + \"=>\" + objectQuery[i] + \"<br>\");\n\t}\n \n\tresponse.end();\n}).listen(2016);\n```\n在本文件的目录下，运行node get.js\n\n然后浏览器输入localhost:2016回车。\n\nrequest.url表示请求的url。如：\"/\",如果你输入form。则会返回\"/form\"。\n\n比如你输了这样一串url:\n\n```\nhttp://localhost:2014/form?name=kenzi&age=20&sex=female\n\n```\n\nurl.parse这个模块会对url进行解析：\n\n```\nUrl {\nprotocol: null,\nslashes: null,\nauth: null,\nhost: null,\nport: null,\nhostname: null,\nhash: null,\nsearch: '?name=kenzi&age=20&sex=female',\nquery: 'name=kenzi&age=20&sex=female',\npathname: '/form',\npath: '/form?name=kenzi&age=20&sex=female',\nhref: '/form?name=kenzi&age=20&sex=female' \n}\n```\n\n[url模块的使用方法](http://itbilu.com/nodejs/core/NJGRdjgU.html)\n\n## 参考\n\n[Accessing the HTTP message body (e.g. POST data) in node.js](http://blog.frankgrimm.net/2010/11/howto-access-http-message-body-post-data-in-node-js/)\n\n[http://www.dotnetcurry.com/nodejs/1144/nodejs-html-static-pages-website](http://www.dotnetcurry.com/nodejs/1144/nodejs-html-static-pages-website)\n\n[https://github.com/dotnetcurry/node.js-html-static-content/blob/master/server.js](https://github.com/dotnetcurry/node.js-html-static-content/blob/master/server.js)\n\n[https://cnodejs.org/topic/51738afd6d38277306ef98ad](https://cnodejs.org/topic/51738afd6d38277306ef98ad)\n\n[mongoose quik start](http://mongoosejs.com/docs/index.html)\n## 题外话\n\n因为刚学http协议，很想自己搭建一个服务器实践一下。比如实现一个简单的点赞功能，登录功能等。而且一直想学习node所以选了node作为后端语言。如果以后有机会，也许会用其他语言试一试。网上搜索的很多例子都是nodejs＋express框架。使用express框架可能会方便很多。不过我认为还是应该从基层写起，这样才会知道为啥要使用某个框架，框架帮你处理了什么。","slug":"pure-nodejs-simple-server","published":1,"updated":"2016-05-23T16:28:36.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo6a001allsg26z9emq3","content":"<p>用nodejs的http模块和fs模块。搭建一个简单的服务器。路由规则用正则。</p>\n<h2 id=\"创建一个服务端\">创建一个服务端</h2><p>node可以发送请求，也可以监听某个端口，响应http请求。</p>\n<p>创建服务端,并监听2016端口。</p>\n<p>处理get请求:get.js</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用http模块</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 引用url模块</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">url</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 引用querystring模块</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">var</span> objectUrl = <span class=\"built_in\">url</span>.parse(request.url);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">var</span> objectQuery = querystring.parse(objectUrl.query);</span><br><span class=\"line\"> </span><br><span class=\"line\">\tresponse.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"content-type\"</span>: <span class=\"string\">\"text/html\"</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">// 输出url的各项参数</span></span><br><span class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;h1&gt;objectUrl&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> i <span class=\"keyword\">in</span> objectUrl) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (objectUrl[i]) != <span class=\"string\">\"function\"</span>) </span><br><span class=\"line\">\t\t\tresponse.write(i + <span class=\"string\">\"=&gt;\"</span> + objectUrl[i] + <span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">// 输出url中的query的各项参数</span></span><br><span class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;h1&gt;objectQuery&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> i <span class=\"keyword\">in</span> objectQuery) &#123;</span><br><span class=\"line\">\t\tresponse.write(i + <span class=\"string\">\"=&gt;\"</span> + objectQuery[i] + <span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tresponse.end();</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">2016</span>);</span><br></pre></td></tr></table></figure>\n<p>在本文件的目录下，运行node get.js</p>\n<p>然后浏览器输入localhost:2016回车。</p>\n<p>request.url表示请求的url。如：”/“,如果你输入form。则会返回”/form”。</p>\n<p>比如你输了这样一串url:</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//localhost:2014/form?name=kenzi&amp;age=20&amp;sex=female</span></span><br></pre></td></tr></table></figure>\n<p>url.parse这个模块会对url进行解析：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"decorator\">Url</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">protocol</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">slashes</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">auth</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">host</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">port</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">hostname</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">hash</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">search</span>: <span class=\"string\">'?name=kenzi&amp;age=20&amp;sex=female'</span>,</span><br><span class=\"line\"><span class=\"attribute\">query</span>: <span class=\"string\">'name=kenzi&amp;age=20&amp;sex=female'</span>,</span><br><span class=\"line\"><span class=\"attribute\">pathname</span>: <span class=\"string\">'/form'</span>,</span><br><span class=\"line\"><span class=\"attribute\">path</span>: <span class=\"string\">'/form?name=kenzi&amp;age=20&amp;sex=female'</span>,</span><br><span class=\"line\"><span class=\"attribute\">href</span>: <span class=\"string\">'/form?name=kenzi&amp;age=20&amp;sex=female'</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://itbilu.com/nodejs/core/NJGRdjgU.html\" target=\"_blank\" rel=\"external\">url模块的使用方法</a></p>\n<h2 id=\"参考\">参考</h2><p><a href=\"http://blog.frankgrimm.net/2010/11/howto-access-http-message-body-post-data-in-node-js/\" target=\"_blank\" rel=\"external\">Accessing the HTTP message body (e.g. POST data) in node.js</a></p>\n<p><a href=\"http://www.dotnetcurry.com/nodejs/1144/nodejs-html-static-pages-website\" target=\"_blank\" rel=\"external\">http://www.dotnetcurry.com/nodejs/1144/nodejs-html-static-pages-website</a></p>\n<p><a href=\"https://github.com/dotnetcurry/node.js-html-static-content/blob/master/server.js\" target=\"_blank\" rel=\"external\">https://github.com/dotnetcurry/node.js-html-static-content/blob/master/server.js</a></p>\n<p><a href=\"https://cnodejs.org/topic/51738afd6d38277306ef98ad\" target=\"_blank\" rel=\"external\">https://cnodejs.org/topic/51738afd6d38277306ef98ad</a></p>\n<p><a href=\"http://mongoosejs.com/docs/index.html\" target=\"_blank\" rel=\"external\">mongoose quik start</a></p>\n<h2 id=\"题外话\">题外话</h2><p>因为刚学http协议，很想自己搭建一个服务器实践一下。比如实现一个简单的点赞功能，登录功能等。而且一直想学习node所以选了node作为后端语言。如果以后有机会，也许会用其他语言试一试。网上搜索的很多例子都是nodejs＋express框架。使用express框架可能会方便很多。不过我认为还是应该从基层写起，这样才会知道为啥要使用某个框架，框架帮你处理了什么。</p>\n","excerpt":"","more":"<p>用nodejs的http模块和fs模块。搭建一个简单的服务器。路由规则用正则。</p>\n<h2 id=\"创建一个服务端\">创建一个服务端</h2><p>node可以发送请求，也可以监听某个端口，响应http请求。</p>\n<p>创建服务端,并监听2016端口。</p>\n<p>处理get请求:get.js</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用http模块</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 引用url模块</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">url</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 引用querystring模块</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">var</span> objectUrl = <span class=\"built_in\">url</span>.parse(request.url);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">var</span> objectQuery = querystring.parse(objectUrl.query);</span><br><span class=\"line\"> </span><br><span class=\"line\">\tresponse.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"content-type\"</span>: <span class=\"string\">\"text/html\"</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">// 输出url的各项参数</span></span><br><span class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;h1&gt;objectUrl&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> i <span class=\"keyword\">in</span> objectUrl) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (objectUrl[i]) != <span class=\"string\">\"function\"</span>) </span><br><span class=\"line\">\t\t\tresponse.write(i + <span class=\"string\">\"=&gt;\"</span> + objectUrl[i] + <span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">// 输出url中的query的各项参数</span></span><br><span class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;h1&gt;objectQuery&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> i <span class=\"keyword\">in</span> objectQuery) &#123;</span><br><span class=\"line\">\t\tresponse.write(i + <span class=\"string\">\"=&gt;\"</span> + objectQuery[i] + <span class=\"string\">\"&lt;br&gt;\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tresponse.end();</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">2016</span>);</span><br></pre></td></tr></table></figure>\n<p>在本文件的目录下，运行node get.js</p>\n<p>然后浏览器输入localhost:2016回车。</p>\n<p>request.url表示请求的url。如：”/“,如果你输入form。则会返回”/form”。</p>\n<p>比如你输了这样一串url:</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//localhost:2014/form?name=kenzi&amp;age=20&amp;sex=female</span></span><br></pre></td></tr></table></figure>\n<p>url.parse这个模块会对url进行解析：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"decorator\">Url</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">protocol</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">slashes</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">auth</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">host</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">port</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">hostname</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">hash</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"><span class=\"attribute\">search</span>: <span class=\"string\">'?name=kenzi&amp;age=20&amp;sex=female'</span>,</span><br><span class=\"line\"><span class=\"attribute\">query</span>: <span class=\"string\">'name=kenzi&amp;age=20&amp;sex=female'</span>,</span><br><span class=\"line\"><span class=\"attribute\">pathname</span>: <span class=\"string\">'/form'</span>,</span><br><span class=\"line\"><span class=\"attribute\">path</span>: <span class=\"string\">'/form?name=kenzi&amp;age=20&amp;sex=female'</span>,</span><br><span class=\"line\"><span class=\"attribute\">href</span>: <span class=\"string\">'/form?name=kenzi&amp;age=20&amp;sex=female'</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://itbilu.com/nodejs/core/NJGRdjgU.html\">url模块的使用方法</a></p>\n<h2 id=\"参考\">参考</h2><p><a href=\"http://blog.frankgrimm.net/2010/11/howto-access-http-message-body-post-data-in-node-js/\">Accessing the HTTP message body (e.g. POST data) in node.js</a></p>\n<p><a href=\"http://www.dotnetcurry.com/nodejs/1144/nodejs-html-static-pages-website\">http://www.dotnetcurry.com/nodejs/1144/nodejs-html-static-pages-website</a></p>\n<p><a href=\"https://github.com/dotnetcurry/node.js-html-static-content/blob/master/server.js\">https://github.com/dotnetcurry/node.js-html-static-content/blob/master/server.js</a></p>\n<p><a href=\"https://cnodejs.org/topic/51738afd6d38277306ef98ad\">https://cnodejs.org/topic/51738afd6d38277306ef98ad</a></p>\n<p><a href=\"http://mongoosejs.com/docs/index.html\">mongoose quik start</a></p>\n<h2 id=\"题外话\">题外话</h2><p>因为刚学http协议，很想自己搭建一个服务器实践一下。比如实现一个简单的点赞功能，登录功能等。而且一直想学习node所以选了node作为后端语言。如果以后有机会，也许会用其他语言试一试。网上搜索的很多例子都是nodejs＋express框架。使用express框架可能会方便很多。不过我认为还是应该从基层写起，这样才会知道为啥要使用某个框架，框架帮你处理了什么。</p>\n"},{"title":"转载","Stop Using \"print\" for Debugging":"A 5 Minute Quickstart Guide to Python’s logging Module","date":"2015-12-03T11:15:05.000Z","_content":"\n# [Stop Using \"print\" for Debugging: A 5 Minute Quickstart Guide to Python’s logging Module](http://inventwithpython.com/blog/2012/04/06/stop-using-print-for-debugging-a-5-minute-quickstart-guide-to-pythons-logging-module/)\n\n","source":"_posts/python-log.md","raw":"title: [转载]Stop Using \"print\" for Debugging: A 5 Minute Quickstart Guide to Python’s logging Module\ndate: 2015-12-03 19:15:05\ntags: python\n---\n\n# [Stop Using \"print\" for Debugging: A 5 Minute Quickstart Guide to Python’s logging Module](http://inventwithpython.com/blog/2012/04/06/stop-using-print-for-debugging-a-5-minute-quickstart-guide-to-pythons-logging-module/)\n\n","slug":"python-log","published":1,"updated":"2015-12-07T08:24:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo6b001dllsgytc90ctw","content":"<h1 id=\"Stop_Using_“print”_for_Debugging:_A_5_Minute_Quickstart_Guide_to_Python’s_logging_Module\"><a href=\"http://inventwithpython.com/blog/2012/04/06/stop-using-print-for-debugging-a-5-minute-quickstart-guide-to-pythons-logging-module/\" target=\"_blank\" rel=\"external\">Stop Using “print” for Debugging: A 5 Minute Quickstart Guide to Python’s logging Module</a></h1>","excerpt":"","more":"<h1 id=\"Stop_Using_“print”_for_Debugging:_A_5_Minute_Quickstart_Guide_to_Python’s_logging_Module\"><a href=\"http://inventwithpython.com/blog/2012/04/06/stop-using-print-for-debugging-a-5-minute-quickstart-guide-to-pythons-logging-module/\">Stop Using “print” for Debugging: A 5 Minute Quickstart Guide to Python’s logging Module</a></h1>"},{"title":"科研报告2","date":"2015-09-06T03:02:09.000Z","_content":"#### FLY 竹蜻蜓\n\n-------\n\n## 2015-09-05\n\n今天找出了之前的一个bug，把遥控器的NRF24L01和小飞机的NRF24L01模块调通了。\n\n问题原因：\n\n>把NRF24L01_Check()检测NRF24L01是否在位的程序放在了NRF24L01_TX_Mode()设置为发送模式之后。\n\n问题分析：\n\n<!--more-->\n* NRF24L01_Check() 代码：\n\n```\n\nu8 NRF24L01_Check(void)\n{\n    u8 buf[5] = {0XA5, 0XA5, 0XA5, 0XA5, 0XA5};\n    u8 i;\n    SPI2_SetSpeed(SPI_BaudRatePrescaler_4); \n    NRF24L01_Write_Buf(WRITE_REG_NRF + TX_ADDR, buf, 5);//这里设置发送地址为0XA5 \n    NRF24L01_Read_Buf(TX_ADDR, buf, 5); \n    for (i = 0; i < 5; i++)if (buf[i] != 0XA5)break;\n    if (i != 5)return 1; \n    return 0;        \n}\n```\n\n* NRF24L01_TX_Mode()\n\n```\nconst u8 TX_ADDRESS[TX_ADR_WIDTH] = {0x34, 0x43, 0x10, 0x10, 0x01}; //发送地址\nconst u8 RX_ADDRESS[RX_ADR_WIDTH] = {0x34, 0x43, 0x10, 0x10, 0x01}; //发送地址\nvoid NRF24L01_TX_Mode(void)\n{\n    NRF24L01_CE = 0;\n    NRF24L01_Write_Buf(WRITE_REG_NRF + TX_ADDR, (u8*)TX_ADDRESS, TX_ADR_WIDTH);//这里设置发送地址为正确的地址。只有发送地址和接收地址相配对，才能通信成功。 \n    NRF24L01_Write_Buf(WRITE_REG_NRF + RX_ADDR_P0, (u8*)RX_ADDRESS, RX_ADR_WIDTH); \n    NRF24L01_Write_Reg(WRITE_REG_NRF + EN_AA, 0x01);  \n    NRF24L01_Write_Reg(WRITE_REG_NRF + EN_RXADDR, 0x01); \n    NRF24L01_Write_Reg(WRITE_REG_NRF + SETUP_RETR, 0x1a); \n    NRF24L01_Write_Reg(WRITE_REG_NRF + RF_CH, 40);    \n    NRF24L01_Write_Reg(WRITE_REG_NRF + RF_SETUP, 0x0f); \n    NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x0e); \n    NRF24L01_CE = 1; \n}\n```\n\n* 正确的主函数\n\n```\n    while (NRF24L01_Check())//如果这句放在设置发送模式的后面，就会把用来测试的发送地址设为真正的发送地址，覆盖掉正确的发送地址。从而导致通信失败。    \n    {\n        LED2_ON;\n        LED1_OFF;\n        printf(\"no\");\n    }\n    NRF24L01_TX_Mode();\n```\n## 2015-09-08\n\n今天遭遇了一个神奇的bug：\n\n一个简单的按键扫描程序，就俩键。\n\n逻辑是：\n\n```\nu8 key_scan(void)\n{\n    if(有键按下：按键1按下||按键2按下)\n    {\n        if(按键1按下)\n            return 1;\n        else if(按键2按下)\n            return 2;\n    }\n    else//无键按下\n        return 0;\n}\n```\n\n在主程序中：\n\n```\nkey = key_scan();\nif(key == 1)\n{\n    do a;\n}\nif(key == 2)\n{\n    do b;\n}\n```\n\n表面上看没错误，实际有一个很明显的漏洞：当if……else if…… 不包括所有的条件在内，也就是说有可能会出现条件不符合if(……），也不符合else if(……）的情况，这时候函数就不知道该返回什么值了。就隐藏了一个潜在的无用返回值，很有可能影响正常的程序。比如这个无用返回值是1，这样主程序会误认为按下了按键1，执行了a。\n\n事实也确实是如此：\n![warning](http://7xk7fp.com1.z0.glb.clouddn.com/warning.png)\n它有一个无返回值的警告。然而我没在意，但程序运行时出现这样的情况：\n\n实例描述：\n按键扫描函数：\n```\nu8 KEY_scan(void)\n{\n    if(MODE_KEY==0||FUN_KEY==0)\n    {\n        delay_ms(10);\n        if(MODE_KEY==0)\n            return 1;\n        else if(FUN_KEY==0)\n            return 2;\n    }\n    else \n        return 0;\n}\n```\n主函数：\n```\n#define MODE_KEY_DOWN 1\n#define FUN_KEY_DOWN 2\n\nwhile(1)\n    {\n        key = KEY_scan();\n\n        if(key>0)\n        {\n            if (key==MODE_KEY_DOWN)//按下MODE键\n            {\n                printf(\"MODE_KEY\\n\");//打印MODE_KEY\n                key=0;\n            }\n            else if (key==FUN_KEY_DOWN)//按下FUN键\n            {\n                printf(\"FUN_KEY\\n\");//打印FUN_KEY\n                key=0;\n            }\n        }\n    }\n```\n\n\n![end1](http://7xk7fp.com1.z0.glb.clouddn.com/elseif.png)\n> 运行结果：\n>当我按下FUN键后，会莫名出现一个MODE键按下的对应打印。\n>debug发现，当按下FUN键后，key值变为2，当松开的一瞬间，突然有一个key=1的值出现，导致程序执行了打印MODE_KEY，但是程序并没有执行到if(MODE_KEY==0)这句判断语句内，但还是返回了一个1值。这个就是垃圾返回值。\n\n把程序修改成了:\n```\nu8 KEY_scan(void)\n{\n    static u8 key_up = 0;   \n    if(MODE_KEY==0||FUN_KEY==0)\n    {       \n        delay_ms(10);\n        \n        if(MODE_KEY==0)\n            return 1;\n        else if(FUN_KEY==0)\n            return 2;\n        else //补全了情况\n            return 3;\n    }\n    else \n        return 0;\n}\n```\n后运行正常，也没有警告。\n\n经过右上角男士提点：尽量少用else。程序修改成如下：\n```\nu8 KEY_scan(void)\n{\n    if(MODE_KEY==0||FUN_KEY==0)\n    {\n        delay_ms(100);\n        if(MODE_KEY==0)\n            return 1;\n        if(FUN_KEY==0)\n            return 2;\n    }\n    return 0;\n}\n```\n也没啥问题。\n\n## 2015-09-15\n\nNRF24L01莫名其妙的又不通信了。痛心啊。还以为是硬件问题。因为软件都是复制的啊（PS：好像一直都是我找不出bug的理由^0^）\n最后发现一直精简程序，想把进程都放在中断里执行。即时间片轮转算法里的时间片。\n\n最后发现只顾着把修改发送字节却忘记了执行发送这重要的一步。\n\n```\nif (NRF24L01_TxPacket(tmp_buf) == TX_OK)\n```\n一眼看上去感觉只是一个判断发送是否完成的语句语句，但实际上发送函数也在里面。哎。脑子估计抽筋了。\n\n```\n//启动NRF24L01发送一次数据\n//txbuf:待发送数据首地址\n//返回值:发送完成状况\nu8 NRF24L01_TxPacket(u8 *txbuf)\n{\n\tu8 sta;\n\tSPI2_SetSpeed(SPI_BaudRatePrescaler_4);//spi速度为9Mhz（24L01的最大SPI时钟为10Mhz）\n\tNRF24L01_CE = 0;\n\tNRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH); //写数据到TX BUF  5个字节\n\tNRF24L01_CE = 1; //启动发送\n\twhile (NRF24L01_IRQ != 0); //等待发送完成\n\tsta = NRF24L01_Read_Reg(STATUS); //读取状态寄存器的值\n\tNRF24L01_Write_Reg(WRITE_REG_NRF + STATUS, sta); //清除TX_DS或MAX_RT中断标志\n\tif (sta & MAX_TX) //达到最大重发次数\n\t{\n\t\tNRF24L01_Write_Reg(FLUSH_TX, 0xff); //清除TX FIFO寄存器\n\t\treturn MAX_TX;\n\t}\n\tif (sta & TX_OK) //发送完成\n\t{\n\t\treturn TX_OK;\n\t}\n\treturn 0xff;//其他原因发送失败\n}\n```\n","source":"_posts/report-2015-09-06.md","raw":"title: 科研报告2\ndate: 2015-09-06 11:02:09\ntags: 科研\n---\n#### FLY 竹蜻蜓\n\n-------\n\n## 2015-09-05\n\n今天找出了之前的一个bug，把遥控器的NRF24L01和小飞机的NRF24L01模块调通了。\n\n问题原因：\n\n>把NRF24L01_Check()检测NRF24L01是否在位的程序放在了NRF24L01_TX_Mode()设置为发送模式之后。\n\n问题分析：\n\n<!--more-->\n* NRF24L01_Check() 代码：\n\n```\n\nu8 NRF24L01_Check(void)\n{\n    u8 buf[5] = {0XA5, 0XA5, 0XA5, 0XA5, 0XA5};\n    u8 i;\n    SPI2_SetSpeed(SPI_BaudRatePrescaler_4); \n    NRF24L01_Write_Buf(WRITE_REG_NRF + TX_ADDR, buf, 5);//这里设置发送地址为0XA5 \n    NRF24L01_Read_Buf(TX_ADDR, buf, 5); \n    for (i = 0; i < 5; i++)if (buf[i] != 0XA5)break;\n    if (i != 5)return 1; \n    return 0;        \n}\n```\n\n* NRF24L01_TX_Mode()\n\n```\nconst u8 TX_ADDRESS[TX_ADR_WIDTH] = {0x34, 0x43, 0x10, 0x10, 0x01}; //发送地址\nconst u8 RX_ADDRESS[RX_ADR_WIDTH] = {0x34, 0x43, 0x10, 0x10, 0x01}; //发送地址\nvoid NRF24L01_TX_Mode(void)\n{\n    NRF24L01_CE = 0;\n    NRF24L01_Write_Buf(WRITE_REG_NRF + TX_ADDR, (u8*)TX_ADDRESS, TX_ADR_WIDTH);//这里设置发送地址为正确的地址。只有发送地址和接收地址相配对，才能通信成功。 \n    NRF24L01_Write_Buf(WRITE_REG_NRF + RX_ADDR_P0, (u8*)RX_ADDRESS, RX_ADR_WIDTH); \n    NRF24L01_Write_Reg(WRITE_REG_NRF + EN_AA, 0x01);  \n    NRF24L01_Write_Reg(WRITE_REG_NRF + EN_RXADDR, 0x01); \n    NRF24L01_Write_Reg(WRITE_REG_NRF + SETUP_RETR, 0x1a); \n    NRF24L01_Write_Reg(WRITE_REG_NRF + RF_CH, 40);    \n    NRF24L01_Write_Reg(WRITE_REG_NRF + RF_SETUP, 0x0f); \n    NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x0e); \n    NRF24L01_CE = 1; \n}\n```\n\n* 正确的主函数\n\n```\n    while (NRF24L01_Check())//如果这句放在设置发送模式的后面，就会把用来测试的发送地址设为真正的发送地址，覆盖掉正确的发送地址。从而导致通信失败。    \n    {\n        LED2_ON;\n        LED1_OFF;\n        printf(\"no\");\n    }\n    NRF24L01_TX_Mode();\n```\n## 2015-09-08\n\n今天遭遇了一个神奇的bug：\n\n一个简单的按键扫描程序，就俩键。\n\n逻辑是：\n\n```\nu8 key_scan(void)\n{\n    if(有键按下：按键1按下||按键2按下)\n    {\n        if(按键1按下)\n            return 1;\n        else if(按键2按下)\n            return 2;\n    }\n    else//无键按下\n        return 0;\n}\n```\n\n在主程序中：\n\n```\nkey = key_scan();\nif(key == 1)\n{\n    do a;\n}\nif(key == 2)\n{\n    do b;\n}\n```\n\n表面上看没错误，实际有一个很明显的漏洞：当if……else if…… 不包括所有的条件在内，也就是说有可能会出现条件不符合if(……），也不符合else if(……）的情况，这时候函数就不知道该返回什么值了。就隐藏了一个潜在的无用返回值，很有可能影响正常的程序。比如这个无用返回值是1，这样主程序会误认为按下了按键1，执行了a。\n\n事实也确实是如此：\n![warning](http://7xk7fp.com1.z0.glb.clouddn.com/warning.png)\n它有一个无返回值的警告。然而我没在意，但程序运行时出现这样的情况：\n\n实例描述：\n按键扫描函数：\n```\nu8 KEY_scan(void)\n{\n    if(MODE_KEY==0||FUN_KEY==0)\n    {\n        delay_ms(10);\n        if(MODE_KEY==0)\n            return 1;\n        else if(FUN_KEY==0)\n            return 2;\n    }\n    else \n        return 0;\n}\n```\n主函数：\n```\n#define MODE_KEY_DOWN 1\n#define FUN_KEY_DOWN 2\n\nwhile(1)\n    {\n        key = KEY_scan();\n\n        if(key>0)\n        {\n            if (key==MODE_KEY_DOWN)//按下MODE键\n            {\n                printf(\"MODE_KEY\\n\");//打印MODE_KEY\n                key=0;\n            }\n            else if (key==FUN_KEY_DOWN)//按下FUN键\n            {\n                printf(\"FUN_KEY\\n\");//打印FUN_KEY\n                key=0;\n            }\n        }\n    }\n```\n\n\n![end1](http://7xk7fp.com1.z0.glb.clouddn.com/elseif.png)\n> 运行结果：\n>当我按下FUN键后，会莫名出现一个MODE键按下的对应打印。\n>debug发现，当按下FUN键后，key值变为2，当松开的一瞬间，突然有一个key=1的值出现，导致程序执行了打印MODE_KEY，但是程序并没有执行到if(MODE_KEY==0)这句判断语句内，但还是返回了一个1值。这个就是垃圾返回值。\n\n把程序修改成了:\n```\nu8 KEY_scan(void)\n{\n    static u8 key_up = 0;   \n    if(MODE_KEY==0||FUN_KEY==0)\n    {       \n        delay_ms(10);\n        \n        if(MODE_KEY==0)\n            return 1;\n        else if(FUN_KEY==0)\n            return 2;\n        else //补全了情况\n            return 3;\n    }\n    else \n        return 0;\n}\n```\n后运行正常，也没有警告。\n\n经过右上角男士提点：尽量少用else。程序修改成如下：\n```\nu8 KEY_scan(void)\n{\n    if(MODE_KEY==0||FUN_KEY==0)\n    {\n        delay_ms(100);\n        if(MODE_KEY==0)\n            return 1;\n        if(FUN_KEY==0)\n            return 2;\n    }\n    return 0;\n}\n```\n也没啥问题。\n\n## 2015-09-15\n\nNRF24L01莫名其妙的又不通信了。痛心啊。还以为是硬件问题。因为软件都是复制的啊（PS：好像一直都是我找不出bug的理由^0^）\n最后发现一直精简程序，想把进程都放在中断里执行。即时间片轮转算法里的时间片。\n\n最后发现只顾着把修改发送字节却忘记了执行发送这重要的一步。\n\n```\nif (NRF24L01_TxPacket(tmp_buf) == TX_OK)\n```\n一眼看上去感觉只是一个判断发送是否完成的语句语句，但实际上发送函数也在里面。哎。脑子估计抽筋了。\n\n```\n//启动NRF24L01发送一次数据\n//txbuf:待发送数据首地址\n//返回值:发送完成状况\nu8 NRF24L01_TxPacket(u8 *txbuf)\n{\n\tu8 sta;\n\tSPI2_SetSpeed(SPI_BaudRatePrescaler_4);//spi速度为9Mhz（24L01的最大SPI时钟为10Mhz）\n\tNRF24L01_CE = 0;\n\tNRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH); //写数据到TX BUF  5个字节\n\tNRF24L01_CE = 1; //启动发送\n\twhile (NRF24L01_IRQ != 0); //等待发送完成\n\tsta = NRF24L01_Read_Reg(STATUS); //读取状态寄存器的值\n\tNRF24L01_Write_Reg(WRITE_REG_NRF + STATUS, sta); //清除TX_DS或MAX_RT中断标志\n\tif (sta & MAX_TX) //达到最大重发次数\n\t{\n\t\tNRF24L01_Write_Reg(FLUSH_TX, 0xff); //清除TX FIFO寄存器\n\t\treturn MAX_TX;\n\t}\n\tif (sta & TX_OK) //发送完成\n\t{\n\t\treturn TX_OK;\n\t}\n\treturn 0xff;//其他原因发送失败\n}\n```\n","slug":"report-2015-09-06","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo6c001fllsgo4a0nhet","content":"<h4 id=\"FLY_竹蜻蜓\">FLY 竹蜻蜓</h4><hr>\n<h2 id=\"2015-09-05\">2015-09-05</h2><p>今天找出了之前的一个bug，把遥控器的NRF24L01和小飞机的NRF24L01模块调通了。</p>\n<p>问题原因：</p>\n<blockquote>\n<p>把NRF24L01_Check()检测NRF24L01是否在位的程序放在了NRF24L01_TX_Mode()设置为发送模式之后。</p>\n</blockquote>\n<p>问题分析：</p>\n<a id=\"more\"></a>\n<ul>\n<li>NRF24L01_Check() 代码：</li>\n</ul>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">u8 NRF24L01_Check(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    u8 buf[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>XA5, <span class=\"number\">0</span>XA5, <span class=\"number\">0</span>XA5, <span class=\"number\">0</span>XA5, <span class=\"number\">0</span>XA5&#125;<span class=\"comment\">;</span></span><br><span class=\"line\">    u8 i<span class=\"comment\">;</span></span><br><span class=\"line\">    SPI2_SetSpeed(SPI_BaudRatePrescaler_4)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Buf(WRITE_REG_NRF + TX_ADDR, buf, <span class=\"number\">5</span>)<span class=\"comment\">;//这里设置发送地址为0XA5 </span></span><br><span class=\"line\">    NRF24L01_Read_Buf(TX_ADDR, buf, <span class=\"number\">5</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span><span class=\"comment\">; i &lt; 5; i++)if (buf[i] != 0XA5)break;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i != <span class=\"number\">5</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">; </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;        </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NRF24L01_TX_Mode()</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const u8 TX_ADDRESS[TX_ADR_WIDTH] = &#123;<span class=\"number\">0x34</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x01</span>&#125;<span class=\"comment\">; //发送地址</span></span><br><span class=\"line\">const u8 RX_ADDRESS[RX_ADR_WIDTH] = &#123;<span class=\"number\">0x34</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x01</span>&#125;<span class=\"comment\">; //发送地址</span></span><br><span class=\"line\">void NRF24L01_TX_Mode(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NRF24L01_CE = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    NRF24L01_Write_Buf(WRITE_REG_NRF + TX_ADDR, (u8*)TX_ADDRESS, TX_ADR_WIDTH)<span class=\"comment\">;//这里设置发送地址为正确的地址。只有发送地址和接收地址相配对，才能通信成功。 </span></span><br><span class=\"line\">    NRF24L01_Write_Buf(WRITE_REG_NRF + RX_ADDR_P0, (u8*)RX_ADDRESS, RX_ADR_WIDTH)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + EN_AA, <span class=\"number\">0x01</span>)<span class=\"comment\">;  </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + EN_RXADDR, <span class=\"number\">0x01</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + SETUP_RETR, <span class=\"number\">0x1a</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + RF_CH, <span class=\"number\">40</span>)<span class=\"comment\">;    </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + RF_SETUP, <span class=\"number\">0x0f</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + <span class=\"built_in\">CONFIG</span>, <span class=\"number\">0x0e</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_CE = <span class=\"number\">1</span><span class=\"comment\">; </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>正确的主函数</li>\n</ul>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (NRF24L01_Check())<span class=\"comment\">//如果这句放在设置发送模式的后面，就会把用来测试的发送地址设为真正的发送地址，覆盖掉正确的发送地址。从而导致通信失败。    </span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LED2_ON<span class=\"comment\">;</span></span><br><span class=\"line\">    LED1_OFF<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"no\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NRF24L01_TX_Mode()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2015-09-08\">2015-09-08</h2><p>今天遭遇了一个神奇的bug：</p>\n<p>一个简单的按键扫描程序，就俩键。</p>\n<p>逻辑是：</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 key_scan(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(有键按下：按键<span class=\"number\">1</span>按下||按键<span class=\"number\">2</span>按下)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(按键<span class=\"number\">1</span>按下)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(按键<span class=\"number\">2</span>按下)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span><span class=\"comment\">//无键按下</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在主程序中：</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = key_scan()<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(key == <span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> a<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(key == <span class=\"number\">2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> b<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表面上看没错误，实际有一个很明显的漏洞：当if……else if…… 不包括所有的条件在内，也就是说有可能会出现条件不符合if(……），也不符合else if(……）的情况，这时候函数就不知道该返回什么值了。就隐藏了一个潜在的无用返回值，很有可能影响正常的程序。比如这个无用返回值是1，这样主程序会误认为按下了按键1，执行了a。</p>\n<p>事实也确实是如此：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/warning.png\" alt=\"warning\"><br>它有一个无返回值的警告。然而我没在意，但程序运行时出现这样的情况：</p>\n<p>实例描述：<br>按键扫描函数：<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 KEY_scan(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>||FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        delay_ms(<span class=\"number\">10</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主函数：<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MODE_KEY_DOWN <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FUN_KEY_DOWN <span class=\"number\">2</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        key = KEY_scan()<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key==MODE_KEY_DOWN)<span class=\"comment\">//按下MODE键</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                printf(<span class=\"string\">\"MODE_KEY\\n\"</span>)<span class=\"comment\">;//打印MODE_KEY</span></span><br><span class=\"line\">                key=<span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key==FUN_KEY_DOWN)<span class=\"comment\">//按下FUN键</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                printf(<span class=\"string\">\"FUN_KEY\\n\"</span>)<span class=\"comment\">;//打印FUN_KEY</span></span><br><span class=\"line\">                key=<span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/elseif.png\" alt=\"end1\"></p>\n<blockquote>\n<p>运行结果：<br>当我按下FUN键后，会莫名出现一个MODE键按下的对应打印。<br>debug发现，当按下FUN键后，key值变为2，当松开的一瞬间，突然有一个key=1的值出现，导致程序执行了打印MODE_KEY，但是程序并没有执行到if(MODE_KEY==0)这句判断语句内，但还是返回了一个1值。这个就是垃圾返回值。</p>\n</blockquote>\n<p>把程序修改成了:<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 KEY_scan(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    static u8 key_up = <span class=\"number\">0</span><span class=\"comment\">;   </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>||FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;       </span><br><span class=\"line\">        delay_ms(<span class=\"number\">10</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//补全了情况</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>后运行正常，也没有警告。</p>\n<p>经过右上角男士提点：尽量少用else。程序修改成如下：<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 KEY_scan(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>||FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        delay_ms(<span class=\"number\">100</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>也没啥问题。</p>\n<h2 id=\"2015-09-15\">2015-09-15</h2><p>NRF24L01莫名其妙的又不通信了。痛心啊。还以为是硬件问题。因为软件都是复制的啊（PS：好像一直都是我找不出bug的理由^0^）<br>最后发现一直精简程序，想把进程都放在中断里执行。即时间片轮转算法里的时间片。</p>\n<p>最后发现只顾着把修改发送字节却忘记了执行发送这重要的一步。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (<span class=\"name\">NRF24L01_TxPacket</span>(<span class=\"name\">tmp_buf</span>) == TX_OK)</span><br></pre></td></tr></table></figure>\n<p>一眼看上去感觉只是一个判断发送是否完成的语句语句，但实际上发送函数也在里面。哎。脑子估计抽筋了。</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动NRF24L01发送一次数据</span></span><br><span class=\"line\"><span class=\"comment\">//txbuf:待发送数据首地址</span></span><br><span class=\"line\"><span class=\"comment\">//返回值:发送完成状况</span></span><br><span class=\"line\">u8 NRF24L01_TxPacket(u8 *txbuf)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tu8 sta<span class=\"comment\">;</span></span><br><span class=\"line\">\tSPI2_SetSpeed(SPI_BaudRatePrescaler_4)<span class=\"comment\">;//spi速度为9Mhz（24L01的最大SPI时钟为10Mhz）</span></span><br><span class=\"line\">\tNRF24L01_CE = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">\tNRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH)<span class=\"comment\">; //写数据到TX BUF  5个字节</span></span><br><span class=\"line\">\tNRF24L01_CE = <span class=\"number\">1</span><span class=\"comment\">; //启动发送</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (NRF24L01_IRQ != <span class=\"number\">0</span>)<span class=\"comment\">; //等待发送完成</span></span><br><span class=\"line\">\tsta = NRF24L01_Read_Reg(STATUS)<span class=\"comment\">; //读取状态寄存器的值</span></span><br><span class=\"line\">\tNRF24L01_Write_Reg(WRITE_REG_NRF + STATUS, sta)<span class=\"comment\">; //清除TX_DS或MAX_RT中断标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sta &amp; MAX_TX) <span class=\"comment\">//达到最大重发次数</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tNRF24L01_Write_Reg(FLUSH_TX, <span class=\"number\">0</span>xff)<span class=\"comment\">; //清除TX FIFO寄存器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> MAX_TX<span class=\"comment\">;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sta &amp; TX_OK) <span class=\"comment\">//发送完成</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> TX_OK<span class=\"comment\">;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>xff<span class=\"comment\">;//其他原因发送失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<h4 id=\"FLY_竹蜻蜓\">FLY 竹蜻蜓</h4><hr>\n<h2 id=\"2015-09-05\">2015-09-05</h2><p>今天找出了之前的一个bug，把遥控器的NRF24L01和小飞机的NRF24L01模块调通了。</p>\n<p>问题原因：</p>\n<blockquote>\n<p>把NRF24L01_Check()检测NRF24L01是否在位的程序放在了NRF24L01_TX_Mode()设置为发送模式之后。</p>\n</blockquote>\n<p>问题分析：</p>","more":"<ul>\n<li>NRF24L01_Check() 代码：</li>\n</ul>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">u8 NRF24L01_Check(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    u8 buf[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>XA5, <span class=\"number\">0</span>XA5, <span class=\"number\">0</span>XA5, <span class=\"number\">0</span>XA5, <span class=\"number\">0</span>XA5&#125;<span class=\"comment\">;</span></span><br><span class=\"line\">    u8 i<span class=\"comment\">;</span></span><br><span class=\"line\">    SPI2_SetSpeed(SPI_BaudRatePrescaler_4)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Buf(WRITE_REG_NRF + TX_ADDR, buf, <span class=\"number\">5</span>)<span class=\"comment\">;//这里设置发送地址为0XA5 </span></span><br><span class=\"line\">    NRF24L01_Read_Buf(TX_ADDR, buf, <span class=\"number\">5</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span><span class=\"comment\">; i &lt; 5; i++)if (buf[i] != 0XA5)break;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i != <span class=\"number\">5</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">; </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;        </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NRF24L01_TX_Mode()</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const u8 TX_ADDRESS[TX_ADR_WIDTH] = &#123;<span class=\"number\">0x34</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x01</span>&#125;<span class=\"comment\">; //发送地址</span></span><br><span class=\"line\">const u8 RX_ADDRESS[RX_ADR_WIDTH] = &#123;<span class=\"number\">0x34</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x01</span>&#125;<span class=\"comment\">; //发送地址</span></span><br><span class=\"line\">void NRF24L01_TX_Mode(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NRF24L01_CE = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">    NRF24L01_Write_Buf(WRITE_REG_NRF + TX_ADDR, (u8*)TX_ADDRESS, TX_ADR_WIDTH)<span class=\"comment\">;//这里设置发送地址为正确的地址。只有发送地址和接收地址相配对，才能通信成功。 </span></span><br><span class=\"line\">    NRF24L01_Write_Buf(WRITE_REG_NRF + RX_ADDR_P0, (u8*)RX_ADDRESS, RX_ADR_WIDTH)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + EN_AA, <span class=\"number\">0x01</span>)<span class=\"comment\">;  </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + EN_RXADDR, <span class=\"number\">0x01</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + SETUP_RETR, <span class=\"number\">0x1a</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + RF_CH, <span class=\"number\">40</span>)<span class=\"comment\">;    </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + RF_SETUP, <span class=\"number\">0x0f</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_Write_Reg(WRITE_REG_NRF + <span class=\"built_in\">CONFIG</span>, <span class=\"number\">0x0e</span>)<span class=\"comment\">; </span></span><br><span class=\"line\">    NRF24L01_CE = <span class=\"number\">1</span><span class=\"comment\">; </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>正确的主函数</li>\n</ul>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (NRF24L01_Check())<span class=\"comment\">//如果这句放在设置发送模式的后面，就会把用来测试的发送地址设为真正的发送地址，覆盖掉正确的发送地址。从而导致通信失败。    </span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LED2_ON<span class=\"comment\">;</span></span><br><span class=\"line\">    LED1_OFF<span class=\"comment\">;</span></span><br><span class=\"line\">    printf(<span class=\"string\">\"no\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NRF24L01_TX_Mode()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2015-09-08\">2015-09-08</h2><p>今天遭遇了一个神奇的bug：</p>\n<p>一个简单的按键扫描程序，就俩键。</p>\n<p>逻辑是：</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 key_scan(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(有键按下：按键<span class=\"number\">1</span>按下||按键<span class=\"number\">2</span>按下)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(按键<span class=\"number\">1</span>按下)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(按键<span class=\"number\">2</span>按下)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span><span class=\"comment\">//无键按下</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在主程序中：</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = key_scan()<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(key == <span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> a<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(key == <span class=\"number\">2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> b<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表面上看没错误，实际有一个很明显的漏洞：当if……else if…… 不包括所有的条件在内，也就是说有可能会出现条件不符合if(……），也不符合else if(……）的情况，这时候函数就不知道该返回什么值了。就隐藏了一个潜在的无用返回值，很有可能影响正常的程序。比如这个无用返回值是1，这样主程序会误认为按下了按键1，执行了a。</p>\n<p>事实也确实是如此：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/warning.png\" alt=\"warning\"><br>它有一个无返回值的警告。然而我没在意，但程序运行时出现这样的情况：</p>\n<p>实例描述：<br>按键扫描函数：<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 KEY_scan(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>||FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        delay_ms(<span class=\"number\">10</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主函数：<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MODE_KEY_DOWN <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FUN_KEY_DOWN <span class=\"number\">2</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        key = KEY_scan()<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key==MODE_KEY_DOWN)<span class=\"comment\">//按下MODE键</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                printf(<span class=\"string\">\"MODE_KEY\\n\"</span>)<span class=\"comment\">;//打印MODE_KEY</span></span><br><span class=\"line\">                key=<span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key==FUN_KEY_DOWN)<span class=\"comment\">//按下FUN键</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                printf(<span class=\"string\">\"FUN_KEY\\n\"</span>)<span class=\"comment\">;//打印FUN_KEY</span></span><br><span class=\"line\">                key=<span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/elseif.png\" alt=\"end1\"></p>\n<blockquote>\n<p>运行结果：<br>当我按下FUN键后，会莫名出现一个MODE键按下的对应打印。<br>debug发现，当按下FUN键后，key值变为2，当松开的一瞬间，突然有一个key=1的值出现，导致程序执行了打印MODE_KEY，但是程序并没有执行到if(MODE_KEY==0)这句判断语句内，但还是返回了一个1值。这个就是垃圾返回值。</p>\n</blockquote>\n<p>把程序修改成了:<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 KEY_scan(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    static u8 key_up = <span class=\"number\">0</span><span class=\"comment\">;   </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>||FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;       </span><br><span class=\"line\">        delay_ms(<span class=\"number\">10</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//补全了情况</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>后运行正常，也没有警告。</p>\n<p>经过右上角男士提点：尽量少用else。程序修改成如下：<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 KEY_scan(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>||FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        delay_ms(<span class=\"number\">100</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(MODE_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(FUN_KEY==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>也没啥问题。</p>\n<h2 id=\"2015-09-15\">2015-09-15</h2><p>NRF24L01莫名其妙的又不通信了。痛心啊。还以为是硬件问题。因为软件都是复制的啊（PS：好像一直都是我找不出bug的理由^0^）<br>最后发现一直精简程序，想把进程都放在中断里执行。即时间片轮转算法里的时间片。</p>\n<p>最后发现只顾着把修改发送字节却忘记了执行发送这重要的一步。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (<span class=\"name\">NRF24L01_TxPacket</span>(<span class=\"name\">tmp_buf</span>) == TX_OK)</span><br></pre></td></tr></table></figure>\n<p>一眼看上去感觉只是一个判断发送是否完成的语句语句，但实际上发送函数也在里面。哎。脑子估计抽筋了。</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动NRF24L01发送一次数据</span></span><br><span class=\"line\"><span class=\"comment\">//txbuf:待发送数据首地址</span></span><br><span class=\"line\"><span class=\"comment\">//返回值:发送完成状况</span></span><br><span class=\"line\">u8 NRF24L01_TxPacket(u8 *txbuf)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tu8 sta<span class=\"comment\">;</span></span><br><span class=\"line\">\tSPI2_SetSpeed(SPI_BaudRatePrescaler_4)<span class=\"comment\">;//spi速度为9Mhz（24L01的最大SPI时钟为10Mhz）</span></span><br><span class=\"line\">\tNRF24L01_CE = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">\tNRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH)<span class=\"comment\">; //写数据到TX BUF  5个字节</span></span><br><span class=\"line\">\tNRF24L01_CE = <span class=\"number\">1</span><span class=\"comment\">; //启动发送</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (NRF24L01_IRQ != <span class=\"number\">0</span>)<span class=\"comment\">; //等待发送完成</span></span><br><span class=\"line\">\tsta = NRF24L01_Read_Reg(STATUS)<span class=\"comment\">; //读取状态寄存器的值</span></span><br><span class=\"line\">\tNRF24L01_Write_Reg(WRITE_REG_NRF + STATUS, sta)<span class=\"comment\">; //清除TX_DS或MAX_RT中断标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sta &amp; MAX_TX) <span class=\"comment\">//达到最大重发次数</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tNRF24L01_Write_Reg(FLUSH_TX, <span class=\"number\">0</span>xff)<span class=\"comment\">; //清除TX FIFO寄存器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> MAX_TX<span class=\"comment\">;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sta &amp; TX_OK) <span class=\"comment\">//发送完成</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> TX_OK<span class=\"comment\">;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>xff<span class=\"comment\">;//其他原因发送失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Scroll with Javascript VS CSS3","date":"2015-10-01T16:43:04.000Z","_content":"实现点击button滑动到指定页面的特效。\n\n应用:\n\n* 点击导航栏滑动到指定的页面\n* 点击MORE就往下滑动一个页面\n* 点击*回到顶部*就滚回到首页\n\n<!--more-->\n这里分别用\n\n* Javascript：\n\t* window.scrollBy()控制滚动条实现\n\t[代码+Demo](https://jsfiddle.net/g1760uno/)\n\t> 缺点：感觉不够顺滑流畅且没有动画特效\n\t> 如果有大背景图片，就不够流畅了。更别提fixed。\n\n\t* Jquery库里的.animate实现\n\t[代码+Demo](https://jsfiddle.net/yugko0c6/)\n\t> 优点：相对顺滑流畅 且有动画特效\n\t> 缺点：如果有大背景图片，就不够流畅了。更别提fixed。\n\n* CSS3里的transition：\n[代码+Demo](https://jsfiddle.net/wk7e4zep/)\n> 优点：非常顺滑流畅！有动画特效。即使是有大背景图片。\n> 缺点：滚动条失效。因为是使用tranlateY使其整体上移下移，和滚动条无关。当 然也就无法实现fixed效果\n> 其实这里的实现方法，感觉不完美。\n> 代码中多写了两个id分别为page_1和page_2的div，来对应a标签中的href，只是为了能在触发target的时候，能让后面的所有为wrap类的容器一起执行transform这样page1与page2才不会断层。\n> 我认为更好的解决方式是，不要另起id名，直接就用page1 page2,然后在\narticle外面套一个#main的div，触发page1和page2时能选择父元素#main使其整体上升下降。但是CSS3里貌似没有父级元素选择器，有了貌似浏览器也米有支持。具体可以google.\n\n## 3种实现方式一起比较:[Demo](https://jsfiddle.net/a4aoshp9/)\n\n这里再记录一下关于Javascript里的原生onclick()和JQuery里的.click(funtciton(){}).我的代码里都用的是onclick，不过对比会发现，使用.click更流畅，具体比较请看：[jQuery.click() vs onClick](http://stackoverflow.com/questions/12627443/jquery-click-vs-onclick)","source":"_posts/scroll.md","raw":"title: Scroll with Javascript VS CSS3\ndate: 2015-10-02 00:43:04\ntags:\n---\n实现点击button滑动到指定页面的特效。\n\n应用:\n\n* 点击导航栏滑动到指定的页面\n* 点击MORE就往下滑动一个页面\n* 点击*回到顶部*就滚回到首页\n\n<!--more-->\n这里分别用\n\n* Javascript：\n\t* window.scrollBy()控制滚动条实现\n\t[代码+Demo](https://jsfiddle.net/g1760uno/)\n\t> 缺点：感觉不够顺滑流畅且没有动画特效\n\t> 如果有大背景图片，就不够流畅了。更别提fixed。\n\n\t* Jquery库里的.animate实现\n\t[代码+Demo](https://jsfiddle.net/yugko0c6/)\n\t> 优点：相对顺滑流畅 且有动画特效\n\t> 缺点：如果有大背景图片，就不够流畅了。更别提fixed。\n\n* CSS3里的transition：\n[代码+Demo](https://jsfiddle.net/wk7e4zep/)\n> 优点：非常顺滑流畅！有动画特效。即使是有大背景图片。\n> 缺点：滚动条失效。因为是使用tranlateY使其整体上移下移，和滚动条无关。当 然也就无法实现fixed效果\n> 其实这里的实现方法，感觉不完美。\n> 代码中多写了两个id分别为page_1和page_2的div，来对应a标签中的href，只是为了能在触发target的时候，能让后面的所有为wrap类的容器一起执行transform这样page1与page2才不会断层。\n> 我认为更好的解决方式是，不要另起id名，直接就用page1 page2,然后在\narticle外面套一个#main的div，触发page1和page2时能选择父元素#main使其整体上升下降。但是CSS3里貌似没有父级元素选择器，有了貌似浏览器也米有支持。具体可以google.\n\n## 3种实现方式一起比较:[Demo](https://jsfiddle.net/a4aoshp9/)\n\n这里再记录一下关于Javascript里的原生onclick()和JQuery里的.click(funtciton(){}).我的代码里都用的是onclick，不过对比会发现，使用.click更流畅，具体比较请看：[jQuery.click() vs onClick](http://stackoverflow.com/questions/12627443/jquery-click-vs-onclick)","slug":"scroll","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo6d001illsgrhertxq6","content":"<p>实现点击button滑动到指定页面的特效。</p>\n<p>应用:</p>\n<ul>\n<li>点击导航栏滑动到指定的页面</li>\n<li>点击MORE就往下滑动一个页面</li>\n<li>点击<em>回到顶部</em>就滚回到首页</li>\n</ul>\n<a id=\"more\"></a>\n<p>这里分别用</p>\n<ul>\n<li><p>Javascript：</p>\n<ul>\n<li><p>window.scrollBy()控制滚动条实现<br><a href=\"https://jsfiddle.net/g1760uno/\" target=\"_blank\" rel=\"external\">代码+Demo</a></p>\n<blockquote>\n<p>缺点：感觉不够顺滑流畅且没有动画特效<br>如果有大背景图片，就不够流畅了。更别提fixed。</p>\n</blockquote>\n</li>\n<li><p>Jquery库里的.animate实现<br><a href=\"https://jsfiddle.net/yugko0c6/\" target=\"_blank\" rel=\"external\">代码+Demo</a></p>\n<blockquote>\n<p>优点：相对顺滑流畅 且有动画特效<br>缺点：如果有大背景图片，就不够流畅了。更别提fixed。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>CSS3里的transition：<br><a href=\"https://jsfiddle.net/wk7e4zep/\" target=\"_blank\" rel=\"external\">代码+Demo</a></p>\n<blockquote>\n<p>优点：非常顺滑流畅！有动画特效。即使是有大背景图片。<br>缺点：滚动条失效。因为是使用tranlateY使其整体上移下移，和滚动条无关。当 然也就无法实现fixed效果<br>其实这里的实现方法，感觉不完美。<br>代码中多写了两个id分别为page_1和page_2的div，来对应a标签中的href，只是为了能在触发target的时候，能让后面的所有为wrap类的容器一起执行transform这样page1与page2才不会断层。<br>我认为更好的解决方式是，不要另起id名，直接就用page1 page2,然后在<br>article外面套一个#main的div，触发page1和page2时能选择父元素#main使其整体上升下降。但是CSS3里貌似没有父级元素选择器，有了貌似浏览器也米有支持。具体可以google.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3种实现方式一起比较:Demo\">3种实现方式一起比较:<a href=\"https://jsfiddle.net/a4aoshp9/\" target=\"_blank\" rel=\"external\">Demo</a></h2><p>这里再记录一下关于Javascript里的原生onclick()和JQuery里的.click(funtciton(){}).我的代码里都用的是onclick，不过对比会发现，使用.click更流畅，具体比较请看：<a href=\"http://stackoverflow.com/questions/12627443/jquery-click-vs-onclick\" target=\"_blank\" rel=\"external\">jQuery.click() vs onClick</a></p>\n","excerpt":"<p>实现点击button滑动到指定页面的特效。</p>\n<p>应用:</p>\n<ul>\n<li>点击导航栏滑动到指定的页面</li>\n<li>点击MORE就往下滑动一个页面</li>\n<li>点击<em>回到顶部</em>就滚回到首页</li>\n</ul>","more":"<p>这里分别用</p>\n<ul>\n<li><p>Javascript：</p>\n<ul>\n<li><p>window.scrollBy()控制滚动条实现<br><a href=\"https://jsfiddle.net/g1760uno/\">代码+Demo</a></p>\n<blockquote>\n<p>缺点：感觉不够顺滑流畅且没有动画特效<br>如果有大背景图片，就不够流畅了。更别提fixed。</p>\n</blockquote>\n</li>\n<li><p>Jquery库里的.animate实现<br><a href=\"https://jsfiddle.net/yugko0c6/\">代码+Demo</a></p>\n<blockquote>\n<p>优点：相对顺滑流畅 且有动画特效<br>缺点：如果有大背景图片，就不够流畅了。更别提fixed。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>CSS3里的transition：<br><a href=\"https://jsfiddle.net/wk7e4zep/\">代码+Demo</a></p>\n<blockquote>\n<p>优点：非常顺滑流畅！有动画特效。即使是有大背景图片。<br>缺点：滚动条失效。因为是使用tranlateY使其整体上移下移，和滚动条无关。当 然也就无法实现fixed效果<br>其实这里的实现方法，感觉不完美。<br>代码中多写了两个id分别为page_1和page_2的div，来对应a标签中的href，只是为了能在触发target的时候，能让后面的所有为wrap类的容器一起执行transform这样page1与page2才不会断层。<br>我认为更好的解决方式是，不要另起id名，直接就用page1 page2,然后在<br>article外面套一个#main的div，触发page1和page2时能选择父元素#main使其整体上升下降。但是CSS3里貌似没有父级元素选择器，有了貌似浏览器也米有支持。具体可以google.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"3种实现方式一起比较:Demo\">3种实现方式一起比较:<a href=\"https://jsfiddle.net/a4aoshp9/\">Demo</a></h2><p>这里再记录一下关于Javascript里的原生onclick()和JQuery里的.click(funtciton(){}).我的代码里都用的是onclick，不过对比会发现，使用.click更流畅，具体比较请看：<a href=\"http://stackoverflow.com/questions/12627443/jquery-click-vs-onclick\">jQuery.click() vs onClick</a></p>"},{"title":"参加妍妍婚礼的流水账","date":"2015-07-07T02:17:54.000Z","_content":"## 1天\n\n\n&emsp;&emsp;第一天在梧村汽车站等石欢欢，小燕相聚。下午跑到沙坡尾一家很有feel的奶茶店喝了奶茶。很贵很难喝，但花钱买环境吧。楼上是很宽敞的榻榻米，可以让小伙伴们很闲散的躺着，坐着，趴着。聊聊天。\n聊天的时间总是很快就过去了。讲讲各自的生活，只是觉得很惬意。\n<!--more-->\n![抹茶拿铁](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3437.JPG)\n\n\n&emsp;&emsp;下午我带她们去了理工学院那边吃了某人推荐的助屋。额，可以说，也不好吃啊，那个传说中的咖喱。吃完了欢欢就回到了小燕家，我跑来实验室搞了搞hexo。也没鼓捣出点啥，晚上回去坐等第二天搬宿舍。\n## 2天\n\n\n&emsp;&emsp;搬了一天宿舍，幸亏实验室的小伙伴来帮忙，要不然真心搬不完。真是太感谢啦。不过也没来得及洗澡，就急匆匆的跑过去赶1:30的车去龙岩。打的过去，仅仅差了2分钟，检票时间。幸好赶上。动车真是快，喝了一杯烧仙草，在车上开开玩笑就到了。差不多一个小时。\n\n\n&emsp;&emsp;到了龙岩，一下子就在出站口看到了穿的很卡哇伊的黄圣妍，好瘦，而且好白。带着金手镯，金项链。结婚的节奏啊。接我们先到酒店，居然宾馆房间号小哥给的就是408，我觉得这绝壁是一种暗示。408，大学宿舍，好怀念，好怀念。\n\n\n&emsp;&emsp;下午见到了另一个伴娘，是妍妍的初中同学，一起去做了指甲。\n\n\n&emsp;&emsp;晚上和小妍妍秉烛夜聊，聊了一晚上。1年后，4人再次睡在一个房间真是不容易。以后不知道还有什么机会没有。\n\n\n&emsp;&emsp;早上起床，先去布置一下娘家房子，然后赶去拿充电器，接王瑜和杨秋娟，接着回去又布置了一会儿房间，整个房间变成了气球的海洋，我也机智的学会了如何给气球系口。成就感满满。\n\n\n&emsp;&emsp;中午，小丽和大妈都到齐了。只有大家一起坐在一个房间开始吃午饭的感觉，那种聚在一起的感觉好熟悉，就像当初毕业时吃的最后一顿饭。\n\n\n&emsp;&emsp;下午，开始了忙碌的布置之旅。最后成功布置了拱门。好漂亮的。大家虽然累，但都很有成就感吧。\n\n\n![彩虹拱门](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3467.JPG)\n\n\n&emsp;&emsp;晚上我就很累很累，头很痛，所以9点开始睡觉，10点查不到睡着。他们跑去商量第二天如何整伴郎和新郎。早上起床的感觉，真是幸福啊。嗓子也不疼了，头也不痛了。一天都感觉会很有活力。睡觉真是一个治愈的过程。\n## 3天\n\n\n&emsp;&emsp;早上6:30起床开始化妆换衣服，然后等着新郎到来，感觉妍妍都还蛮放松的。还吃面包呢。闹腾的过程也是很欢乐，不过感觉他们都很矜持，也不够给力。难道这就是30岁大叔和90后的差别。感觉露露结婚的时候大家都是\n很给力的嘛。\n\n\n&emsp;&emsp;整个过程都是新郎打电话操心各种事宜，看的出新郎对妍妍还是很温柔的。\n\n\n&emsp;&emsp;站在下面跟着新娘迎接宾客的时候肚子好痛，终于熬到了开始典礼仪式。\n\n\n&emsp;&emsp;蓝色的主题很美，当司仪开始念到让新娘上台的时候，突然一瞬间，大学里第一幕见到圣妍的种种，在宿舍里度过的每一个瞬间，在一起做的一些脑残事，一起去琴房，一起画井盖，一起参加电子设计比赛，她还把手剪了，她一直都很坚强。去游乐场玩她都在鼓励我，爬屋顶也是，大家都把我拉上去。一幕幕的，算了，不敢回忆了。诸多，诸多，四年的时光。其实之前一直都没啥感觉，直到这一刻，突然意识到，嫁人了。长大了。一切都回不去了。欢欢也哭着看了我一眼。瞄到王瑜也在哭。大妈也在哭。大家都在感伤着时光吧。\n\n\n![新娘的背影](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3476.JPG)\n\n\n&emsp;&emsp;接下来就是吃饭，换票。到了他们的新房。\n\n\n&emsp;&emsp;大家又开始闹腾了。一瞬间好像又回到了大学。幻觉般的时光，过得好快。\n\n## 结束\n&emsp;&emsp;妍妍送走了我们，到了车站，各奔东西。跟着妹子回到了软件园，见到了rp。感慨好多。再次聚会，是谁结婚？","source":"_posts/wedding.md","raw":"title: 参加妍妍婚礼的流水账\ndate: 2015-07-07 10:17:54\ncategories: Life\ntags: [生活，婚礼，朋友]\n---\n## 1天\n\n\n&emsp;&emsp;第一天在梧村汽车站等石欢欢，小燕相聚。下午跑到沙坡尾一家很有feel的奶茶店喝了奶茶。很贵很难喝，但花钱买环境吧。楼上是很宽敞的榻榻米，可以让小伙伴们很闲散的躺着，坐着，趴着。聊聊天。\n聊天的时间总是很快就过去了。讲讲各自的生活，只是觉得很惬意。\n<!--more-->\n![抹茶拿铁](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3437.JPG)\n\n\n&emsp;&emsp;下午我带她们去了理工学院那边吃了某人推荐的助屋。额，可以说，也不好吃啊，那个传说中的咖喱。吃完了欢欢就回到了小燕家，我跑来实验室搞了搞hexo。也没鼓捣出点啥，晚上回去坐等第二天搬宿舍。\n## 2天\n\n\n&emsp;&emsp;搬了一天宿舍，幸亏实验室的小伙伴来帮忙，要不然真心搬不完。真是太感谢啦。不过也没来得及洗澡，就急匆匆的跑过去赶1:30的车去龙岩。打的过去，仅仅差了2分钟，检票时间。幸好赶上。动车真是快，喝了一杯烧仙草，在车上开开玩笑就到了。差不多一个小时。\n\n\n&emsp;&emsp;到了龙岩，一下子就在出站口看到了穿的很卡哇伊的黄圣妍，好瘦，而且好白。带着金手镯，金项链。结婚的节奏啊。接我们先到酒店，居然宾馆房间号小哥给的就是408，我觉得这绝壁是一种暗示。408，大学宿舍，好怀念，好怀念。\n\n\n&emsp;&emsp;下午见到了另一个伴娘，是妍妍的初中同学，一起去做了指甲。\n\n\n&emsp;&emsp;晚上和小妍妍秉烛夜聊，聊了一晚上。1年后，4人再次睡在一个房间真是不容易。以后不知道还有什么机会没有。\n\n\n&emsp;&emsp;早上起床，先去布置一下娘家房子，然后赶去拿充电器，接王瑜和杨秋娟，接着回去又布置了一会儿房间，整个房间变成了气球的海洋，我也机智的学会了如何给气球系口。成就感满满。\n\n\n&emsp;&emsp;中午，小丽和大妈都到齐了。只有大家一起坐在一个房间开始吃午饭的感觉，那种聚在一起的感觉好熟悉，就像当初毕业时吃的最后一顿饭。\n\n\n&emsp;&emsp;下午，开始了忙碌的布置之旅。最后成功布置了拱门。好漂亮的。大家虽然累，但都很有成就感吧。\n\n\n![彩虹拱门](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3467.JPG)\n\n\n&emsp;&emsp;晚上我就很累很累，头很痛，所以9点开始睡觉，10点查不到睡着。他们跑去商量第二天如何整伴郎和新郎。早上起床的感觉，真是幸福啊。嗓子也不疼了，头也不痛了。一天都感觉会很有活力。睡觉真是一个治愈的过程。\n## 3天\n\n\n&emsp;&emsp;早上6:30起床开始化妆换衣服，然后等着新郎到来，感觉妍妍都还蛮放松的。还吃面包呢。闹腾的过程也是很欢乐，不过感觉他们都很矜持，也不够给力。难道这就是30岁大叔和90后的差别。感觉露露结婚的时候大家都是\n很给力的嘛。\n\n\n&emsp;&emsp;整个过程都是新郎打电话操心各种事宜，看的出新郎对妍妍还是很温柔的。\n\n\n&emsp;&emsp;站在下面跟着新娘迎接宾客的时候肚子好痛，终于熬到了开始典礼仪式。\n\n\n&emsp;&emsp;蓝色的主题很美，当司仪开始念到让新娘上台的时候，突然一瞬间，大学里第一幕见到圣妍的种种，在宿舍里度过的每一个瞬间，在一起做的一些脑残事，一起去琴房，一起画井盖，一起参加电子设计比赛，她还把手剪了，她一直都很坚强。去游乐场玩她都在鼓励我，爬屋顶也是，大家都把我拉上去。一幕幕的，算了，不敢回忆了。诸多，诸多，四年的时光。其实之前一直都没啥感觉，直到这一刻，突然意识到，嫁人了。长大了。一切都回不去了。欢欢也哭着看了我一眼。瞄到王瑜也在哭。大妈也在哭。大家都在感伤着时光吧。\n\n\n![新娘的背影](http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3476.JPG)\n\n\n&emsp;&emsp;接下来就是吃饭，换票。到了他们的新房。\n\n\n&emsp;&emsp;大家又开始闹腾了。一瞬间好像又回到了大学。幻觉般的时光，过得好快。\n\n## 结束\n&emsp;&emsp;妍妍送走了我们，到了车站，各奔东西。跟着妹子回到了软件园，见到了rp。感慨好多。再次聚会，是谁结婚？","slug":"wedding","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo6e001kllsgfaxhg2ze","content":"<h2 id=\"1天\">1天</h2><p>&emsp;&emsp;第一天在梧村汽车站等石欢欢，小燕相聚。下午跑到沙坡尾一家很有feel的奶茶店喝了奶茶。很贵很难喝，但花钱买环境吧。楼上是很宽敞的榻榻米，可以让小伙伴们很闲散的躺着，坐着，趴着。聊聊天。<br>聊天的时间总是很快就过去了。讲讲各自的生活，只是觉得很惬意。<br><a id=\"more\"></a><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3437.JPG\" alt=\"抹茶拿铁\"></p>\n<p>&emsp;&emsp;下午我带她们去了理工学院那边吃了某人推荐的助屋。额，可以说，也不好吃啊，那个传说中的咖喱。吃完了欢欢就回到了小燕家，我跑来实验室搞了搞hexo。也没鼓捣出点啥，晚上回去坐等第二天搬宿舍。</p>\n<h2 id=\"2天\">2天</h2><p>&emsp;&emsp;搬了一天宿舍，幸亏实验室的小伙伴来帮忙，要不然真心搬不完。真是太感谢啦。不过也没来得及洗澡，就急匆匆的跑过去赶1:30的车去龙岩。打的过去，仅仅差了2分钟，检票时间。幸好赶上。动车真是快，喝了一杯烧仙草，在车上开开玩笑就到了。差不多一个小时。</p>\n<p>&emsp;&emsp;到了龙岩，一下子就在出站口看到了穿的很卡哇伊的黄圣妍，好瘦，而且好白。带着金手镯，金项链。结婚的节奏啊。接我们先到酒店，居然宾馆房间号小哥给的就是408，我觉得这绝壁是一种暗示。408，大学宿舍，好怀念，好怀念。</p>\n<p>&emsp;&emsp;下午见到了另一个伴娘，是妍妍的初中同学，一起去做了指甲。</p>\n<p>&emsp;&emsp;晚上和小妍妍秉烛夜聊，聊了一晚上。1年后，4人再次睡在一个房间真是不容易。以后不知道还有什么机会没有。</p>\n<p>&emsp;&emsp;早上起床，先去布置一下娘家房子，然后赶去拿充电器，接王瑜和杨秋娟，接着回去又布置了一会儿房间，整个房间变成了气球的海洋，我也机智的学会了如何给气球系口。成就感满满。</p>\n<p>&emsp;&emsp;中午，小丽和大妈都到齐了。只有大家一起坐在一个房间开始吃午饭的感觉，那种聚在一起的感觉好熟悉，就像当初毕业时吃的最后一顿饭。</p>\n<p>&emsp;&emsp;下午，开始了忙碌的布置之旅。最后成功布置了拱门。好漂亮的。大家虽然累，但都很有成就感吧。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3467.JPG\" alt=\"彩虹拱门\"></p>\n<p>&emsp;&emsp;晚上我就很累很累，头很痛，所以9点开始睡觉，10点查不到睡着。他们跑去商量第二天如何整伴郎和新郎。早上起床的感觉，真是幸福啊。嗓子也不疼了，头也不痛了。一天都感觉会很有活力。睡觉真是一个治愈的过程。</p>\n<h2 id=\"3天\">3天</h2><p>&emsp;&emsp;早上6:30起床开始化妆换衣服，然后等着新郎到来，感觉妍妍都还蛮放松的。还吃面包呢。闹腾的过程也是很欢乐，不过感觉他们都很矜持，也不够给力。难道这就是30岁大叔和90后的差别。感觉露露结婚的时候大家都是<br>很给力的嘛。</p>\n<p>&emsp;&emsp;整个过程都是新郎打电话操心各种事宜，看的出新郎对妍妍还是很温柔的。</p>\n<p>&emsp;&emsp;站在下面跟着新娘迎接宾客的时候肚子好痛，终于熬到了开始典礼仪式。</p>\n<p>&emsp;&emsp;蓝色的主题很美，当司仪开始念到让新娘上台的时候，突然一瞬间，大学里第一幕见到圣妍的种种，在宿舍里度过的每一个瞬间，在一起做的一些脑残事，一起去琴房，一起画井盖，一起参加电子设计比赛，她还把手剪了，她一直都很坚强。去游乐场玩她都在鼓励我，爬屋顶也是，大家都把我拉上去。一幕幕的，算了，不敢回忆了。诸多，诸多，四年的时光。其实之前一直都没啥感觉，直到这一刻，突然意识到，嫁人了。长大了。一切都回不去了。欢欢也哭着看了我一眼。瞄到王瑜也在哭。大妈也在哭。大家都在感伤着时光吧。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3476.JPG\" alt=\"新娘的背影\"></p>\n<p>&emsp;&emsp;接下来就是吃饭，换票。到了他们的新房。</p>\n<p>&emsp;&emsp;大家又开始闹腾了。一瞬间好像又回到了大学。幻觉般的时光，过得好快。</p>\n<h2 id=\"结束\">结束</h2><p>&emsp;&emsp;妍妍送走了我们，到了车站，各奔东西。跟着妹子回到了软件园，见到了rp。感慨好多。再次聚会，是谁结婚？</p>\n","excerpt":"<h2 id=\"1天\">1天</h2><p>&emsp;&emsp;第一天在梧村汽车站等石欢欢，小燕相聚。下午跑到沙坡尾一家很有feel的奶茶店喝了奶茶。很贵很难喝，但花钱买环境吧。楼上是很宽敞的榻榻米，可以让小伙伴们很闲散的躺着，坐着，趴着。聊聊天。<br>聊天的时间总是很快就过去了。讲讲各自的生活，只是觉得很惬意。<br>","more":"<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3437.JPG\" alt=\"抹茶拿铁\"></p>\n<p>&emsp;&emsp;下午我带她们去了理工学院那边吃了某人推荐的助屋。额，可以说，也不好吃啊，那个传说中的咖喱。吃完了欢欢就回到了小燕家，我跑来实验室搞了搞hexo。也没鼓捣出点啥，晚上回去坐等第二天搬宿舍。</p>\n<h2 id=\"2天\">2天</h2><p>&emsp;&emsp;搬了一天宿舍，幸亏实验室的小伙伴来帮忙，要不然真心搬不完。真是太感谢啦。不过也没来得及洗澡，就急匆匆的跑过去赶1:30的车去龙岩。打的过去，仅仅差了2分钟，检票时间。幸好赶上。动车真是快，喝了一杯烧仙草，在车上开开玩笑就到了。差不多一个小时。</p>\n<p>&emsp;&emsp;到了龙岩，一下子就在出站口看到了穿的很卡哇伊的黄圣妍，好瘦，而且好白。带着金手镯，金项链。结婚的节奏啊。接我们先到酒店，居然宾馆房间号小哥给的就是408，我觉得这绝壁是一种暗示。408，大学宿舍，好怀念，好怀念。</p>\n<p>&emsp;&emsp;下午见到了另一个伴娘，是妍妍的初中同学，一起去做了指甲。</p>\n<p>&emsp;&emsp;晚上和小妍妍秉烛夜聊，聊了一晚上。1年后，4人再次睡在一个房间真是不容易。以后不知道还有什么机会没有。</p>\n<p>&emsp;&emsp;早上起床，先去布置一下娘家房子，然后赶去拿充电器，接王瑜和杨秋娟，接着回去又布置了一会儿房间，整个房间变成了气球的海洋，我也机智的学会了如何给气球系口。成就感满满。</p>\n<p>&emsp;&emsp;中午，小丽和大妈都到齐了。只有大家一起坐在一个房间开始吃午饭的感觉，那种聚在一起的感觉好熟悉，就像当初毕业时吃的最后一顿饭。</p>\n<p>&emsp;&emsp;下午，开始了忙碌的布置之旅。最后成功布置了拱门。好漂亮的。大家虽然累，但都很有成就感吧。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3467.JPG\" alt=\"彩虹拱门\"></p>\n<p>&emsp;&emsp;晚上我就很累很累，头很痛，所以9点开始睡觉，10点查不到睡着。他们跑去商量第二天如何整伴郎和新郎。早上起床的感觉，真是幸福啊。嗓子也不疼了，头也不痛了。一天都感觉会很有活力。睡觉真是一个治愈的过程。</p>\n<h2 id=\"3天\">3天</h2><p>&emsp;&emsp;早上6:30起床开始化妆换衣服，然后等着新郎到来，感觉妍妍都还蛮放松的。还吃面包呢。闹腾的过程也是很欢乐，不过感觉他们都很矜持，也不够给力。难道这就是30岁大叔和90后的差别。感觉露露结婚的时候大家都是<br>很给力的嘛。</p>\n<p>&emsp;&emsp;整个过程都是新郎打电话操心各种事宜，看的出新郎对妍妍还是很温柔的。</p>\n<p>&emsp;&emsp;站在下面跟着新娘迎接宾客的时候肚子好痛，终于熬到了开始典礼仪式。</p>\n<p>&emsp;&emsp;蓝色的主题很美，当司仪开始念到让新娘上台的时候，突然一瞬间，大学里第一幕见到圣妍的种种，在宿舍里度过的每一个瞬间，在一起做的一些脑残事，一起去琴房，一起画井盖，一起参加电子设计比赛，她还把手剪了，她一直都很坚强。去游乐场玩她都在鼓励我，爬屋顶也是，大家都把我拉上去。一幕幕的，算了，不敢回忆了。诸多，诸多，四年的时光。其实之前一直都没啥感觉，直到这一刻，突然意识到，嫁人了。长大了。一切都回不去了。欢欢也哭着看了我一眼。瞄到王瑜也在哭。大妈也在哭。大家都在感伤着时光吧。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/IMG_3476.JPG\" alt=\"新娘的背影\"></p>\n<p>&emsp;&emsp;接下来就是吃饭，换票。到了他们的新房。</p>\n<p>&emsp;&emsp;大家又开始闹腾了。一瞬间好像又回到了大学。幻觉般的时光，过得好快。</p>\n<h2 id=\"结束\">结束</h2><p>&emsp;&emsp;妍妍送走了我们，到了车站，各奔东西。跟着妹子回到了软件园，见到了rp。感慨好多。再次聚会，是谁结婚？</p>"},{"title":"制作input下拉菜单","date":"2015-10-12T08:23:42.000Z","_content":"##[Demo](https://jsfiddle.net/17wgtvp1/)\n\n##画出输入框和图标\n\n<style type=\"text/css\">\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing:border-box;\n}\n\ninput {\n    border: 0;\n}\n\n#input-area {\n\tborder: 1px solid #e6e8e9;\n\t padding: 0 10px;\nheight: 30px;\nwidth: 150px;\n}\n#last-input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n#final-input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n#icon {\n\t\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n    cursor: pointer;\n    /*好厉害*/\n}\n   #menu{\n        border:1px solid #e6e8e9;\n       \n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n#last-menu{\nposition:absolute;\ndisplay:none;\n        border:1px solid #e6e8e9;\n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n    #final-menu{\nposition:absolute;\ndisplay:none;\n        border:1px solid #e6e8e9;\n       \n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n.list-menu{\n    \n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n    }\n   .final-list-menu{\n    \n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n  \n}\n.list-menu:hover{\n    background: #eee;\n}\n.final-list-menu:hover{\n    background: #eee;\n}\n</style>\n\n\n####消除两个元素之间的空格\n一般情况下，写html时都是有自动换行的：就像这样\n<!-- more-->\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" >\n<input id=\"icon\" />\n```\nCSS:\n```\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing:border-box;\n}\n\ninput {\n    border: 0;\n}\n\n#input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n\n#icon {\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n}\n```\n这时出来的效果是：\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" >\n<input id=\"icon\" style=\"cursor: default;\"/>\n\n解决办法是：\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" />\n```\n这样就可以消除两行元素的空格变成在一行内。\n\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" style=\"cursor: default;\"/>\n####如何隐藏光标\n\n你会发现上面的icon图标会有光标显现，如何隐藏光标呢？\n\n将icon的color设为tranparent即可。前提是你不需要在这个input内输入任何内容：\n```\n#icon {\n    color:tranparent;//隐藏光标\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n}\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" style=\"cursor: default;color:transparent;\"/>\n\n####如何让鼠标显示出链接选择样式\n\n作为icon的搜索图片，应该点击图片就能有搜索button的作用，但是鼠标移到上面时还是箭头，怎么办？要在外面套一个a标签吗？\n更便捷的方法是，在CSS属性上加上:\n\n```\n#icon {\n    color:tranparent;\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n    cursor:pointer;//改变鼠标样式\n}\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" style=\"cursor: default;color:transparent;cursor:pointer;\"/>\n\n可以用Jquery的click事件进行链接。\n\n##制作下拉菜单\n\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" />\n\n<ul id=\"menu\">\n    <li class=\"list-menu list1\">css课程</li>\n    <li class=\"list-menu list2\">javascript课程</li>\n    <li class=\"list-menu list3\">linux课程</li>\n    <li class=\"list-menu list4\">R课程</li>\n    <li class=\"list-menu list5\">C++课程</li>\n</ul>\n```\nCSS:\n```\n #menu{\n        border:1px solid #e6e8e9;\n        position: absolute;\n        width: 150px;\n        background: white;\n      \n    }\n.list-menu{\n    \n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n    \n}\n.list-menu:hover{\n    background: #eee;\n}\n```\n\n <input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><input id=\"icon\" style=\"color:transparent;\"/><!-- \n    --><ul id=\"menu\">\n     <li class=\"list-menu list1\">css课程</li><!-- \n     --><li class=\"list-menu list2\">javascript课程</li><!-- \n     --><li class=\"list-menu list3\">linux课程</li><!-- \n     --><li class=\"list-menu list4\">R课程</li><!-- \n     --><li class=\"list-menu list5\">C++课程</li>\n\n##点击输入框时下拉菜单出现 点击其他位置下拉菜单隐藏\n\n一般情况下，下拉菜单应该是隐藏的，鼠标点击到输入框时浮现，点击网页的其他地方，下拉框消失。这需要用到JS和Jquery库。\n\n####点击输入框下拉框浮现\n\n首先要在#menu加上display:none\n\n```\n#menu{\n        display: none;\n        border:1px solid #e6e8e9;\n        position: absolute;\n        width: 150px;\n        background: white;\n    }\n```\n接下来实现点击input时display变为block即可。\n\n我最先想到的是\nJavascript:\n```\n   $(\"#input-area\").click(function() {\n        $(\"#menu\").css(\"display\",\"block\");\n        // body...\n    })\n```\n\n但如何在其他地方点击，能够隐藏menu呢？\n最终参考了[Jquery的例程](https://api.jquery.com/event.target/)\n```\nfunction handler( event ) {\n  var target = $( event.target );\n \n  if ( target.is( $(\"#input-area\"))  ) {\n    $(\"#menu\").show();\n  }\n  else\n    $(\"#menu\").hide();\n}\n$(\"html\").click(handler);\n\n```\n注意：hide(),show()函数只针对dispaly:none,对于visibility:hidden没有用。\n<input id=\"last-input-area\" type='text' placeholder=\"输入你想搜索的内容\" /><input id=\"icon\" style=\"color:transparent;\"/><!-- \n--><ul id=\"last-menu\">\n <li class=\"list-menu \">css课程</li><!-- \n --><li class=\"list-menu \">javascript课程</li><!-- \n --><li class=\"list-menu \">linux课程</li><!-- \n --><li class=\"list-menu \">R课程</li><!-- \n --><li class=\"list-menu \">C++课程</li>\n </ul>\n\n顺便这里隆重推出absolute的用法，你会发现我的下拉菜单是覆盖在页面上的，如何实现的这个效果呢？直接在#menu中加上position:absolute属性即可，且父元素不要加position：relative.好神奇！其实我这篇文章也是根据这个课程引出的：[absolute深入理解](http://www.imooc.com/video/4462)\n##鼠标选择下拉菜单选项填入input框内\n\n鼠标点击li标签的内容，返回其文本：\n```\n$(\".list-menu\").click(function(e){\nconsole.log(e.target.innerHTML);\n```\n其中e.target.innerHTML就是其文本。\n\n\n并将文本传入input框内：\n```\n$(\".list-menu\").click(function(e){\nconsole.log(e.target.innerHTML);\n document.getElementById(\"input-area\").value = e.target.innerHTML;\n});\n```\n> 这里注意：Jquery的$(\"#id\")和document.getElemenetById(\"id\")是不完全一样的。document.getElemenetById(\"id\")获得的直接是DOM对象，\n而Jquery的$(\"#id\")返回的是Jquery对象，是一个数组，用console.log()看一下就清楚了。\n$(\"#id\") = document.getElemenetById(\"id\")。\n\n我是通过$(\"#input-area\").value无法使用发现的。如果改成$(\"#input-area\")[0].value就正确了\n\n<input id=\"final-input-area\" type='text' placeholder=\"输入你想搜索的内容\" /><input id=\"icon\" style=\"color:transparent;\"/><!-- \n--><ul id=\"final-menu\">\n <li class=\"final-list-menu \">css课程</li><!-- \n --><li class=\"final-list-menu\">javascript课程</li><!-- \n --><li class=\"final-list-menu\">linux课程</li><!-- \n --><li class=\"final-list-menu\">R课程</li><!-- \n --><li class=\"final-list-menu\">C++课程</li>\n </ul>\n","source":"_posts/list-menu.md","raw":"title: 制作input下拉菜单\ndate: 2015-10-12 16:23:42\ntags: \n- css\n- Javascript\n---\n##[Demo](https://jsfiddle.net/17wgtvp1/)\n\n##画出输入框和图标\n\n<style type=\"text/css\">\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing:border-box;\n}\n\ninput {\n    border: 0;\n}\n\n#input-area {\n\tborder: 1px solid #e6e8e9;\n\t padding: 0 10px;\nheight: 30px;\nwidth: 150px;\n}\n#last-input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n#final-input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n#icon {\n\t\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n    cursor: pointer;\n    /*好厉害*/\n}\n   #menu{\n        border:1px solid #e6e8e9;\n       \n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n#last-menu{\nposition:absolute;\ndisplay:none;\n        border:1px solid #e6e8e9;\n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n    #final-menu{\nposition:absolute;\ndisplay:none;\n        border:1px solid #e6e8e9;\n       \n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n.list-menu{\n    \n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n    }\n   .final-list-menu{\n    \n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n  \n}\n.list-menu:hover{\n    background: #eee;\n}\n.final-list-menu:hover{\n    background: #eee;\n}\n</style>\n\n\n####消除两个元素之间的空格\n一般情况下，写html时都是有自动换行的：就像这样\n<!-- more-->\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" >\n<input id=\"icon\" />\n```\nCSS:\n```\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing:border-box;\n}\n\ninput {\n    border: 0;\n}\n\n#input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n\n#icon {\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n}\n```\n这时出来的效果是：\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" >\n<input id=\"icon\" style=\"cursor: default;\"/>\n\n解决办法是：\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" />\n```\n这样就可以消除两行元素的空格变成在一行内。\n\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" style=\"cursor: default;\"/>\n####如何隐藏光标\n\n你会发现上面的icon图标会有光标显现，如何隐藏光标呢？\n\n将icon的color设为tranparent即可。前提是你不需要在这个input内输入任何内容：\n```\n#icon {\n    color:tranparent;//隐藏光标\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n}\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" style=\"cursor: default;color:transparent;\"/>\n\n####如何让鼠标显示出链接选择样式\n\n作为icon的搜索图片，应该点击图片就能有搜索button的作用，但是鼠标移到上面时还是箭头，怎么办？要在外面套一个a标签吗？\n更便捷的方法是，在CSS属性上加上:\n\n```\n#icon {\n    color:tranparent;\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n    cursor:pointer;//改变鼠标样式\n}\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" style=\"cursor: default;color:transparent;cursor:pointer;\"/>\n\n可以用Jquery的click事件进行链接。\n\n##制作下拉菜单\n\n```\n<input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" />\n\n<ul id=\"menu\">\n    <li class=\"list-menu list1\">css课程</li>\n    <li class=\"list-menu list2\">javascript课程</li>\n    <li class=\"list-menu list3\">linux课程</li>\n    <li class=\"list-menu list4\">R课程</li>\n    <li class=\"list-menu list5\">C++课程</li>\n</ul>\n```\nCSS:\n```\n #menu{\n        border:1px solid #e6e8e9;\n        position: absolute;\n        width: 150px;\n        background: white;\n      \n    }\n.list-menu{\n    \n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n    \n}\n.list-menu:hover{\n    background: #eee;\n}\n```\n\n <input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><input id=\"icon\" style=\"color:transparent;\"/><!-- \n    --><ul id=\"menu\">\n     <li class=\"list-menu list1\">css课程</li><!-- \n     --><li class=\"list-menu list2\">javascript课程</li><!-- \n     --><li class=\"list-menu list3\">linux课程</li><!-- \n     --><li class=\"list-menu list4\">R课程</li><!-- \n     --><li class=\"list-menu list5\">C++课程</li>\n\n##点击输入框时下拉菜单出现 点击其他位置下拉菜单隐藏\n\n一般情况下，下拉菜单应该是隐藏的，鼠标点击到输入框时浮现，点击网页的其他地方，下拉框消失。这需要用到JS和Jquery库。\n\n####点击输入框下拉框浮现\n\n首先要在#menu加上display:none\n\n```\n#menu{\n        display: none;\n        border:1px solid #e6e8e9;\n        position: absolute;\n        width: 150px;\n        background: white;\n    }\n```\n接下来实现点击input时display变为block即可。\n\n我最先想到的是\nJavascript:\n```\n   $(\"#input-area\").click(function() {\n        $(\"#menu\").css(\"display\",\"block\");\n        // body...\n    })\n```\n\n但如何在其他地方点击，能够隐藏menu呢？\n最终参考了[Jquery的例程](https://api.jquery.com/event.target/)\n```\nfunction handler( event ) {\n  var target = $( event.target );\n \n  if ( target.is( $(\"#input-area\"))  ) {\n    $(\"#menu\").show();\n  }\n  else\n    $(\"#menu\").hide();\n}\n$(\"html\").click(handler);\n\n```\n注意：hide(),show()函数只针对dispaly:none,对于visibility:hidden没有用。\n<input id=\"last-input-area\" type='text' placeholder=\"输入你想搜索的内容\" /><input id=\"icon\" style=\"color:transparent;\"/><!-- \n--><ul id=\"last-menu\">\n <li class=\"list-menu \">css课程</li><!-- \n --><li class=\"list-menu \">javascript课程</li><!-- \n --><li class=\"list-menu \">linux课程</li><!-- \n --><li class=\"list-menu \">R课程</li><!-- \n --><li class=\"list-menu \">C++课程</li>\n </ul>\n\n顺便这里隆重推出absolute的用法，你会发现我的下拉菜单是覆盖在页面上的，如何实现的这个效果呢？直接在#menu中加上position:absolute属性即可，且父元素不要加position：relative.好神奇！其实我这篇文章也是根据这个课程引出的：[absolute深入理解](http://www.imooc.com/video/4462)\n##鼠标选择下拉菜单选项填入input框内\n\n鼠标点击li标签的内容，返回其文本：\n```\n$(\".list-menu\").click(function(e){\nconsole.log(e.target.innerHTML);\n```\n其中e.target.innerHTML就是其文本。\n\n\n并将文本传入input框内：\n```\n$(\".list-menu\").click(function(e){\nconsole.log(e.target.innerHTML);\n document.getElementById(\"input-area\").value = e.target.innerHTML;\n});\n```\n> 这里注意：Jquery的$(\"#id\")和document.getElemenetById(\"id\")是不完全一样的。document.getElemenetById(\"id\")获得的直接是DOM对象，\n而Jquery的$(\"#id\")返回的是Jquery对象，是一个数组，用console.log()看一下就清楚了。\n$(\"#id\") = document.getElemenetById(\"id\")。\n\n我是通过$(\"#input-area\").value无法使用发现的。如果改成$(\"#input-area\")[0].value就正确了\n\n<input id=\"final-input-area\" type='text' placeholder=\"输入你想搜索的内容\" /><input id=\"icon\" style=\"color:transparent;\"/><!-- \n--><ul id=\"final-menu\">\n <li class=\"final-list-menu \">css课程</li><!-- \n --><li class=\"final-list-menu\">javascript课程</li><!-- \n --><li class=\"final-list-menu\">linux课程</li><!-- \n --><li class=\"final-list-menu\">R课程</li><!-- \n --><li class=\"final-list-menu\">C++课程</li>\n </ul>\n","slug":"list-menu","published":1,"updated":"2015-10-13T02:36:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo6o001sllsg6qcrxxpv","content":"<h2 id=\"Demo\"><a href=\"https://jsfiddle.net/17wgtvp1/\" target=\"_blank\" rel=\"external\">Demo</a></h2><h2 id=\"画出输入框和图标\">画出输入框和图标</h2><style type=\"text/css\">\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing:border-box;\n}\n\ninput {\n    border: 0;\n}\n\n#input-area {\n    border: 1px solid #e6e8e9;\n     padding: 0 10px;\nheight: 30px;\nwidth: 150px;\n}\n#last-input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n#final-input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n#icon {\n\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n    cursor: pointer;\n    /*好厉害*/\n}\n   #menu{\n        border:1px solid #e6e8e9;\n\n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n#last-menu{\nposition:absolute;\ndisplay:none;\n        border:1px solid #e6e8e9;\n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n    #final-menu{\nposition:absolute;\ndisplay:none;\n        border:1px solid #e6e8e9;\n\n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n.list-menu{\n\n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n    }\n   .final-list-menu{\n\n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n\n}\n.list-menu:hover{\n    background: #eee;\n}\n.final-list-menu:hover{\n    background: #eee;\n}\n</style>\n\n\n<h4 id=\"消除两个元素之间的空格\">消除两个元素之间的空格</h4><p>一般情况下，写html时都是有自动换行的：就像这样<br><a id=\"more\"></a><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">input</span> id=<span class=\"string\">\"input-area\"</span> type=<span class=\"string\">'text'</span> placeholder=<span class=\"string\">\"输入你想搜索的内容\"</span> &gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">input</span> id=<span class=\"string\">\"icon\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#input-area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#e6e8e9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这时出来的效果是：</p>\n<p><input id=\"input-area\" type=\"text\" placeholder=\"输入你想搜索的内容\"></p>\n<input id=\"icon\" style=\"cursor: default;\">\n\n<p>解决办法是：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input-area\"</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入你想搜索的内容\"</span> &gt;</span><span class=\"comment\">&lt;!--</span><br><span class=\"line\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"icon\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样就可以消除两行元素的空格变成在一行内。</p>\n<p><input id=\"input-area\" type=\"text\" placeholder=\"输入你想搜索的内容\"><!--\n--><input id=\"icon\" style=\"cursor: default;\"></p>\n<h4 id=\"如何隐藏光标\">如何隐藏光标</h4><p>你会发现上面的icon图标会有光标显现，如何隐藏光标呢？</p>\n<p>将icon的color设为tranparent即可。前提是你不需要在这个input内输入任何内容：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:tranparent;<span class=\"comment\">//隐藏光标</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: url(<span class=\"string\">http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg</span>) no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><input id=\"input-area\" type=\"text\" placeholder=\"输入你想搜索的内容\"><!--\n--><input id=\"icon\" style=\"cursor: default;color:transparent;\"></p>\n<h4 id=\"如何让鼠标显示出链接选择样式\">如何让鼠标显示出链接选择样式</h4><p>作为icon的搜索图片，应该点击图片就能有搜索button的作用，但是鼠标移到上面时还是箭头，怎么办？要在外面套一个a标签吗？<br>更便捷的方法是，在CSS属性上加上:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:tranparent;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: url(<span class=\"string\">http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg</span>) no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>:pointer;<span class=\"comment\">//改变鼠标样式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><input id=\"input-area\" type=\"text\" placeholder=\"输入你想搜索的内容\"><!--\n--><input id=\"icon\" style=\"cursor: default;color:transparent;cursor:pointer;\"></p>\n<p>可以用Jquery的click事件进行链接。</p>\n<h2 id=\"制作下拉菜单\">制作下拉菜单</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input-area\"</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入你想搜索的内容\"</span> &gt;</span><span class=\"comment\">&lt;!--</span><br><span class=\"line\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"icon\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list1\"</span>&gt;</span>css课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list2\"</span>&gt;</span>javascript课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list3\"</span>&gt;</span>linux课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list4\"</span>&gt;</span>R课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list5\"</span>&gt;</span>C++课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-id\">#menu</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#e6e8e9</span>;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.list-menu</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.list-menu</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> <input id=\"input-area\" type=\"text\" placeholder=\"输入你想搜索的内容\"><input id=\"icon\" style=\"color:transparent;\"><!-- \n    --><ul id=\"menu\"><br>     <li class=\"list-menu list1\">css课程</li><!-- \n     --><li class=\"list-menu list2\">javascript课程</li><!-- \n     --><li class=\"list-menu list3\">linux课程</li><!-- \n     --><li class=\"list-menu list4\">R课程</li><!-- \n     --><li class=\"list-menu list5\">C++课程</li></ul></p>\n<h2 id=\"点击输入框时下拉菜单出现_点击其他位置下拉菜单隐藏\">点击输入框时下拉菜单出现 点击其他位置下拉菜单隐藏</h2><p>一般情况下，下拉菜单应该是隐藏的，鼠标点击到输入框时浮现，点击网页的其他地方，下拉框消失。这需要用到JS和Jquery库。</p>\n<h4 id=\"点击输入框下拉框浮现\">点击输入框下拉框浮现</h4><p>首先要在#menu加上display:none</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#menu</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#e6e8e9</span>;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>接下来实现点击input时display变为block即可。</p>\n<p>我最先想到的是<br>Javascript:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#input-area\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     $(<span class=\"string\">\"#menu\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</span><br><span class=\"line\">     <span class=\"comment\">// body...</span></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>但如何在其他地方点击，能够隐藏menu呢？<br>最终参考了<a href=\"https://api.jquery.com/event.target/\" target=\"_blank\" rel=\"external\">Jquery的例程</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"> event </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = $( event.target );</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( target.is( $(<span class=\"string\">\"#input-area\"</span>))  ) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">\"#menu\"</span>).show();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    $(<span class=\"string\">\"#menu\"</span>).hide();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"string\">\"html\"</span>).click(handler);</span><br></pre></td></tr></table></figure></p>\n<p>注意：hide(),show()函数只针对dispaly:none,对于visibility:hidden没有用。</p>\n<p><input id=\"last-input-area\" type=\"text\" placeholder=\"输入你想搜索的内容\"><input id=\"icon\" style=\"color:transparent;\"><!-- \n--><ul id=\"last-menu\"><br> <li class=\"list-menu \">css课程</li><!-- \n --><li class=\"list-menu \">javascript课程</li><!-- \n --><li class=\"list-menu \">linux课程</li><!-- \n --><li class=\"list-menu \">R课程</li><!-- \n --><li class=\"list-menu \">C++课程</li><br> </ul></p>\n<p>顺便这里隆重推出absolute的用法，你会发现我的下拉菜单是覆盖在页面上的，如何实现的这个效果呢？直接在#menu中加上position:absolute属性即可，且父元素不要加position：relative.好神奇！其实我这篇文章也是根据这个课程引出的：<a href=\"http://www.imooc.com/video/4462\" target=\"_blank\" rel=\"external\">absolute深入理解</a></p>\n<h2 id=\"鼠标选择下拉菜单选项填入input框内\">鼠标选择下拉菜单选项填入input框内</h2><p>鼠标点击li标签的内容，返回其文本：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\".list-menu\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e.target.innerHTML);</span><br></pre></td></tr></table></figure></p>\n<p>其中e.target.innerHTML就是其文本。</p>\n<p>并将文本传入input框内：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\".list-menu\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e.target.innerHTML);</span><br><span class=\"line\"> <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"input-area\"</span>).value = e.target.innerHTML;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里注意：Jquery的$(“#id”)和document.getElemenetById(“id”)是不完全一样的。document.getElemenetById(“id”)获得的直接是DOM对象，<br>而Jquery的$(“#id”)返回的是Jquery对象，是一个数组，用console.log()看一下就清楚了。<br>$(“#id”) = document.getElemenetById(“id”)。</p>\n</blockquote>\n<p>我是通过$(“#input-area”).value无法使用发现的。如果改成$(“#input-area”)[0].value就正确了</p>\n<p><input id=\"final-input-area\" type=\"text\" placeholder=\"输入你想搜索的内容\"><input id=\"icon\" style=\"color:transparent;\"><!-- \n--><ul id=\"final-menu\"><br> <li class=\"final-list-menu \">css课程</li><!-- \n --><li class=\"final-list-menu\">javascript课程</li><!-- \n --><li class=\"final-list-menu\">linux课程</li><!-- \n --><li class=\"final-list-menu\">R课程</li><!-- \n --><li class=\"final-list-menu\">C++课程</li><br> </ul></p>\n","excerpt":"<h2 id=\"Demo\"><a href=\"https://jsfiddle.net/17wgtvp1/\">Demo</a></h2><h2 id=\"画出输入框和图标\">画出输入框和图标</h2><style type=\"text/css\">\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing:border-box;\n}\n\ninput {\n    border: 0;\n}\n\n#input-area {\n    border: 1px solid #e6e8e9;\n     padding: 0 10px;\nheight: 30px;\nwidth: 150px;\n}\n#last-input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n#final-input-area {\n    border: 1px solid #e6e8e9;\n    padding: 0 10px;\n    height: 30px;\n    width: 150px;\n}\n#icon {\n\n    width: 30px;\n    height: 30px;\n    background: url(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;\n    background-size: contain;\n    cursor: pointer;\n    /*好厉害*/\n}\n   #menu{\n        border:1px solid #e6e8e9;\n\n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n#last-menu{\nposition:absolute;\ndisplay:none;\n        border:1px solid #e6e8e9;\n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n    #final-menu{\nposition:absolute;\ndisplay:none;\n        border:1px solid #e6e8e9;\n\n        width: 150px;\n        background: white;\n          margin-left: -0.5px;\n        margin-top: -22px;\n    }\n.list-menu{\n\n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n    }\n   .final-list-menu{\n\n    font-size: 10px;\n    padding: 10px 0;\n    list-style-type: none;\n\n}\n.list-menu:hover{\n    background: #eee;\n}\n.final-list-menu:hover{\n    background: #eee;\n}\n</style>\n\n\n<h4 id=\"消除两个元素之间的空格\">消除两个元素之间的空格</h4><p>一般情况下，写html时都是有自动换行的：就像这样<br>","more":"<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">input</span> id=<span class=\"string\">\"input-area\"</span> type=<span class=\"string\">'text'</span> placeholder=<span class=\"string\">\"输入你想搜索的内容\"</span> &gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">input</span> id=<span class=\"string\">\"icon\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#input-area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#e6e8e9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg) no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这时出来的效果是：</p>\n<p><input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ></p>\n<input id=\"icon\" style=\"cursor: default;\"/>\n\n<p>解决办法是：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input-area\"</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入你想搜索的内容\"</span> &gt;</span><span class=\"comment\">&lt;!--</span><br><span class=\"line\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"icon\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样就可以消除两行元素的空格变成在一行内。</p>\n<p><input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" style=\"cursor: default;\"/></p>\n<h4 id=\"如何隐藏光标\">如何隐藏光标</h4><p>你会发现上面的icon图标会有光标显现，如何隐藏光标呢？</p>\n<p>将icon的color设为tranparent即可。前提是你不需要在这个input内输入任何内容：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:tranparent;<span class=\"comment\">//隐藏光标</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: url(<span class=\"string\">http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg</span>) no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" style=\"cursor: default;color:transparent;\"/></p>\n<h4 id=\"如何让鼠标显示出链接选择样式\">如何让鼠标显示出链接选择样式</h4><p>作为icon的搜索图片，应该点击图片就能有搜索button的作用，但是鼠标移到上面时还是箭头，怎么办？要在外面套一个a标签吗？<br>更便捷的方法是，在CSS属性上加上:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:tranparent;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: url(<span class=\"string\">http://ww4.sinaimg.cn/large/74311666jw1ewyg87xugqj2074074wel.jpg</span>) no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: contain;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>:pointer;<span class=\"comment\">//改变鼠标样式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><!--\n--><input id=\"icon\" style=\"cursor: default;color:transparent;cursor:pointer;\"/></p>\n<p>可以用Jquery的click事件进行链接。</p>\n<h2 id=\"制作下拉菜单\">制作下拉菜单</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input-area\"</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入你想搜索的内容\"</span> &gt;</span><span class=\"comment\">&lt;!--</span><br><span class=\"line\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"icon\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list1\"</span>&gt;</span>css课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list2\"</span>&gt;</span>javascript课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list3\"</span>&gt;</span>linux课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list4\"</span>&gt;</span>R课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-menu list5\"</span>&gt;</span>C++课程<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-id\">#menu</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#e6e8e9</span>;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.list-menu</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.list-menu</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> <input id=\"input-area\" type='text' placeholder=\"输入你想搜索的内容\" ><input id=\"icon\" style=\"color:transparent;\"/><!-- \n    --><ul id=\"menu\"><br>     <li class=\"list-menu list1\">css课程</li><!-- \n     --><li class=\"list-menu list2\">javascript课程</li><!-- \n     --><li class=\"list-menu list3\">linux课程</li><!-- \n     --><li class=\"list-menu list4\">R课程</li><!-- \n     --><li class=\"list-menu list5\">C++课程</li></p>\n<h2 id=\"点击输入框时下拉菜单出现_点击其他位置下拉菜单隐藏\">点击输入框时下拉菜单出现 点击其他位置下拉菜单隐藏</h2><p>一般情况下，下拉菜单应该是隐藏的，鼠标点击到输入框时浮现，点击网页的其他地方，下拉框消失。这需要用到JS和Jquery库。</p>\n<h4 id=\"点击输入框下拉框浮现\">点击输入框下拉框浮现</h4><p>首先要在#menu加上display:none</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#menu</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#e6e8e9</span>;</span><br><span class=\"line\">        <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>接下来实现点击input时display变为block即可。</p>\n<p>我最先想到的是<br>Javascript:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#input-area\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     $(<span class=\"string\">\"#menu\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</span><br><span class=\"line\">     <span class=\"comment\">// body...</span></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>但如何在其他地方点击，能够隐藏menu呢？<br>最终参考了<a href=\"https://api.jquery.com/event.target/\">Jquery的例程</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"> event </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = $( event.target );</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( target.is( $(<span class=\"string\">\"#input-area\"</span>))  ) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">\"#menu\"</span>).show();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    $(<span class=\"string\">\"#menu\"</span>).hide();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"string\">\"html\"</span>).click(handler);</span><br></pre></td></tr></table></figure></p>\n<p>注意：hide(),show()函数只针对dispaly:none,对于visibility:hidden没有用。</p>\n<p><input id=\"last-input-area\" type='text' placeholder=\"输入你想搜索的内容\" /><input id=\"icon\" style=\"color:transparent;\"/><!-- \n--><ul id=\"last-menu\"><br> <li class=\"list-menu \">css课程</li><!-- \n --><li class=\"list-menu \">javascript课程</li><!-- \n --><li class=\"list-menu \">linux课程</li><!-- \n --><li class=\"list-menu \">R课程</li><!-- \n --><li class=\"list-menu \">C++课程</li><br> </ul></p>\n<p>顺便这里隆重推出absolute的用法，你会发现我的下拉菜单是覆盖在页面上的，如何实现的这个效果呢？直接在#menu中加上position:absolute属性即可，且父元素不要加position：relative.好神奇！其实我这篇文章也是根据这个课程引出的：<a href=\"http://www.imooc.com/video/4462\">absolute深入理解</a></p>\n<h2 id=\"鼠标选择下拉菜单选项填入input框内\">鼠标选择下拉菜单选项填入input框内</h2><p>鼠标点击li标签的内容，返回其文本：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\".list-menu\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e.target.innerHTML);</span><br></pre></td></tr></table></figure></p>\n<p>其中e.target.innerHTML就是其文本。</p>\n<p>并将文本传入input框内：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\".list-menu\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e.target.innerHTML);</span><br><span class=\"line\"> <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"input-area\"</span>).value = e.target.innerHTML;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里注意：Jquery的$(“#id”)和document.getElemenetById(“id”)是不完全一样的。document.getElemenetById(“id”)获得的直接是DOM对象，<br>而Jquery的$(“#id”)返回的是Jquery对象，是一个数组，用console.log()看一下就清楚了。<br>$(“#id”) = document.getElemenetById(“id”)。</p>\n</blockquote>\n<p>我是通过$(“#input-area”).value无法使用发现的。如果改成$(“#input-area”)[0].value就正确了</p>\n<p><input id=\"final-input-area\" type='text' placeholder=\"输入你想搜索的内容\" /><input id=\"icon\" style=\"color:transparent;\"/><!-- \n--><ul id=\"final-menu\"><br> <li class=\"final-list-menu \">css课程</li><!-- \n --><li class=\"final-list-menu\">javascript课程</li><!-- \n --><li class=\"final-list-menu\">linux课程</li><!-- \n --><li class=\"final-list-menu\">R课程</li><!-- \n --><li class=\"final-list-menu\">C++课程</li><br> </ul></p>"},{"title":"开题报告","date":"2016-01-09T06:59:16.000Z","_content":"<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n## 选题依据\n1. 四旋翼相比于单旋翼、双旋翼直升机和固定翼飞机机械结构简单。\n\n当旋翼由发动机通过旋转轴带动旋转时，旋翼给空气以作用力矩(或称扭矩)，空气必然在同一时间以大小相等、方向相反的反作用力矩作用于旋翼(或称反扭矩)，从而再通过旋翼将这一反作用力矩传递到机体上。\n为了平衡这个来自空气的反作用力矩，直升机使用了单旋翼尾桨，共轴、纵列、横列、交叉双旋翼等多种布局。设计在结构上比使用多旋翼要复杂。通过改变旋翼桨盘倾角实现滚转、俯仰力矩的变化。通过改变尾桨的拉力大小配合扭矩实现偏航力矩的变化。机械复杂程度高，操作复杂性高。\n四旋翼仅仅通过调整不同旋翼之间的相对速度来调节不同位置的推力，并调整各个旋翼的旋转方向平衡反扭力矩，就可以控制飞机维持姿态、或完成各种机动飞行。\n相比于固定翼可以垂直起降，降低了起飞着陆的要求，可悬停，机动性强，入门门槛低。\n由于结构的简单，如电机，电子调速器，螺旋桨，电池，机架的损坏更容易替换，降低了维修成本。\n\n2. 目前的四轴是由电动机控制旋翼转速，依靠控制脉冲信号的占空比就能准确控制电压，从而控制电机的稳定输出，响应速度快且精准。如果使用油动机，建立油动机的状态方程需要考虑进气量、进油量、燃油燃烧程度还有燃气膨胀产生的推力之间的关系、机械传动效率等，必然产生延迟，且模型复杂。\n\n3. 使用电池作为能源的缺点是，质量大，效率低，且电池重量不随着电源消耗而减少，飞机升力全部由电池供给，能量转换效率低下。\n所以不适用于大型的四旋翼。且旋翼的尺寸越大，导致轴距加大，效率取决于旋翼的投影面积与飞机的总投影面积的比值。且尺寸越大，转动惯量（I=mr^2）也越大。从而产生的陀螺力矩也会很大。由于陀螺效应 \n\n> 對於一高速轉動的物體，在迫使它改變空間方向的物體上將受到一陀螺力矩。這種效應稱為陀螺效應。\n\n桨对转速调节的反应也会减慢。降低了灵活度。如果要加大尺寸且不降低响应速度可以使用变距（直升机就是通过这种方法来改变升力），然而变距机械结构也较复杂，尤其是对加工的精密度要求较高。所以总而言之目前的研究方向主要集中于中小型的四旋翼。\n4. 四旋翼是四个电机的输出作为输入量控制6个自由度的输出：滚转轴，俯仰轴，偏航轴的姿态角变化，以及方向上的位移。属于欠驱动系统。具有耦合性和非线性等特点。学科涉及空气动力学、自动控制技术、图像处理技术等具有较高的研究价值。\n5. 应用市场广阔\n    很多人通过大疆无人机了解到航拍，电影的空中拍摄可以不再借助直升机，极大降低了航拍的成本和难度，但无人机不仅仅限于航拍，无人机可以成为一个空中的智能载体，携带更多智能设备。不仅搭载摄像机，也可以搭载测量工具，通信工具，或者运送快递。也可以作为军事应用，侦查、监视；农业应用，喷洒农药、获取农田信息；抢险救灾，到达高危领域执行任务。就像智能手机和笔记本电脑，随着制造成本的下降，无人机将会日益成为一种日用品。\n\n## 国内外研究现状\n1. 沉寂期\n\n在 1990 年以前，惯性导航体积重量过大，动力系统载荷也不够，因此当时多旋翼设计得很大。正如前面分析的，大尺寸的多旋翼并没有那么大优势，与多旋翼相比，固定翼和直升机更适合发展大尺寸。在此之后的 30 年中，四旋翼飞行器的研发没有取得太大的进展，几近沉寂。\n\n2. 复苏期\n\n1990 年至 2005 年，20 世纪 90 年代之后，随着微机电系统（MEMS, Micro-Electro-Mechanical System）研究的成熟，重量只有几克的 MEMS 惯性导航系统\n>（惯性导航系统至少包括计算机及含有加速度计、陀螺仪或其他运动传感器的平台（或模块））\n\n被开发运用，使制作多旋翼飞行器的自动控制器成为现实。\n虽然 MEMS 惯性导航系统已被广泛应用，但是 MEMS 传感器数据噪音很大，不能直接读取并使用，于是人们又花费大量的时间研究去除噪声的各种数学算法。这些算法以及自动控制器本身通常需要运算速度较快的单片机，可当时的单片机运算速度有限，不足以满足需求。接着科研人员又花费若干年理解多旋翼飞行器的非线性系统结构，并为其建模、设计控制算法、实现控制方案。因此，直到 2005 年左右，真正稳定的多旋翼无人机自动控制器才被制作出来。\n\n3. 起步期：2005 年至 2010 年\n\n在生产制造方面，德国 Microdrones GmbH 于 2005 年成立，2006 年推出的 md4-200 四旋翼（如图 a）系统开创了电动四旋翼在专业领域应用的先河，2010 年推出的 md4-1000 四旋翼无人机系统，在全球专业无人机市场取得成功。另外，德国人 H.Buss 和 I.Busker 在 2006 年主导了一个四轴开源项目，从飞控到电调等全部开源，推出了四轴飞行器最具参考的自驾仪 Mikrokopter。\n在学术方面，2005 年之后四旋翼飞行器继续快速发展，更多的学术研究人员开始研究多旋翼，并搭建自己的四旋翼。\n\n4. 复兴期：2010 年至 2013 年\n\n经过 6 年努力（2004 年至 2010 年），法国 Parrot 公司于 2010 年推出消费级的 AR.Drone 四旋翼玩具，从而开启了多旋翼消费的新时代。\n两年后，大疆推出的小精灵 Phantom 一体机 ( 图 b ) 正是借鉴了其设计理念。伴随着苹果在 iPhone 上大量应用加速计、陀螺仪、地磁传感器等，MEMS 惯性传感器从 2011 年开始大规模兴起，6 轴、9 轴的惯性传感器也逐渐取代了单个传感器，成本和功耗进一步降低，成本仅为几美元。另外 GPS 芯片仅重 0.3 克，价格不到 5 美元。WiFi 等通信芯片被用于控制和传输图像信息，通信传输速度和质量已经可以充分满足几百米的传输需求。同时，电池能量密度不断增加，使无人机在保持较轻的重量下，续航时间达到 15-30 分钟，基本满足日常的应用需求。近年来移动终端同样促进了锂电池、高像素摄像头性能的急剧提升和成本下降。这些都促进了多旋翼更进一步发展。\n\n与此同时，学术界也开始高度关注多旋翼技术。2012 年 2 月，宾夕法尼亚大学的 V.Kumar 教授在 TED 大会上做出了四旋翼飞行器发展历史上里程碑式的演讲，展示了四旋翼的灵活性以及编队协作能力。这一场充满数学公式的演讲大受欢迎，它让世人看到了多旋翼的内在潜能。\n2012 年，美国工程师协会的机器人和自动化杂志（Robotics & Automation Magazine,IEEE）出版空中机器人和四旋翼（Aerial Robotics and the Quadrotor）专刊，总结了阶段性成果，展示了当时最先进的技术。\n\n5. 2013年至今\n\n2012 年初，大疆推出小精灵 Phantom 一体机。Phantom 与 AR.Drone 一样控制简便，初学者很快便可上手。同时，价格也能被普通消费者接受。相比 AR.Drone 四旋翼飞行器，Phantom 具备一定的抗风性能、定位功能和载重能力，还可搭载小型相机。当时利用 Gopro 运动相机拍摄极限运动已经成为欧美年轻人竞相追逐的时尚潮流，因此 Phantom 一体机一经推出便迅速走红。\n此时，学术界对于多旋翼的研究更偏向智能化、群体化。2013 年，苏黎世联邦理工学院的 Raffaello D'Andrea 教授在 TEDGlobal 的机器人实验室展示了四旋翼的惊人运动机能。纵观学术界的发展，以 \" 四旋翼 ( quadrotor/quadcoptor ) \" 和 \" 多旋翼（multirotor）\" 为关键词的文献在近年成井喷趋势。这些研究往往具备前瞻性，将推动多旋翼产业未来的发展。\n\n","source":"_posts/report.md","raw":"title: 开题报告\ndate: 2016-01-09 14:59:16\ntags:\n---\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n## 选题依据\n1. 四旋翼相比于单旋翼、双旋翼直升机和固定翼飞机机械结构简单。\n\n当旋翼由发动机通过旋转轴带动旋转时，旋翼给空气以作用力矩(或称扭矩)，空气必然在同一时间以大小相等、方向相反的反作用力矩作用于旋翼(或称反扭矩)，从而再通过旋翼将这一反作用力矩传递到机体上。\n为了平衡这个来自空气的反作用力矩，直升机使用了单旋翼尾桨，共轴、纵列、横列、交叉双旋翼等多种布局。设计在结构上比使用多旋翼要复杂。通过改变旋翼桨盘倾角实现滚转、俯仰力矩的变化。通过改变尾桨的拉力大小配合扭矩实现偏航力矩的变化。机械复杂程度高，操作复杂性高。\n四旋翼仅仅通过调整不同旋翼之间的相对速度来调节不同位置的推力，并调整各个旋翼的旋转方向平衡反扭力矩，就可以控制飞机维持姿态、或完成各种机动飞行。\n相比于固定翼可以垂直起降，降低了起飞着陆的要求，可悬停，机动性强，入门门槛低。\n由于结构的简单，如电机，电子调速器，螺旋桨，电池，机架的损坏更容易替换，降低了维修成本。\n\n2. 目前的四轴是由电动机控制旋翼转速，依靠控制脉冲信号的占空比就能准确控制电压，从而控制电机的稳定输出，响应速度快且精准。如果使用油动机，建立油动机的状态方程需要考虑进气量、进油量、燃油燃烧程度还有燃气膨胀产生的推力之间的关系、机械传动效率等，必然产生延迟，且模型复杂。\n\n3. 使用电池作为能源的缺点是，质量大，效率低，且电池重量不随着电源消耗而减少，飞机升力全部由电池供给，能量转换效率低下。\n所以不适用于大型的四旋翼。且旋翼的尺寸越大，导致轴距加大，效率取决于旋翼的投影面积与飞机的总投影面积的比值。且尺寸越大，转动惯量（I=mr^2）也越大。从而产生的陀螺力矩也会很大。由于陀螺效应 \n\n> 對於一高速轉動的物體，在迫使它改變空間方向的物體上將受到一陀螺力矩。這種效應稱為陀螺效應。\n\n桨对转速调节的反应也会减慢。降低了灵活度。如果要加大尺寸且不降低响应速度可以使用变距（直升机就是通过这种方法来改变升力），然而变距机械结构也较复杂，尤其是对加工的精密度要求较高。所以总而言之目前的研究方向主要集中于中小型的四旋翼。\n4. 四旋翼是四个电机的输出作为输入量控制6个自由度的输出：滚转轴，俯仰轴，偏航轴的姿态角变化，以及方向上的位移。属于欠驱动系统。具有耦合性和非线性等特点。学科涉及空气动力学、自动控制技术、图像处理技术等具有较高的研究价值。\n5. 应用市场广阔\n    很多人通过大疆无人机了解到航拍，电影的空中拍摄可以不再借助直升机，极大降低了航拍的成本和难度，但无人机不仅仅限于航拍，无人机可以成为一个空中的智能载体，携带更多智能设备。不仅搭载摄像机，也可以搭载测量工具，通信工具，或者运送快递。也可以作为军事应用，侦查、监视；农业应用，喷洒农药、获取农田信息；抢险救灾，到达高危领域执行任务。就像智能手机和笔记本电脑，随着制造成本的下降，无人机将会日益成为一种日用品。\n\n## 国内外研究现状\n1. 沉寂期\n\n在 1990 年以前，惯性导航体积重量过大，动力系统载荷也不够，因此当时多旋翼设计得很大。正如前面分析的，大尺寸的多旋翼并没有那么大优势，与多旋翼相比，固定翼和直升机更适合发展大尺寸。在此之后的 30 年中，四旋翼飞行器的研发没有取得太大的进展，几近沉寂。\n\n2. 复苏期\n\n1990 年至 2005 年，20 世纪 90 年代之后，随着微机电系统（MEMS, Micro-Electro-Mechanical System）研究的成熟，重量只有几克的 MEMS 惯性导航系统\n>（惯性导航系统至少包括计算机及含有加速度计、陀螺仪或其他运动传感器的平台（或模块））\n\n被开发运用，使制作多旋翼飞行器的自动控制器成为现实。\n虽然 MEMS 惯性导航系统已被广泛应用，但是 MEMS 传感器数据噪音很大，不能直接读取并使用，于是人们又花费大量的时间研究去除噪声的各种数学算法。这些算法以及自动控制器本身通常需要运算速度较快的单片机，可当时的单片机运算速度有限，不足以满足需求。接着科研人员又花费若干年理解多旋翼飞行器的非线性系统结构，并为其建模、设计控制算法、实现控制方案。因此，直到 2005 年左右，真正稳定的多旋翼无人机自动控制器才被制作出来。\n\n3. 起步期：2005 年至 2010 年\n\n在生产制造方面，德国 Microdrones GmbH 于 2005 年成立，2006 年推出的 md4-200 四旋翼（如图 a）系统开创了电动四旋翼在专业领域应用的先河，2010 年推出的 md4-1000 四旋翼无人机系统，在全球专业无人机市场取得成功。另外，德国人 H.Buss 和 I.Busker 在 2006 年主导了一个四轴开源项目，从飞控到电调等全部开源，推出了四轴飞行器最具参考的自驾仪 Mikrokopter。\n在学术方面，2005 年之后四旋翼飞行器继续快速发展，更多的学术研究人员开始研究多旋翼，并搭建自己的四旋翼。\n\n4. 复兴期：2010 年至 2013 年\n\n经过 6 年努力（2004 年至 2010 年），法国 Parrot 公司于 2010 年推出消费级的 AR.Drone 四旋翼玩具，从而开启了多旋翼消费的新时代。\n两年后，大疆推出的小精灵 Phantom 一体机 ( 图 b ) 正是借鉴了其设计理念。伴随着苹果在 iPhone 上大量应用加速计、陀螺仪、地磁传感器等，MEMS 惯性传感器从 2011 年开始大规模兴起，6 轴、9 轴的惯性传感器也逐渐取代了单个传感器，成本和功耗进一步降低，成本仅为几美元。另外 GPS 芯片仅重 0.3 克，价格不到 5 美元。WiFi 等通信芯片被用于控制和传输图像信息，通信传输速度和质量已经可以充分满足几百米的传输需求。同时，电池能量密度不断增加，使无人机在保持较轻的重量下，续航时间达到 15-30 分钟，基本满足日常的应用需求。近年来移动终端同样促进了锂电池、高像素摄像头性能的急剧提升和成本下降。这些都促进了多旋翼更进一步发展。\n\n与此同时，学术界也开始高度关注多旋翼技术。2012 年 2 月，宾夕法尼亚大学的 V.Kumar 教授在 TED 大会上做出了四旋翼飞行器发展历史上里程碑式的演讲，展示了四旋翼的灵活性以及编队协作能力。这一场充满数学公式的演讲大受欢迎，它让世人看到了多旋翼的内在潜能。\n2012 年，美国工程师协会的机器人和自动化杂志（Robotics & Automation Magazine,IEEE）出版空中机器人和四旋翼（Aerial Robotics and the Quadrotor）专刊，总结了阶段性成果，展示了当时最先进的技术。\n\n5. 2013年至今\n\n2012 年初，大疆推出小精灵 Phantom 一体机。Phantom 与 AR.Drone 一样控制简便，初学者很快便可上手。同时，价格也能被普通消费者接受。相比 AR.Drone 四旋翼飞行器，Phantom 具备一定的抗风性能、定位功能和载重能力，还可搭载小型相机。当时利用 Gopro 运动相机拍摄极限运动已经成为欧美年轻人竞相追逐的时尚潮流，因此 Phantom 一体机一经推出便迅速走红。\n此时，学术界对于多旋翼的研究更偏向智能化、群体化。2013 年，苏黎世联邦理工学院的 Raffaello D'Andrea 教授在 TEDGlobal 的机器人实验室展示了四旋翼的惊人运动机能。纵观学术界的发展，以 \" 四旋翼 ( quadrotor/quadcoptor ) \" 和 \" 多旋翼（multirotor）\" 为关键词的文献在近年成井喷趋势。这些研究往往具备前瞻性，将推动多旋翼产业未来的发展。\n\n","slug":"report","published":1,"updated":"2016-03-14T07:43:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo6o001tllsgqc04cf6g","content":"<p><script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script></p>\n<h2 id=\"选题依据\">选题依据</h2><ol>\n<li>四旋翼相比于单旋翼、双旋翼直升机和固定翼飞机机械结构简单。</li>\n</ol>\n<p>当旋翼由发动机通过旋转轴带动旋转时，旋翼给空气以作用力矩(或称扭矩)，空气必然在同一时间以大小相等、方向相反的反作用力矩作用于旋翼(或称反扭矩)，从而再通过旋翼将这一反作用力矩传递到机体上。<br>为了平衡这个来自空气的反作用力矩，直升机使用了单旋翼尾桨，共轴、纵列、横列、交叉双旋翼等多种布局。设计在结构上比使用多旋翼要复杂。通过改变旋翼桨盘倾角实现滚转、俯仰力矩的变化。通过改变尾桨的拉力大小配合扭矩实现偏航力矩的变化。机械复杂程度高，操作复杂性高。<br>四旋翼仅仅通过调整不同旋翼之间的相对速度来调节不同位置的推力，并调整各个旋翼的旋转方向平衡反扭力矩，就可以控制飞机维持姿态、或完成各种机动飞行。<br>相比于固定翼可以垂直起降，降低了起飞着陆的要求，可悬停，机动性强，入门门槛低。<br>由于结构的简单，如电机，电子调速器，螺旋桨，电池，机架的损坏更容易替换，降低了维修成本。</p>\n<ol>\n<li><p>目前的四轴是由电动机控制旋翼转速，依靠控制脉冲信号的占空比就能准确控制电压，从而控制电机的稳定输出，响应速度快且精准。如果使用油动机，建立油动机的状态方程需要考虑进气量、进油量、燃油燃烧程度还有燃气膨胀产生的推力之间的关系、机械传动效率等，必然产生延迟，且模型复杂。</p>\n</li>\n<li><p>使用电池作为能源的缺点是，质量大，效率低，且电池重量不随着电源消耗而减少，飞机升力全部由电池供给，能量转换效率低下。<br>所以不适用于大型的四旋翼。且旋翼的尺寸越大，导致轴距加大，效率取决于旋翼的投影面积与飞机的总投影面积的比值。且尺寸越大，转动惯量（I=mr^2）也越大。从而产生的陀螺力矩也会很大。由于陀螺效应 </p>\n</li>\n</ol>\n<blockquote>\n<p>對於一高速轉動的物體，在迫使它改變空間方向的物體上將受到一陀螺力矩。這種效應稱為陀螺效應。</p>\n</blockquote>\n<p>桨对转速调节的反应也会减慢。降低了灵活度。如果要加大尺寸且不降低响应速度可以使用变距（直升机就是通过这种方法来改变升力），然而变距机械结构也较复杂，尤其是对加工的精密度要求较高。所以总而言之目前的研究方向主要集中于中小型的四旋翼。</p>\n<ol>\n<li>四旋翼是四个电机的输出作为输入量控制6个自由度的输出：滚转轴，俯仰轴，偏航轴的姿态角变化，以及方向上的位移。属于欠驱动系统。具有耦合性和非线性等特点。学科涉及空气动力学、自动控制技术、图像处理技术等具有较高的研究价值。</li>\n<li>应用市场广阔<br> 很多人通过大疆无人机了解到航拍，电影的空中拍摄可以不再借助直升机，极大降低了航拍的成本和难度，但无人机不仅仅限于航拍，无人机可以成为一个空中的智能载体，携带更多智能设备。不仅搭载摄像机，也可以搭载测量工具，通信工具，或者运送快递。也可以作为军事应用，侦查、监视；农业应用，喷洒农药、获取农田信息；抢险救灾，到达高危领域执行任务。就像智能手机和笔记本电脑，随着制造成本的下降，无人机将会日益成为一种日用品。</li>\n</ol>\n<h2 id=\"国内外研究现状\">国内外研究现状</h2><ol>\n<li>沉寂期</li>\n</ol>\n<p>在 1990 年以前，惯性导航体积重量过大，动力系统载荷也不够，因此当时多旋翼设计得很大。正如前面分析的，大尺寸的多旋翼并没有那么大优势，与多旋翼相比，固定翼和直升机更适合发展大尺寸。在此之后的 30 年中，四旋翼飞行器的研发没有取得太大的进展，几近沉寂。</p>\n<ol>\n<li>复苏期</li>\n</ol>\n<p>1990 年至 2005 年，20 世纪 90 年代之后，随着微机电系统（MEMS, Micro-Electro-Mechanical System）研究的成熟，重量只有几克的 MEMS 惯性导航系统</p>\n<blockquote>\n<p>（惯性导航系统至少包括计算机及含有加速度计、陀螺仪或其他运动传感器的平台（或模块））</p>\n</blockquote>\n<p>被开发运用，使制作多旋翼飞行器的自动控制器成为现实。<br>虽然 MEMS 惯性导航系统已被广泛应用，但是 MEMS 传感器数据噪音很大，不能直接读取并使用，于是人们又花费大量的时间研究去除噪声的各种数学算法。这些算法以及自动控制器本身通常需要运算速度较快的单片机，可当时的单片机运算速度有限，不足以满足需求。接着科研人员又花费若干年理解多旋翼飞行器的非线性系统结构，并为其建模、设计控制算法、实现控制方案。因此，直到 2005 年左右，真正稳定的多旋翼无人机自动控制器才被制作出来。</p>\n<ol>\n<li>起步期：2005 年至 2010 年</li>\n</ol>\n<p>在生产制造方面，德国 Microdrones GmbH 于 2005 年成立，2006 年推出的 md4-200 四旋翼（如图 a）系统开创了电动四旋翼在专业领域应用的先河，2010 年推出的 md4-1000 四旋翼无人机系统，在全球专业无人机市场取得成功。另外，德国人 H.Buss 和 I.Busker 在 2006 年主导了一个四轴开源项目，从飞控到电调等全部开源，推出了四轴飞行器最具参考的自驾仪 Mikrokopter。<br>在学术方面，2005 年之后四旋翼飞行器继续快速发展，更多的学术研究人员开始研究多旋翼，并搭建自己的四旋翼。</p>\n<ol>\n<li>复兴期：2010 年至 2013 年</li>\n</ol>\n<p>经过 6 年努力（2004 年至 2010 年），法国 Parrot 公司于 2010 年推出消费级的 AR.Drone 四旋翼玩具，从而开启了多旋翼消费的新时代。<br>两年后，大疆推出的小精灵 Phantom 一体机 ( 图 b ) 正是借鉴了其设计理念。伴随着苹果在 iPhone 上大量应用加速计、陀螺仪、地磁传感器等，MEMS 惯性传感器从 2011 年开始大规模兴起，6 轴、9 轴的惯性传感器也逐渐取代了单个传感器，成本和功耗进一步降低，成本仅为几美元。另外 GPS 芯片仅重 0.3 克，价格不到 5 美元。WiFi 等通信芯片被用于控制和传输图像信息，通信传输速度和质量已经可以充分满足几百米的传输需求。同时，电池能量密度不断增加，使无人机在保持较轻的重量下，续航时间达到 15-30 分钟，基本满足日常的应用需求。近年来移动终端同样促进了锂电池、高像素摄像头性能的急剧提升和成本下降。这些都促进了多旋翼更进一步发展。</p>\n<p>与此同时，学术界也开始高度关注多旋翼技术。2012 年 2 月，宾夕法尼亚大学的 V.Kumar 教授在 TED 大会上做出了四旋翼飞行器发展历史上里程碑式的演讲，展示了四旋翼的灵活性以及编队协作能力。这一场充满数学公式的演讲大受欢迎，它让世人看到了多旋翼的内在潜能。<br>2012 年，美国工程师协会的机器人和自动化杂志（Robotics &amp; Automation Magazine,IEEE）出版空中机器人和四旋翼（Aerial Robotics and the Quadrotor）专刊，总结了阶段性成果，展示了当时最先进的技术。</p>\n<ol>\n<li>2013年至今</li>\n</ol>\n<p>2012 年初，大疆推出小精灵 Phantom 一体机。Phantom 与 AR.Drone 一样控制简便，初学者很快便可上手。同时，价格也能被普通消费者接受。相比 AR.Drone 四旋翼飞行器，Phantom 具备一定的抗风性能、定位功能和载重能力，还可搭载小型相机。当时利用 Gopro 运动相机拍摄极限运动已经成为欧美年轻人竞相追逐的时尚潮流，因此 Phantom 一体机一经推出便迅速走红。<br>此时，学术界对于多旋翼的研究更偏向智能化、群体化。2013 年，苏黎世联邦理工学院的 Raffaello D’Andrea 教授在 TEDGlobal 的机器人实验室展示了四旋翼的惊人运动机能。纵观学术界的发展，以 “ 四旋翼 ( quadrotor/quadcoptor ) “ 和 “ 多旋翼（multirotor）” 为关键词的文献在近年成井喷趋势。这些研究往往具备前瞻性，将推动多旋翼产业未来的发展。</p>\n","excerpt":"","more":"<p><script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script></p>\n<h2 id=\"选题依据\">选题依据</h2><ol>\n<li>四旋翼相比于单旋翼、双旋翼直升机和固定翼飞机机械结构简单。</li>\n</ol>\n<p>当旋翼由发动机通过旋转轴带动旋转时，旋翼给空气以作用力矩(或称扭矩)，空气必然在同一时间以大小相等、方向相反的反作用力矩作用于旋翼(或称反扭矩)，从而再通过旋翼将这一反作用力矩传递到机体上。<br>为了平衡这个来自空气的反作用力矩，直升机使用了单旋翼尾桨，共轴、纵列、横列、交叉双旋翼等多种布局。设计在结构上比使用多旋翼要复杂。通过改变旋翼桨盘倾角实现滚转、俯仰力矩的变化。通过改变尾桨的拉力大小配合扭矩实现偏航力矩的变化。机械复杂程度高，操作复杂性高。<br>四旋翼仅仅通过调整不同旋翼之间的相对速度来调节不同位置的推力，并调整各个旋翼的旋转方向平衡反扭力矩，就可以控制飞机维持姿态、或完成各种机动飞行。<br>相比于固定翼可以垂直起降，降低了起飞着陆的要求，可悬停，机动性强，入门门槛低。<br>由于结构的简单，如电机，电子调速器，螺旋桨，电池，机架的损坏更容易替换，降低了维修成本。</p>\n<ol>\n<li><p>目前的四轴是由电动机控制旋翼转速，依靠控制脉冲信号的占空比就能准确控制电压，从而控制电机的稳定输出，响应速度快且精准。如果使用油动机，建立油动机的状态方程需要考虑进气量、进油量、燃油燃烧程度还有燃气膨胀产生的推力之间的关系、机械传动效率等，必然产生延迟，且模型复杂。</p>\n</li>\n<li><p>使用电池作为能源的缺点是，质量大，效率低，且电池重量不随着电源消耗而减少，飞机升力全部由电池供给，能量转换效率低下。<br>所以不适用于大型的四旋翼。且旋翼的尺寸越大，导致轴距加大，效率取决于旋翼的投影面积与飞机的总投影面积的比值。且尺寸越大，转动惯量（I=mr^2）也越大。从而产生的陀螺力矩也会很大。由于陀螺效应 </p>\n</li>\n</ol>\n<blockquote>\n<p>對於一高速轉動的物體，在迫使它改變空間方向的物體上將受到一陀螺力矩。這種效應稱為陀螺效應。</p>\n</blockquote>\n<p>桨对转速调节的反应也会减慢。降低了灵活度。如果要加大尺寸且不降低响应速度可以使用变距（直升机就是通过这种方法来改变升力），然而变距机械结构也较复杂，尤其是对加工的精密度要求较高。所以总而言之目前的研究方向主要集中于中小型的四旋翼。</p>\n<ol>\n<li>四旋翼是四个电机的输出作为输入量控制6个自由度的输出：滚转轴，俯仰轴，偏航轴的姿态角变化，以及方向上的位移。属于欠驱动系统。具有耦合性和非线性等特点。学科涉及空气动力学、自动控制技术、图像处理技术等具有较高的研究价值。</li>\n<li>应用市场广阔<br> 很多人通过大疆无人机了解到航拍，电影的空中拍摄可以不再借助直升机，极大降低了航拍的成本和难度，但无人机不仅仅限于航拍，无人机可以成为一个空中的智能载体，携带更多智能设备。不仅搭载摄像机，也可以搭载测量工具，通信工具，或者运送快递。也可以作为军事应用，侦查、监视；农业应用，喷洒农药、获取农田信息；抢险救灾，到达高危领域执行任务。就像智能手机和笔记本电脑，随着制造成本的下降，无人机将会日益成为一种日用品。</li>\n</ol>\n<h2 id=\"国内外研究现状\">国内外研究现状</h2><ol>\n<li>沉寂期</li>\n</ol>\n<p>在 1990 年以前，惯性导航体积重量过大，动力系统载荷也不够，因此当时多旋翼设计得很大。正如前面分析的，大尺寸的多旋翼并没有那么大优势，与多旋翼相比，固定翼和直升机更适合发展大尺寸。在此之后的 30 年中，四旋翼飞行器的研发没有取得太大的进展，几近沉寂。</p>\n<ol>\n<li>复苏期</li>\n</ol>\n<p>1990 年至 2005 年，20 世纪 90 年代之后，随着微机电系统（MEMS, Micro-Electro-Mechanical System）研究的成熟，重量只有几克的 MEMS 惯性导航系统</p>\n<blockquote>\n<p>（惯性导航系统至少包括计算机及含有加速度计、陀螺仪或其他运动传感器的平台（或模块））</p>\n</blockquote>\n<p>被开发运用，使制作多旋翼飞行器的自动控制器成为现实。<br>虽然 MEMS 惯性导航系统已被广泛应用，但是 MEMS 传感器数据噪音很大，不能直接读取并使用，于是人们又花费大量的时间研究去除噪声的各种数学算法。这些算法以及自动控制器本身通常需要运算速度较快的单片机，可当时的单片机运算速度有限，不足以满足需求。接着科研人员又花费若干年理解多旋翼飞行器的非线性系统结构，并为其建模、设计控制算法、实现控制方案。因此，直到 2005 年左右，真正稳定的多旋翼无人机自动控制器才被制作出来。</p>\n<ol>\n<li>起步期：2005 年至 2010 年</li>\n</ol>\n<p>在生产制造方面，德国 Microdrones GmbH 于 2005 年成立，2006 年推出的 md4-200 四旋翼（如图 a）系统开创了电动四旋翼在专业领域应用的先河，2010 年推出的 md4-1000 四旋翼无人机系统，在全球专业无人机市场取得成功。另外，德国人 H.Buss 和 I.Busker 在 2006 年主导了一个四轴开源项目，从飞控到电调等全部开源，推出了四轴飞行器最具参考的自驾仪 Mikrokopter。<br>在学术方面，2005 年之后四旋翼飞行器继续快速发展，更多的学术研究人员开始研究多旋翼，并搭建自己的四旋翼。</p>\n<ol>\n<li>复兴期：2010 年至 2013 年</li>\n</ol>\n<p>经过 6 年努力（2004 年至 2010 年），法国 Parrot 公司于 2010 年推出消费级的 AR.Drone 四旋翼玩具，从而开启了多旋翼消费的新时代。<br>两年后，大疆推出的小精灵 Phantom 一体机 ( 图 b ) 正是借鉴了其设计理念。伴随着苹果在 iPhone 上大量应用加速计、陀螺仪、地磁传感器等，MEMS 惯性传感器从 2011 年开始大规模兴起，6 轴、9 轴的惯性传感器也逐渐取代了单个传感器，成本和功耗进一步降低，成本仅为几美元。另外 GPS 芯片仅重 0.3 克，价格不到 5 美元。WiFi 等通信芯片被用于控制和传输图像信息，通信传输速度和质量已经可以充分满足几百米的传输需求。同时，电池能量密度不断增加，使无人机在保持较轻的重量下，续航时间达到 15-30 分钟，基本满足日常的应用需求。近年来移动终端同样促进了锂电池、高像素摄像头性能的急剧提升和成本下降。这些都促进了多旋翼更进一步发展。</p>\n<p>与此同时，学术界也开始高度关注多旋翼技术。2012 年 2 月，宾夕法尼亚大学的 V.Kumar 教授在 TED 大会上做出了四旋翼飞行器发展历史上里程碑式的演讲，展示了四旋翼的灵活性以及编队协作能力。这一场充满数学公式的演讲大受欢迎，它让世人看到了多旋翼的内在潜能。<br>2012 年，美国工程师协会的机器人和自动化杂志（Robotics &amp; Automation Magazine,IEEE）出版空中机器人和四旋翼（Aerial Robotics and the Quadrotor）专刊，总结了阶段性成果，展示了当时最先进的技术。</p>\n<ol>\n<li>2013年至今</li>\n</ol>\n<p>2012 年初，大疆推出小精灵 Phantom 一体机。Phantom 与 AR.Drone 一样控制简便，初学者很快便可上手。同时，价格也能被普通消费者接受。相比 AR.Drone 四旋翼飞行器，Phantom 具备一定的抗风性能、定位功能和载重能力，还可搭载小型相机。当时利用 Gopro 运动相机拍摄极限运动已经成为欧美年轻人竞相追逐的时尚潮流，因此 Phantom 一体机一经推出便迅速走红。<br>此时，学术界对于多旋翼的研究更偏向智能化、群体化。2013 年，苏黎世联邦理工学院的 Raffaello D’Andrea 教授在 TEDGlobal 的机器人实验室展示了四旋翼的惊人运动机能。纵观学术界的发展，以 “ 四旋翼 ( quadrotor/quadcoptor ) “ 和 “ 多旋翼（multirotor）” 为关键词的文献在近年成井喷趋势。这些研究往往具备前瞻性，将推动多旋翼产业未来的发展。</p>\n"},{"title":"科研报告","date":"2015-08-18T08:37:21.000Z","_content":"####  FLY 竹蜻蜓\n-----\n\n暑假回来，有一点假期综合征，完全不想科研，为了学习一下markdown，就在sublime text3 上安装了markdown preview 插件来写报告，暂时不使用latex。\n\n为了给导师汇报，那就总结一下一个月前的科研工作（对，暑假放了快一个月）。\n\n先总结一下上学期做的工作，和需要完成的工作:\n\n- [x] 利用NRF24L01模块，将战舰开发板与四轴对接，做成了一个简单的遥控器。（遇到了丢包的问题不过换了原装的就好了）\n- [x] 搞清楚了ANO FLY 匿名上位机的协议，由上位机看姿态角波形，为调PID提供方便。\n- [x] 利用上位机调试PID，能勉强实现单通道的姿态平衡。\n- [ ] 开发原装遥控器\n- [ ] 调节好PID，使飞机能飞起来\n- [ ] 学习飞控算法，阅读相关论文\n\n<!--more-->\n## NRF24L01模块\n\nNRF24L01使用SPI接口进行设置（之前已经用过的蓝牙模块和usb转串口模块是使用IIC接口进行通讯），再次熟悉了SPI通信协议。\n\n由于战舰开发板已经有成套的NRF24L01的程序，所以选择了使用战舰开发板作为遥控器，缩短开发时间。只是把接收端从另一个战舰开发板（源程序是两块战舰开发板互相通信）改为四轴即可。\n\n## #程序流程：\n\n#### 1. 发送端\n![发送端程序流程图](http://7xk7fp.com1.z0.glb.clouddn.com/15.png)\n#### 2. 接收端\n![接收端程序流程图](http://7xk7fp.com1.z0.glb.clouddn.com/14.png)\n\n### 遇到的问题：\n\n* NRF24L01的调试一直失败\n\n> 问题描述：在检测是否NRF24L01存在的程序中，一直false，即四轴上的NRF24L01模块无法成功配置。由于是战舰开发板的程序直接移植过来的，在战舰开发板上也能调通，所以查了一晚上也没能找到问题。\n\n> 问题原因：发现战舰开发板使用的是SPI2模块，当时也没有多想为什么要使用SPI2而不是直接使用SPI1。其实关键问题就是出在这里。战舰开发板的主控芯片是STM32103ZET6，144引脚；而我用的四轴使用的是STM32103C8T6，是48引脚。不同的型号相同功能的引脚配置可能不一样。所以我只是根据四轴的PCB原理图，对SPI驱动程序中的引脚进行修改，但仍然使用SPI2。但没想到，STM32103C8T6中SPI功能与引脚是有对应关系的。\n![四轴NRF24L01管教定义](http://7xk7fp.com1.z0.glb.clouddn.com/1.png)\n图中的引脚图就对应的是SPI1，而非SPI2。所以只能使用SPI1而不能使用SPI2。\n![四轴NRF24L01管教定义](http://7xk7fp.com1.z0.glb.clouddn.com/2.png)\n![STM32单片机SPI1重映像](http://7xk7fp.com1.z0.glb.clouddn.com/3.png)\n\n* NRF24L01丢包严重\n\n> 问题描述：NRF24L01调通以后，就可以互相通讯，并且实现了无线遥控控制电机的转速。我是在低转速的情况下调试的程序，当电机转速加快的话，就出现非常严重的丢包。表现为时而能收到遥控数据，时而收不到。而且随着电机转速的增加，收不到的几率越来越大。\n\n> 问题原因：经过查阅，都说是NRF24L01的模块质量不过关，质量不好的受到电机的影响很大。我现在使用的模块大概1元一个，我换了原装的20元一个的模块，丢包现象就消失了。能够很稳定的收到数据。\n\n## 匿名上位机的学习\n\n匿名上位机功能很多，可以发送并接收PID数据，也可以看多个通道的数据波形，也可以直接按照它写好的协议直接查看特定姿态角的波形，同时可以显示电机的油门和电压。目前就用到了这几个功能。原来觉得协议会很复杂，现在学习后感觉还好，而且很方便，功能也很多，还能帮助理解程序。下面就具体讲讲怎么使用匿名上位机。\n\n![匿名上位机界面](http://7xk7fp.com1.z0.glb.clouddn.com/4.png)\n下位机发送自定义数据，格式为：0x88+FUN+LEN+DATA+SUM\nFUN可以是 0xA1到0xAA，共10个；LEN为DATA的长度（不包括0x88、FUN、LEN、SUM）。\nSUM是0x88一直到DATA最后一字节的和，uint8格式。\n\n* 例：发送一个uint8 类型的数据15(0X0F)：\n\n选择uint8\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/5.png)\n发送格式为：0x88+0xA1+0X01(一个uint8 类型的数据长度为8位，1字节)+0X0F+SUM\n\n* 例：发送一个float 类型的数据：\n\n选择Float\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/6.png)\n发送格式为：0x88+0xA1+0X04(一个浮点型数据长度为32位，4字节)+DATA+SUM，其中Float型数据传首地址，第二字节传 转换成char类型后的首地址指针 加1，以此类推，传够四个字节。\n```C\n#define BYTE0(DATA)       (*(char *)(&DATA)) //(char *)(&DATA)取DATA地址，是一个指针，把这个指针转换成char类型，*(char *)(&DATA)，然后再读取这个指针指向的地址中的变量。因为char只有1字节。所以相当于只读取了DATA的前8位。\n#define BYTE1(DATA)       (*((char *)(&DATA) + 1))\n#define BYTE2(DATA)       (*((char *)(&DATA) + 2))\n#define BYTE3(DATA)       (*((char *)(&DATA) + 3))\n```\n\n* 例：同时发送一个uint8 0x03，和一个uint16类型的数据 0x30E0：\n\n选择第一位为uint8，第二位为uint16：\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/7.png)\n\n发送格式为：0x88+0xA1+0X03(8位+16位共3字节)+DATA+SUM\nDATA:send(0x03)+send(BYTE0(0X30E0))+send(BYTE1(0X30E0))\n在上位机中读取数据：\n选择第一帧的第一位，在右边的方框中即可看到uint8类型的数据\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/8.png)\n选择第一帧的第二位，在右边的方框中即可看到uint16类型的数据\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/9.png)\n如果想要看波形的话：\n首先设置通道1显示第一帧的第一位：\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/10.png)\n设置通道2显示第一帧的第二位：\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/11.png)\n在波形显示中勾选serial1 和 serial2即可同时观察这两个数据的波形\n![匿名上位机波形显示部分](http://7xk7fp.com1.z0.glb.clouddn.com/12.png)\n\n显示飞控参数举例：\n根据帮助文档里的描述：飞控显示对应的帧FUN为0xAF，（帧格式：0x88+0xAF+0x1C+ACC DATA+GYRO DATA+MAG DATA+ANGLE DATA+ 0x00 0x00 + 0x00 0x00+SUM，共32字节，ACC/GYRO/MAG/ANGLE(roll/pitch/yaw)数据为int16格式，其中ANGLE的roll和pitch数据为实际值乘以100以后得到的整数值，yaw为乘以10以后得到的整数值，上位机在显示时再 除以100和10）。\n\n对应程序为：\n```C\nunsigned char TxBuffer[32];//一共发送的字节数 记得改\nunsigned char count=0;\n\n#define BYTE0(dwTemp)       (*(char *)(&dwTemp))\n#define BYTE1(dwTemp)       (*((char *)(&dwTemp) + 1))\n#define BYTE2(dwTemp)       (*((char *)(&dwTemp) + 2))\n#define BYTE3(dwTemp)       (*((char *)(&dwTemp) + 3))\n\n/**************************向物理串口发一个字节***************************************\n*******************************************************************************/\n__inline unsigned char UART_Putc(unsigned char data)\t\t\t//\n{\n\tUSART_SendData(USART1,  (uint8_t)data);\n\twhile (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);\n\treturn data;\n}\n\nvoid Uart1_Send_AF(int16_t aa,int16_t bb,int16_t cc,int16_t dd,int16_t ee,int16_t ff,int16_t gg,int16_t hh)\n{\n\tunsigned char sum = 0;\n\tcount=0;\n\tsum += Uart1_Put_Char(0x88);\n\tsum += Uart1_Put_Char(0xAF);\n\tsum += Uart1_Put_Char(0x1C);//共14字节\n\tsum += Uart1_Put_Char(BYTE1(aa));//1\n\tsum += Uart1_Put_Char(BYTE0(aa));\n\tsum += Uart1_Put_Char(BYTE1(bb));//2\n\tsum += Uart1_Put_Char(BYTE0(bb));\n\tsum += Uart1_Put_Char(BYTE1(cc));//3 ACC DATA\n\tsum += Uart1_Put_Char(BYTE0(cc));\n\tsum += Uart1_Put_Char(BYTE1(dd));//4\n\tsum += Uart1_Put_Char(BYTE0(dd));\n\tsum += Uart1_Put_Char(BYTE1(ee));//5\n\tsum += Uart1_Put_Char(BYTE0(ee));\n\tsum += Uart1_Put_Char(BYTE1(ff));//6 GYRO DATA\n\tsum += Uart1_Put_Char(BYTE0(ff));\n\tUart1_Put_Char(0);//7\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);//8\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);//9 磁力计\n\tUart1_Put_Char(0);\n\tsum += Uart1_Put_Char(BYTE1(gg));//10 ANGLE DATA ROLL\n\tsum += Uart1_Put_Char(BYTE0(gg));\n\tsum += Uart1_Put_Char(BYTE1(hh));//11 PITCH\n\tsum += Uart1_Put_Char(BYTE0(hh));\n\tUart1_Put_Char(0);//YAW\n\tUart1_Put_Char(0);\n\t\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(sum);\n}\nunsigned char Uart1_Put_Char(unsigned char DataToSend)\n{\n\tTxBuffer[count++] = DataToSend;  \n\treturn DataToSend;\n}\nvoid send_wave(int tx_num)//一共发送几个字节\n{\n\tchar count_1=0;\n\twhile(count_1<tx_num)\n      UART_Putc(TxBuffer[count_1++]);\n}\n/***********主函数调用***************/\nUart1_Send_AF(0x00,0x00,0x00,0x00,0x00,0x00,(signed short int)(ypr[2]*100),(signed short int)(ypr[1]*100));//只发送了roll和pitch\nsend_wave(32);\n```\n\n使用飞控帧0XAF显示的好处就是，可以在下图中，直接看到各变量的显示\n![匿名上位机飞控状态部分](http://7xk7fp.com1.z0.glb.clouddn.com/13.png)\n","source":"_posts/write.md","raw":"title: \"科研报告\" \ndate: 2015-08-18 16:37:21\ntags: 科研\n---\n####  FLY 竹蜻蜓\n-----\n\n暑假回来，有一点假期综合征，完全不想科研，为了学习一下markdown，就在sublime text3 上安装了markdown preview 插件来写报告，暂时不使用latex。\n\n为了给导师汇报，那就总结一下一个月前的科研工作（对，暑假放了快一个月）。\n\n先总结一下上学期做的工作，和需要完成的工作:\n\n- [x] 利用NRF24L01模块，将战舰开发板与四轴对接，做成了一个简单的遥控器。（遇到了丢包的问题不过换了原装的就好了）\n- [x] 搞清楚了ANO FLY 匿名上位机的协议，由上位机看姿态角波形，为调PID提供方便。\n- [x] 利用上位机调试PID，能勉强实现单通道的姿态平衡。\n- [ ] 开发原装遥控器\n- [ ] 调节好PID，使飞机能飞起来\n- [ ] 学习飞控算法，阅读相关论文\n\n<!--more-->\n## NRF24L01模块\n\nNRF24L01使用SPI接口进行设置（之前已经用过的蓝牙模块和usb转串口模块是使用IIC接口进行通讯），再次熟悉了SPI通信协议。\n\n由于战舰开发板已经有成套的NRF24L01的程序，所以选择了使用战舰开发板作为遥控器，缩短开发时间。只是把接收端从另一个战舰开发板（源程序是两块战舰开发板互相通信）改为四轴即可。\n\n## #程序流程：\n\n#### 1. 发送端\n![发送端程序流程图](http://7xk7fp.com1.z0.glb.clouddn.com/15.png)\n#### 2. 接收端\n![接收端程序流程图](http://7xk7fp.com1.z0.glb.clouddn.com/14.png)\n\n### 遇到的问题：\n\n* NRF24L01的调试一直失败\n\n> 问题描述：在检测是否NRF24L01存在的程序中，一直false，即四轴上的NRF24L01模块无法成功配置。由于是战舰开发板的程序直接移植过来的，在战舰开发板上也能调通，所以查了一晚上也没能找到问题。\n\n> 问题原因：发现战舰开发板使用的是SPI2模块，当时也没有多想为什么要使用SPI2而不是直接使用SPI1。其实关键问题就是出在这里。战舰开发板的主控芯片是STM32103ZET6，144引脚；而我用的四轴使用的是STM32103C8T6，是48引脚。不同的型号相同功能的引脚配置可能不一样。所以我只是根据四轴的PCB原理图，对SPI驱动程序中的引脚进行修改，但仍然使用SPI2。但没想到，STM32103C8T6中SPI功能与引脚是有对应关系的。\n![四轴NRF24L01管教定义](http://7xk7fp.com1.z0.glb.clouddn.com/1.png)\n图中的引脚图就对应的是SPI1，而非SPI2。所以只能使用SPI1而不能使用SPI2。\n![四轴NRF24L01管教定义](http://7xk7fp.com1.z0.glb.clouddn.com/2.png)\n![STM32单片机SPI1重映像](http://7xk7fp.com1.z0.glb.clouddn.com/3.png)\n\n* NRF24L01丢包严重\n\n> 问题描述：NRF24L01调通以后，就可以互相通讯，并且实现了无线遥控控制电机的转速。我是在低转速的情况下调试的程序，当电机转速加快的话，就出现非常严重的丢包。表现为时而能收到遥控数据，时而收不到。而且随着电机转速的增加，收不到的几率越来越大。\n\n> 问题原因：经过查阅，都说是NRF24L01的模块质量不过关，质量不好的受到电机的影响很大。我现在使用的模块大概1元一个，我换了原装的20元一个的模块，丢包现象就消失了。能够很稳定的收到数据。\n\n## 匿名上位机的学习\n\n匿名上位机功能很多，可以发送并接收PID数据，也可以看多个通道的数据波形，也可以直接按照它写好的协议直接查看特定姿态角的波形，同时可以显示电机的油门和电压。目前就用到了这几个功能。原来觉得协议会很复杂，现在学习后感觉还好，而且很方便，功能也很多，还能帮助理解程序。下面就具体讲讲怎么使用匿名上位机。\n\n![匿名上位机界面](http://7xk7fp.com1.z0.glb.clouddn.com/4.png)\n下位机发送自定义数据，格式为：0x88+FUN+LEN+DATA+SUM\nFUN可以是 0xA1到0xAA，共10个；LEN为DATA的长度（不包括0x88、FUN、LEN、SUM）。\nSUM是0x88一直到DATA最后一字节的和，uint8格式。\n\n* 例：发送一个uint8 类型的数据15(0X0F)：\n\n选择uint8\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/5.png)\n发送格式为：0x88+0xA1+0X01(一个uint8 类型的数据长度为8位，1字节)+0X0F+SUM\n\n* 例：发送一个float 类型的数据：\n\n选择Float\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/6.png)\n发送格式为：0x88+0xA1+0X04(一个浮点型数据长度为32位，4字节)+DATA+SUM，其中Float型数据传首地址，第二字节传 转换成char类型后的首地址指针 加1，以此类推，传够四个字节。\n```C\n#define BYTE0(DATA)       (*(char *)(&DATA)) //(char *)(&DATA)取DATA地址，是一个指针，把这个指针转换成char类型，*(char *)(&DATA)，然后再读取这个指针指向的地址中的变量。因为char只有1字节。所以相当于只读取了DATA的前8位。\n#define BYTE1(DATA)       (*((char *)(&DATA) + 1))\n#define BYTE2(DATA)       (*((char *)(&DATA) + 2))\n#define BYTE3(DATA)       (*((char *)(&DATA) + 3))\n```\n\n* 例：同时发送一个uint8 0x03，和一个uint16类型的数据 0x30E0：\n\n选择第一位为uint8，第二位为uint16：\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/7.png)\n\n发送格式为：0x88+0xA1+0X03(8位+16位共3字节)+DATA+SUM\nDATA:send(0x03)+send(BYTE0(0X30E0))+send(BYTE1(0X30E0))\n在上位机中读取数据：\n选择第一帧的第一位，在右边的方框中即可看到uint8类型的数据\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/8.png)\n选择第一帧的第二位，在右边的方框中即可看到uint16类型的数据\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/9.png)\n如果想要看波形的话：\n首先设置通道1显示第一帧的第一位：\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/10.png)\n设置通道2显示第一帧的第二位：\n![匿名上位机高级收码部分](http://7xk7fp.com1.z0.glb.clouddn.com/11.png)\n在波形显示中勾选serial1 和 serial2即可同时观察这两个数据的波形\n![匿名上位机波形显示部分](http://7xk7fp.com1.z0.glb.clouddn.com/12.png)\n\n显示飞控参数举例：\n根据帮助文档里的描述：飞控显示对应的帧FUN为0xAF，（帧格式：0x88+0xAF+0x1C+ACC DATA+GYRO DATA+MAG DATA+ANGLE DATA+ 0x00 0x00 + 0x00 0x00+SUM，共32字节，ACC/GYRO/MAG/ANGLE(roll/pitch/yaw)数据为int16格式，其中ANGLE的roll和pitch数据为实际值乘以100以后得到的整数值，yaw为乘以10以后得到的整数值，上位机在显示时再 除以100和10）。\n\n对应程序为：\n```C\nunsigned char TxBuffer[32];//一共发送的字节数 记得改\nunsigned char count=0;\n\n#define BYTE0(dwTemp)       (*(char *)(&dwTemp))\n#define BYTE1(dwTemp)       (*((char *)(&dwTemp) + 1))\n#define BYTE2(dwTemp)       (*((char *)(&dwTemp) + 2))\n#define BYTE3(dwTemp)       (*((char *)(&dwTemp) + 3))\n\n/**************************向物理串口发一个字节***************************************\n*******************************************************************************/\n__inline unsigned char UART_Putc(unsigned char data)\t\t\t//\n{\n\tUSART_SendData(USART1,  (uint8_t)data);\n\twhile (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);\n\treturn data;\n}\n\nvoid Uart1_Send_AF(int16_t aa,int16_t bb,int16_t cc,int16_t dd,int16_t ee,int16_t ff,int16_t gg,int16_t hh)\n{\n\tunsigned char sum = 0;\n\tcount=0;\n\tsum += Uart1_Put_Char(0x88);\n\tsum += Uart1_Put_Char(0xAF);\n\tsum += Uart1_Put_Char(0x1C);//共14字节\n\tsum += Uart1_Put_Char(BYTE1(aa));//1\n\tsum += Uart1_Put_Char(BYTE0(aa));\n\tsum += Uart1_Put_Char(BYTE1(bb));//2\n\tsum += Uart1_Put_Char(BYTE0(bb));\n\tsum += Uart1_Put_Char(BYTE1(cc));//3 ACC DATA\n\tsum += Uart1_Put_Char(BYTE0(cc));\n\tsum += Uart1_Put_Char(BYTE1(dd));//4\n\tsum += Uart1_Put_Char(BYTE0(dd));\n\tsum += Uart1_Put_Char(BYTE1(ee));//5\n\tsum += Uart1_Put_Char(BYTE0(ee));\n\tsum += Uart1_Put_Char(BYTE1(ff));//6 GYRO DATA\n\tsum += Uart1_Put_Char(BYTE0(ff));\n\tUart1_Put_Char(0);//7\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);//8\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);//9 磁力计\n\tUart1_Put_Char(0);\n\tsum += Uart1_Put_Char(BYTE1(gg));//10 ANGLE DATA ROLL\n\tsum += Uart1_Put_Char(BYTE0(gg));\n\tsum += Uart1_Put_Char(BYTE1(hh));//11 PITCH\n\tsum += Uart1_Put_Char(BYTE0(hh));\n\tUart1_Put_Char(0);//YAW\n\tUart1_Put_Char(0);\n\t\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(0);\n\tUart1_Put_Char(sum);\n}\nunsigned char Uart1_Put_Char(unsigned char DataToSend)\n{\n\tTxBuffer[count++] = DataToSend;  \n\treturn DataToSend;\n}\nvoid send_wave(int tx_num)//一共发送几个字节\n{\n\tchar count_1=0;\n\twhile(count_1<tx_num)\n      UART_Putc(TxBuffer[count_1++]);\n}\n/***********主函数调用***************/\nUart1_Send_AF(0x00,0x00,0x00,0x00,0x00,0x00,(signed short int)(ypr[2]*100),(signed short int)(ypr[1]*100));//只发送了roll和pitch\nsend_wave(32);\n```\n\n使用飞控帧0XAF显示的好处就是，可以在下图中，直接看到各变量的显示\n![匿名上位机飞控状态部分](http://7xk7fp.com1.z0.glb.clouddn.com/13.png)\n","slug":"write","published":1,"updated":"2015-10-08T16:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo6q001vllsgosk67xxd","content":"<h4 id=\"FLY_竹蜻蜓\">FLY 竹蜻蜓</h4><hr>\n<p>暑假回来，有一点假期综合征，完全不想科研，为了学习一下markdown，就在sublime text3 上安装了markdown preview 插件来写报告，暂时不使用latex。</p>\n<p>为了给导师汇报，那就总结一下一个月前的科研工作（对，暑假放了快一个月）。</p>\n<p>先总结一下上学期做的工作，和需要完成的工作:</p>\n<ul>\n<li>[x] 利用NRF24L01模块，将战舰开发板与四轴对接，做成了一个简单的遥控器。（遇到了丢包的问题不过换了原装的就好了）</li>\n<li>[x] 搞清楚了ANO FLY 匿名上位机的协议，由上位机看姿态角波形，为调PID提供方便。</li>\n<li>[x] 利用上位机调试PID，能勉强实现单通道的姿态平衡。</li>\n<li>[ ] 开发原装遥控器</li>\n<li>[ ] 调节好PID，使飞机能飞起来</li>\n<li>[ ] 学习飞控算法，阅读相关论文</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"NRF24L01模块\">NRF24L01模块</h2><p>NRF24L01使用SPI接口进行设置（之前已经用过的蓝牙模块和usb转串口模块是使用IIC接口进行通讯），再次熟悉了SPI通信协议。</p>\n<p>由于战舰开发板已经有成套的NRF24L01的程序，所以选择了使用战舰开发板作为遥控器，缩短开发时间。只是把接收端从另一个战舰开发板（源程序是两块战舰开发板互相通信）改为四轴即可。</p>\n<h2 id=\"#程序流程：\">#程序流程：</h2><h4 id=\"1-_发送端\">1. 发送端</h4><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/15.png\" alt=\"发送端程序流程图\"></p>\n<h4 id=\"2-_接收端\">2. 接收端</h4><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/14.png\" alt=\"接收端程序流程图\"></p>\n<h3 id=\"遇到的问题：\">遇到的问题：</h3><ul>\n<li>NRF24L01的调试一直失败</li>\n</ul>\n<blockquote>\n<p>问题描述：在检测是否NRF24L01存在的程序中，一直false，即四轴上的NRF24L01模块无法成功配置。由于是战舰开发板的程序直接移植过来的，在战舰开发板上也能调通，所以查了一晚上也没能找到问题。</p>\n<p>问题原因：发现战舰开发板使用的是SPI2模块，当时也没有多想为什么要使用SPI2而不是直接使用SPI1。其实关键问题就是出在这里。战舰开发板的主控芯片是STM32103ZET6，144引脚；而我用的四轴使用的是STM32103C8T6，是48引脚。不同的型号相同功能的引脚配置可能不一样。所以我只是根据四轴的PCB原理图，对SPI驱动程序中的引脚进行修改，但仍然使用SPI2。但没想到，STM32103C8T6中SPI功能与引脚是有对应关系的。<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/1.png\" alt=\"四轴NRF24L01管教定义\"><br>图中的引脚图就对应的是SPI1，而非SPI2。所以只能使用SPI1而不能使用SPI2。<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/2.png\" alt=\"四轴NRF24L01管教定义\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/3.png\" alt=\"STM32单片机SPI1重映像\"></p>\n</blockquote>\n<ul>\n<li>NRF24L01丢包严重</li>\n</ul>\n<blockquote>\n<p>问题描述：NRF24L01调通以后，就可以互相通讯，并且实现了无线遥控控制电机的转速。我是在低转速的情况下调试的程序，当电机转速加快的话，就出现非常严重的丢包。表现为时而能收到遥控数据，时而收不到。而且随着电机转速的增加，收不到的几率越来越大。</p>\n<p>问题原因：经过查阅，都说是NRF24L01的模块质量不过关，质量不好的受到电机的影响很大。我现在使用的模块大概1元一个，我换了原装的20元一个的模块，丢包现象就消失了。能够很稳定的收到数据。</p>\n</blockquote>\n<h2 id=\"匿名上位机的学习\">匿名上位机的学习</h2><p>匿名上位机功能很多，可以发送并接收PID数据，也可以看多个通道的数据波形，也可以直接按照它写好的协议直接查看特定姿态角的波形，同时可以显示电机的油门和电压。目前就用到了这几个功能。原来觉得协议会很复杂，现在学习后感觉还好，而且很方便，功能也很多，还能帮助理解程序。下面就具体讲讲怎么使用匿名上位机。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/4.png\" alt=\"匿名上位机界面\"><br>下位机发送自定义数据，格式为：0x88+FUN+LEN+DATA+SUM<br>FUN可以是 0xA1到0xAA，共10个；LEN为DATA的长度（不包括0x88、FUN、LEN、SUM）。<br>SUM是0x88一直到DATA最后一字节的和，uint8格式。</p>\n<ul>\n<li>例：发送一个uint8 类型的数据15(0X0F)：</li>\n</ul>\n<p>选择uint8<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/5.png\" alt=\"匿名上位机高级收码部分\"><br>发送格式为：0x88+0xA1+0X01(一个uint8 类型的数据长度为8位，1字节)+0X0F+SUM</p>\n<ul>\n<li>例：发送一个float 类型的数据：</li>\n</ul>\n<p>选择Float<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/6.png\" alt=\"匿名上位机高级收码部分\"><br>发送格式为：0x88+0xA1+0X04(一个浮点型数据长度为32位，4字节)+DATA+SUM，其中Float型数据传首地址，第二字节传 转换成char类型后的首地址指针 加1，以此类推，传够四个字节。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE0(DATA)       (*(char *)(&amp;DATA)) <span class=\"comment\">//(char *)(&amp;DATA)取DATA地址，是一个指针，把这个指针转换成char类型，*(char *)(&amp;DATA)，然后再读取这个指针指向的地址中的变量。因为char只有1字节。所以相当于只读取了DATA的前8位。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE1(DATA)       (*((char *)(&amp;DATA) + 1))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE2(DATA)       (*((char *)(&amp;DATA) + 2))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE3(DATA)       (*((char *)(&amp;DATA) + 3))</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>例：同时发送一个uint8 0x03，和一个uint16类型的数据 0x30E0：</li>\n</ul>\n<p>选择第一位为uint8，第二位为uint16：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/7.png\" alt=\"匿名上位机高级收码部分\"></p>\n<p>发送格式为：0x88+0xA1+0X03(8位+16位共3字节)+DATA+SUM<br>DATA:send(0x03)+send(BYTE0(0X30E0))+send(BYTE1(0X30E0))<br>在上位机中读取数据：<br>选择第一帧的第一位，在右边的方框中即可看到uint8类型的数据<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/8.png\" alt=\"匿名上位机高级收码部分\"><br>选择第一帧的第二位，在右边的方框中即可看到uint16类型的数据<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/9.png\" alt=\"匿名上位机高级收码部分\"><br>如果想要看波形的话：<br>首先设置通道1显示第一帧的第一位：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/10.png\" alt=\"匿名上位机高级收码部分\"><br>设置通道2显示第一帧的第二位：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/11.png\" alt=\"匿名上位机高级收码部分\"><br>在波形显示中勾选serial1 和 serial2即可同时观察这两个数据的波形<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/12.png\" alt=\"匿名上位机波形显示部分\"></p>\n<p>显示飞控参数举例：<br>根据帮助文档里的描述：飞控显示对应的帧FUN为0xAF，（帧格式：0x88+0xAF+0x1C+ACC DATA+GYRO DATA+MAG DATA+ANGLE DATA+ 0x00 0x00 + 0x00 0x00+SUM，共32字节，ACC/GYRO/MAG/ANGLE(roll/pitch/yaw)数据为int16格式，其中ANGLE的roll和pitch数据为实际值乘以100以后得到的整数值，yaw为乘以10以后得到的整数值，上位机在显示时再 除以100和10）。</p>\n<p>对应程序为：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> TxBuffer[<span class=\"number\">32</span>];<span class=\"comment\">//一共发送的字节数 记得改</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE0(dwTemp)       (*(char *)(&amp;dwTemp))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE1(dwTemp)       (*((char *)(&amp;dwTemp) + 1))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE2(dwTemp)       (*((char *)(&amp;dwTemp) + 2))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE3(dwTemp)       (*((char *)(&amp;dwTemp) + 3))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************************向物理串口发一个字节***************************************</span><br><span class=\"line\">*******************************************************************************/</span></span><br><span class=\"line\">__<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">UART_Putc</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> data)</span>\t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tUSART_SendData(USART1,  (<span class=\"keyword\">uint8_t</span>)data);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Uart1_Send_AF</span><span class=\"params\">(int16_t aa,int16_t bb,int16_t cc,int16_t dd,int16_t ee,int16_t ff,int16_t gg,int16_t hh)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcount=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tsum += Uart1_Put_Char(<span class=\"number\">0x88</span>);</span><br><span class=\"line\">\tsum += Uart1_Put_Char(<span class=\"number\">0xAF</span>);</span><br><span class=\"line\">\tsum += Uart1_Put_Char(<span class=\"number\">0x1C</span>);<span class=\"comment\">//共14字节</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(aa));<span class=\"comment\">//1</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(aa));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(bb));<span class=\"comment\">//2</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(bb));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(cc));<span class=\"comment\">//3 ACC DATA</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(cc));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(dd));<span class=\"comment\">//4</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(dd));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(ee));<span class=\"comment\">//5</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(ee));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(ff));<span class=\"comment\">//6 GYRO DATA</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(ff));</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);<span class=\"comment\">//7</span></span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);<span class=\"comment\">//8</span></span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);<span class=\"comment\">//9 磁力计</span></span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(gg));<span class=\"comment\">//10 ANGLE DATA ROLL</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(gg));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(hh));<span class=\"comment\">//11 PITCH</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(hh));</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);<span class=\"comment\">//YAW</span></span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">Uart1_Put_Char</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> DataToSend)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tTxBuffer[count++] = DataToSend;  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DataToSend;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">send_wave</span><span class=\"params\">(<span class=\"keyword\">int</span> tx_num)</span><span class=\"comment\">//一共发送几个字节</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> count_1=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(count_1&lt;tx_num)</span><br><span class=\"line\">      UART_Putc(TxBuffer[count_1++]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***********主函数调用***************/</span></span><br><span class=\"line\">Uart1_Send_AF(<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,(<span class=\"keyword\">signed</span> <span class=\"keyword\">short</span> <span class=\"keyword\">int</span>)(ypr[<span class=\"number\">2</span>]*<span class=\"number\">100</span>),(<span class=\"keyword\">signed</span> <span class=\"keyword\">short</span> <span class=\"keyword\">int</span>)(ypr[<span class=\"number\">1</span>]*<span class=\"number\">100</span>));<span class=\"comment\">//只发送了roll和pitch</span></span><br><span class=\"line\">send_wave(<span class=\"number\">32</span>);</span><br></pre></td></tr></table></figure></p>\n<p>使用飞控帧0XAF显示的好处就是，可以在下图中，直接看到各变量的显示<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/13.png\" alt=\"匿名上位机飞控状态部分\"></p>\n","excerpt":"<h4 id=\"FLY_竹蜻蜓\">FLY 竹蜻蜓</h4><hr>\n<p>暑假回来，有一点假期综合征，完全不想科研，为了学习一下markdown，就在sublime text3 上安装了markdown preview 插件来写报告，暂时不使用latex。</p>\n<p>为了给导师汇报，那就总结一下一个月前的科研工作（对，暑假放了快一个月）。</p>\n<p>先总结一下上学期做的工作，和需要完成的工作:</p>\n<ul>\n<li>[x] 利用NRF24L01模块，将战舰开发板与四轴对接，做成了一个简单的遥控器。（遇到了丢包的问题不过换了原装的就好了）</li>\n<li>[x] 搞清楚了ANO FLY 匿名上位机的协议，由上位机看姿态角波形，为调PID提供方便。</li>\n<li>[x] 利用上位机调试PID，能勉强实现单通道的姿态平衡。</li>\n<li>[ ] 开发原装遥控器</li>\n<li>[ ] 调节好PID，使飞机能飞起来</li>\n<li>[ ] 学习飞控算法，阅读相关论文</li>\n</ul>","more":"<h2 id=\"NRF24L01模块\">NRF24L01模块</h2><p>NRF24L01使用SPI接口进行设置（之前已经用过的蓝牙模块和usb转串口模块是使用IIC接口进行通讯），再次熟悉了SPI通信协议。</p>\n<p>由于战舰开发板已经有成套的NRF24L01的程序，所以选择了使用战舰开发板作为遥控器，缩短开发时间。只是把接收端从另一个战舰开发板（源程序是两块战舰开发板互相通信）改为四轴即可。</p>\n<h2 id=\"#程序流程：\">#程序流程：</h2><h4 id=\"1-_发送端\">1. 发送端</h4><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/15.png\" alt=\"发送端程序流程图\"></p>\n<h4 id=\"2-_接收端\">2. 接收端</h4><p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/14.png\" alt=\"接收端程序流程图\"></p>\n<h3 id=\"遇到的问题：\">遇到的问题：</h3><ul>\n<li>NRF24L01的调试一直失败</li>\n</ul>\n<blockquote>\n<p>问题描述：在检测是否NRF24L01存在的程序中，一直false，即四轴上的NRF24L01模块无法成功配置。由于是战舰开发板的程序直接移植过来的，在战舰开发板上也能调通，所以查了一晚上也没能找到问题。</p>\n<p>问题原因：发现战舰开发板使用的是SPI2模块，当时也没有多想为什么要使用SPI2而不是直接使用SPI1。其实关键问题就是出在这里。战舰开发板的主控芯片是STM32103ZET6，144引脚；而我用的四轴使用的是STM32103C8T6，是48引脚。不同的型号相同功能的引脚配置可能不一样。所以我只是根据四轴的PCB原理图，对SPI驱动程序中的引脚进行修改，但仍然使用SPI2。但没想到，STM32103C8T6中SPI功能与引脚是有对应关系的。<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/1.png\" alt=\"四轴NRF24L01管教定义\"><br>图中的引脚图就对应的是SPI1，而非SPI2。所以只能使用SPI1而不能使用SPI2。<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/2.png\" alt=\"四轴NRF24L01管教定义\"><br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/3.png\" alt=\"STM32单片机SPI1重映像\"></p>\n</blockquote>\n<ul>\n<li>NRF24L01丢包严重</li>\n</ul>\n<blockquote>\n<p>问题描述：NRF24L01调通以后，就可以互相通讯，并且实现了无线遥控控制电机的转速。我是在低转速的情况下调试的程序，当电机转速加快的话，就出现非常严重的丢包。表现为时而能收到遥控数据，时而收不到。而且随着电机转速的增加，收不到的几率越来越大。</p>\n<p>问题原因：经过查阅，都说是NRF24L01的模块质量不过关，质量不好的受到电机的影响很大。我现在使用的模块大概1元一个，我换了原装的20元一个的模块，丢包现象就消失了。能够很稳定的收到数据。</p>\n</blockquote>\n<h2 id=\"匿名上位机的学习\">匿名上位机的学习</h2><p>匿名上位机功能很多，可以发送并接收PID数据，也可以看多个通道的数据波形，也可以直接按照它写好的协议直接查看特定姿态角的波形，同时可以显示电机的油门和电压。目前就用到了这几个功能。原来觉得协议会很复杂，现在学习后感觉还好，而且很方便，功能也很多，还能帮助理解程序。下面就具体讲讲怎么使用匿名上位机。</p>\n<p><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/4.png\" alt=\"匿名上位机界面\"><br>下位机发送自定义数据，格式为：0x88+FUN+LEN+DATA+SUM<br>FUN可以是 0xA1到0xAA，共10个；LEN为DATA的长度（不包括0x88、FUN、LEN、SUM）。<br>SUM是0x88一直到DATA最后一字节的和，uint8格式。</p>\n<ul>\n<li>例：发送一个uint8 类型的数据15(0X0F)：</li>\n</ul>\n<p>选择uint8<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/5.png\" alt=\"匿名上位机高级收码部分\"><br>发送格式为：0x88+0xA1+0X01(一个uint8 类型的数据长度为8位，1字节)+0X0F+SUM</p>\n<ul>\n<li>例：发送一个float 类型的数据：</li>\n</ul>\n<p>选择Float<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/6.png\" alt=\"匿名上位机高级收码部分\"><br>发送格式为：0x88+0xA1+0X04(一个浮点型数据长度为32位，4字节)+DATA+SUM，其中Float型数据传首地址，第二字节传 转换成char类型后的首地址指针 加1，以此类推，传够四个字节。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE0(DATA)       (*(char *)(&amp;DATA)) <span class=\"comment\">//(char *)(&amp;DATA)取DATA地址，是一个指针，把这个指针转换成char类型，*(char *)(&amp;DATA)，然后再读取这个指针指向的地址中的变量。因为char只有1字节。所以相当于只读取了DATA的前8位。</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE1(DATA)       (*((char *)(&amp;DATA) + 1))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE2(DATA)       (*((char *)(&amp;DATA) + 2))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE3(DATA)       (*((char *)(&amp;DATA) + 3))</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>例：同时发送一个uint8 0x03，和一个uint16类型的数据 0x30E0：</li>\n</ul>\n<p>选择第一位为uint8，第二位为uint16：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/7.png\" alt=\"匿名上位机高级收码部分\"></p>\n<p>发送格式为：0x88+0xA1+0X03(8位+16位共3字节)+DATA+SUM<br>DATA:send(0x03)+send(BYTE0(0X30E0))+send(BYTE1(0X30E0))<br>在上位机中读取数据：<br>选择第一帧的第一位，在右边的方框中即可看到uint8类型的数据<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/8.png\" alt=\"匿名上位机高级收码部分\"><br>选择第一帧的第二位，在右边的方框中即可看到uint16类型的数据<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/9.png\" alt=\"匿名上位机高级收码部分\"><br>如果想要看波形的话：<br>首先设置通道1显示第一帧的第一位：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/10.png\" alt=\"匿名上位机高级收码部分\"><br>设置通道2显示第一帧的第二位：<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/11.png\" alt=\"匿名上位机高级收码部分\"><br>在波形显示中勾选serial1 和 serial2即可同时观察这两个数据的波形<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/12.png\" alt=\"匿名上位机波形显示部分\"></p>\n<p>显示飞控参数举例：<br>根据帮助文档里的描述：飞控显示对应的帧FUN为0xAF，（帧格式：0x88+0xAF+0x1C+ACC DATA+GYRO DATA+MAG DATA+ANGLE DATA+ 0x00 0x00 + 0x00 0x00+SUM，共32字节，ACC/GYRO/MAG/ANGLE(roll/pitch/yaw)数据为int16格式，其中ANGLE的roll和pitch数据为实际值乘以100以后得到的整数值，yaw为乘以10以后得到的整数值，上位机在显示时再 除以100和10）。</p>\n<p>对应程序为：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> TxBuffer[<span class=\"number\">32</span>];<span class=\"comment\">//一共发送的字节数 记得改</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE0(dwTemp)       (*(char *)(&amp;dwTemp))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE1(dwTemp)       (*((char *)(&amp;dwTemp) + 1))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE2(dwTemp)       (*((char *)(&amp;dwTemp) + 2))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE3(dwTemp)       (*((char *)(&amp;dwTemp) + 3))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************************向物理串口发一个字节***************************************</span><br><span class=\"line\">*******************************************************************************/</span></span><br><span class=\"line\">__<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">UART_Putc</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> data)</span>\t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tUSART_SendData(USART1,  (<span class=\"keyword\">uint8_t</span>)data);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Uart1_Send_AF</span><span class=\"params\">(int16_t aa,int16_t bb,int16_t cc,int16_t dd,int16_t ee,int16_t ff,int16_t gg,int16_t hh)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcount=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tsum += Uart1_Put_Char(<span class=\"number\">0x88</span>);</span><br><span class=\"line\">\tsum += Uart1_Put_Char(<span class=\"number\">0xAF</span>);</span><br><span class=\"line\">\tsum += Uart1_Put_Char(<span class=\"number\">0x1C</span>);<span class=\"comment\">//共14字节</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(aa));<span class=\"comment\">//1</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(aa));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(bb));<span class=\"comment\">//2</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(bb));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(cc));<span class=\"comment\">//3 ACC DATA</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(cc));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(dd));<span class=\"comment\">//4</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(dd));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(ee));<span class=\"comment\">//5</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(ee));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(ff));<span class=\"comment\">//6 GYRO DATA</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(ff));</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);<span class=\"comment\">//7</span></span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);<span class=\"comment\">//8</span></span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);<span class=\"comment\">//9 磁力计</span></span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(gg));<span class=\"comment\">//10 ANGLE DATA ROLL</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(gg));</span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE1(hh));<span class=\"comment\">//11 PITCH</span></span><br><span class=\"line\">\tsum += Uart1_Put_Char(BYTE0(hh));</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);<span class=\"comment\">//YAW</span></span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tUart1_Put_Char(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">Uart1_Put_Char</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> DataToSend)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tTxBuffer[count++] = DataToSend;  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DataToSend;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">send_wave</span><span class=\"params\">(<span class=\"keyword\">int</span> tx_num)</span><span class=\"comment\">//一共发送几个字节</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> count_1=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(count_1&lt;tx_num)</span><br><span class=\"line\">      UART_Putc(TxBuffer[count_1++]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***********主函数调用***************/</span></span><br><span class=\"line\">Uart1_Send_AF(<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,<span class=\"number\">0x00</span>,(<span class=\"keyword\">signed</span> <span class=\"keyword\">short</span> <span class=\"keyword\">int</span>)(ypr[<span class=\"number\">2</span>]*<span class=\"number\">100</span>),(<span class=\"keyword\">signed</span> <span class=\"keyword\">short</span> <span class=\"keyword\">int</span>)(ypr[<span class=\"number\">1</span>]*<span class=\"number\">100</span>));<span class=\"comment\">//只发送了roll和pitch</span></span><br><span class=\"line\">send_wave(<span class=\"number\">32</span>);</span><br></pre></td></tr></table></figure></p>\n<p>使用飞控帧0XAF显示的好处就是，可以在下图中，直接看到各变量的显示<br><img src=\"http://7xk7fp.com1.z0.glb.clouddn.com/13.png\" alt=\"匿名上位机飞控状态部分\"></p>"},{"title":"字符串编码","date":"2016-05-17T05:34:14.000Z","_content":"之前对url进行编码的时候遇到过encodeURI和encodeURIComponent，如今要设置cookie的value又遇到了escape()，并且提示说，尽量不用这个方法。\n\n![](img/escape.png)\n\n那么这些方法有什么区别呢？\n\n### escape\n首先这个方法被不推荐使用。如上图所示。\n\n它不会对ASCII字母 数字  * @ - _ + . /这些符号进行转义。\n\n下面这张table表示了escape方法对哪些字符进行编码：\n![](img/escape-encode.png)\n下面这张table表示了escape方法对哪些字符不进行编码：\n![](img/escape-noencode.png)\n### encodeURI\n\n下面内容部分来自于知乎答案：[黄家兴的回答](https://www.zhihu.com/question/21861899/answer/20300871)\n\n他用来对完整的url编码。它不会对：ASCII字母 数字 ~ ! @ # $ & * ( ) = : / , ; ? + ' 这些符号进行转义。\n\n```\nencodeURI(\"http://www.cnblogs.com/season-huang/some other thing\");\n\n//result\n\"http://www.cnblogs.com/season-huang/some%20other%20thing\";\n\n```\n\n其中，空格被编码成了%20。但是如果你用了encodeURIComponent，那么结果变为\n```\n\"http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2Fsome%20other%20thing\"\n```\n看到了区别吗，连 \"/\" 都被编码了，整个URL已经没法用了。\n\n\n下面这张table表示了encodeURI方法对哪些字符进行编码：\n![](img/encodeURI-encode.png)\n下面这张table表示了encodeURI方法对哪些字符不进行编码：\n![](img/encodeURI-noencode.png)\n### encodeURIComponent\n\n他用来对url的部分query参数进行编码。它不会对ASCII字母 数字 ~ ! * ( ) '这些符号进行转义。\n\n```\nvar param = \"http://www.cnblogs.com/season-huang/\"; //param为参数\nparam = encodeURIComponent(param);\nvar url = \"http://www.cnblogs.com?next=\" + param;\nconsole.log(url) //\"http://www.cnblogs.com?next=http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2F\"\n```\n\n下面这张table表示了encodeURIComponent方法对哪些字符进行编码：\n![](img/encodeURIComponent-encode.png)\n\n下面这张table表示了encodeURIComponent方法对哪些字符不进行编码：\n![](img/encodeURIComponent-noencode.png)\n\n### 总结\n\nescape不推荐使用\n\nencodeURIComponent会毁掉整个url，他只适用于当一个url是另一个url的参数时，对其进行编码\n\nencodeURI可以对完整的url进行编码。\n\n### 题外话\n\n这些数据是我用一下代码生成的：\n\n```\nvar arr1 = [];\nvar arr2 = [];\nvar arr3 = [];\nvar arr4 = [];\nvar arr5 = [];\nvar arr6 = [];\nfor (var i = 0; i < 127; i++) {\n    var char = String.fromCharCode(i);\n    if (encodeURI(char) == char) {\n        arr1.push({\n            charcode: i,\n            character: char,\n            encodeURI: encodeURI(char),\n        });\n    }\n    if (encodeURI(char) !== char) {\n        arr2.push({\n            charcode: i,\n            character: char,\n            encodeURI: encodeURI(char),\n        });\n    }\n    if (escape(char) == char) {\n        arr3.push({\n            charcode: i,\n            character: char,\n            escape: escape(char),\n        });\n    }\n    if (escape(char) !== char) {\n        arr4.push({\n            charcode: i,\n            character: char,\n            escape: escape(char),\n        });\n    }\n    if (encodeURIComponent(char) == char) {\n        arr5.push({\n            charcode: i,\n            character: char,\n            encodeURIComponent: encodeURIComponent(char),\n        });\n    }\n    if (encodeURIComponent(char) !== char) {\n        arr6.push({\n            charcode: i,\n            character: char,\n            encodeURIComponent: encodeURIComponent(char),\n        });\n    }\n}\n\n```\n\n然后用console.table(arr1)就可以在控制台打印了。\n\n然而console.table这么方便有木有可以直接把array转成table的api，直接显示在网页上？上网找了一下貌似不太可心。而且这么基础的程序我希望能用原生js实现。so，做了个轮子，把array转成table。基本实现了console.table的用法。[传送门](https://github.com/kenziD/arrayToTable)","source":"_posts/字符串编码.md","raw":"title: 字符串编码\ndate: 2016-05-17 13:34:14\ntags: javascript\n---\n之前对url进行编码的时候遇到过encodeURI和encodeURIComponent，如今要设置cookie的value又遇到了escape()，并且提示说，尽量不用这个方法。\n\n![](img/escape.png)\n\n那么这些方法有什么区别呢？\n\n### escape\n首先这个方法被不推荐使用。如上图所示。\n\n它不会对ASCII字母 数字  * @ - _ + . /这些符号进行转义。\n\n下面这张table表示了escape方法对哪些字符进行编码：\n![](img/escape-encode.png)\n下面这张table表示了escape方法对哪些字符不进行编码：\n![](img/escape-noencode.png)\n### encodeURI\n\n下面内容部分来自于知乎答案：[黄家兴的回答](https://www.zhihu.com/question/21861899/answer/20300871)\n\n他用来对完整的url编码。它不会对：ASCII字母 数字 ~ ! @ # $ & * ( ) = : / , ; ? + ' 这些符号进行转义。\n\n```\nencodeURI(\"http://www.cnblogs.com/season-huang/some other thing\");\n\n//result\n\"http://www.cnblogs.com/season-huang/some%20other%20thing\";\n\n```\n\n其中，空格被编码成了%20。但是如果你用了encodeURIComponent，那么结果变为\n```\n\"http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2Fsome%20other%20thing\"\n```\n看到了区别吗，连 \"/\" 都被编码了，整个URL已经没法用了。\n\n\n下面这张table表示了encodeURI方法对哪些字符进行编码：\n![](img/encodeURI-encode.png)\n下面这张table表示了encodeURI方法对哪些字符不进行编码：\n![](img/encodeURI-noencode.png)\n### encodeURIComponent\n\n他用来对url的部分query参数进行编码。它不会对ASCII字母 数字 ~ ! * ( ) '这些符号进行转义。\n\n```\nvar param = \"http://www.cnblogs.com/season-huang/\"; //param为参数\nparam = encodeURIComponent(param);\nvar url = \"http://www.cnblogs.com?next=\" + param;\nconsole.log(url) //\"http://www.cnblogs.com?next=http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2F\"\n```\n\n下面这张table表示了encodeURIComponent方法对哪些字符进行编码：\n![](img/encodeURIComponent-encode.png)\n\n下面这张table表示了encodeURIComponent方法对哪些字符不进行编码：\n![](img/encodeURIComponent-noencode.png)\n\n### 总结\n\nescape不推荐使用\n\nencodeURIComponent会毁掉整个url，他只适用于当一个url是另一个url的参数时，对其进行编码\n\nencodeURI可以对完整的url进行编码。\n\n### 题外话\n\n这些数据是我用一下代码生成的：\n\n```\nvar arr1 = [];\nvar arr2 = [];\nvar arr3 = [];\nvar arr4 = [];\nvar arr5 = [];\nvar arr6 = [];\nfor (var i = 0; i < 127; i++) {\n    var char = String.fromCharCode(i);\n    if (encodeURI(char) == char) {\n        arr1.push({\n            charcode: i,\n            character: char,\n            encodeURI: encodeURI(char),\n        });\n    }\n    if (encodeURI(char) !== char) {\n        arr2.push({\n            charcode: i,\n            character: char,\n            encodeURI: encodeURI(char),\n        });\n    }\n    if (escape(char) == char) {\n        arr3.push({\n            charcode: i,\n            character: char,\n            escape: escape(char),\n        });\n    }\n    if (escape(char) !== char) {\n        arr4.push({\n            charcode: i,\n            character: char,\n            escape: escape(char),\n        });\n    }\n    if (encodeURIComponent(char) == char) {\n        arr5.push({\n            charcode: i,\n            character: char,\n            encodeURIComponent: encodeURIComponent(char),\n        });\n    }\n    if (encodeURIComponent(char) !== char) {\n        arr6.push({\n            charcode: i,\n            character: char,\n            encodeURIComponent: encodeURIComponent(char),\n        });\n    }\n}\n\n```\n\n然后用console.table(arr1)就可以在控制台打印了。\n\n然而console.table这么方便有木有可以直接把array转成table的api，直接显示在网页上？上网找了一下貌似不太可心。而且这么基础的程序我希望能用原生js实现。so，做了个轮子，把array转成table。基本实现了console.table的用法。[传送门](https://github.com/kenziD/arrayToTable)","slug":"字符串编码","published":1,"updated":"2016-05-17T11:49:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrekwo6q001xllsggkb9cqd1","content":"<p>之前对url进行编码的时候遇到过encodeURI和encodeURIComponent，如今要设置cookie的value又遇到了escape()，并且提示说，尽量不用这个方法。</p>\n<p><img src=\"img/escape.png\" alt=\"\"></p>\n<p>那么这些方法有什么区别呢？</p>\n<h3 id=\"escape\">escape</h3><p>首先这个方法被不推荐使用。如上图所示。</p>\n<p>它不会对ASCII字母 数字  * @ - _ + . /这些符号进行转义。</p>\n<p>下面这张table表示了escape方法对哪些字符进行编码：<br><img src=\"img/escape-encode.png\" alt=\"\"><br>下面这张table表示了escape方法对哪些字符不进行编码：<br><img src=\"img/escape-noencode.png\" alt=\"\"></p>\n<h3 id=\"encodeURI\">encodeURI</h3><p>下面内容部分来自于知乎答案：<a href=\"https://www.zhihu.com/question/21861899/answer/20300871\" target=\"_blank\" rel=\"external\">黄家兴的回答</a></p>\n<p>他用来对完整的url编码。它不会对：ASCII字母 数字 ~ ! @ # $ &amp; * ( ) = : / , ; ? + ‘ 这些符号进行转义。</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encodeURI(<span class=\"string\">\"http://www.cnblogs.com/season-huang/some other thing\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">//<span class=\"literal\">result</span></span><br><span class=\"line\"><span class=\"string\">\"http://www.cnblogs.com/season-huang/some%20other%20thing\"</span>;</span><br></pre></td></tr></table></figure>\n<p>其中，空格被编码成了%20。但是如果你用了encodeURIComponent，那么结果变为<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2Fsome%20other%20thing\"</span></span><br></pre></td></tr></table></figure></p>\n<p>看到了区别吗，连 “/“ 都被编码了，整个URL已经没法用了。</p>\n<p>下面这张table表示了encodeURI方法对哪些字符进行编码：<br><img src=\"img/encodeURI-encode.png\" alt=\"\"><br>下面这张table表示了encodeURI方法对哪些字符不进行编码：<br><img src=\"img/encodeURI-noencode.png\" alt=\"\"></p>\n<h3 id=\"encodeURIComponent\">encodeURIComponent</h3><p>他用来对url的部分query参数进行编码。它不会对ASCII字母 数字 ~ ! * ( ) ‘这些符号进行转义。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> param = <span class=\"string\">\"http://www.cnblogs.com/season-huang/\"</span>; <span class=\"comment\">//param为参数</span></span><br><span class=\"line\">param = <span class=\"built_in\">encodeURIComponent</span>(param);</span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">url</span> = <span class=\"string\">\"http://www.cnblogs.com?next=\"</span> + param;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">url</span>) <span class=\"comment\">//\"http://www.cnblogs.com?next=http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2F\"</span></span><br></pre></td></tr></table></figure>\n<p>下面这张table表示了encodeURIComponent方法对哪些字符进行编码：<br><img src=\"img/encodeURIComponent-encode.png\" alt=\"\"></p>\n<p>下面这张table表示了encodeURIComponent方法对哪些字符不进行编码：<br><img src=\"img/encodeURIComponent-noencode.png\" alt=\"\"></p>\n<h3 id=\"总结\">总结</h3><p>escape不推荐使用</p>\n<p>encodeURIComponent会毁掉整个url，他只适用于当一个url是另一个url的参数时，对其进行编码</p>\n<p>encodeURI可以对完整的url进行编码。</p>\n<h3 id=\"题外话\">题外话</h3><p>这些数据是我用一下代码生成的：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> arr1 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr2 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr3 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr4 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr5 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr6 = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">127</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">var</span> char = <span class=\"built_in\">String</span>.fromCharCode(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">encodeURI</span>(char) == char) &#123;</span><br><span class=\"line\">        arr1.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">encodeURI</span>: <span class=\"built_in\">encodeURI</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">encodeURI</span>(char) !== char) &#123;</span><br><span class=\"line\">        arr2.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">encodeURI</span>: <span class=\"built_in\">encodeURI</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">escape</span>(char) == char) &#123;</span><br><span class=\"line\">        arr3.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">escape</span>: <span class=\"built_in\">escape</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">escape</span>(char) !== char) &#123;</span><br><span class=\"line\">        arr4.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">escape</span>: <span class=\"built_in\">escape</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">encodeURIComponent</span>(char) == char) &#123;</span><br><span class=\"line\">        arr5.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">encodeURIComponent</span>: <span class=\"built_in\">encodeURIComponent</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">encodeURIComponent</span>(char) !== char) &#123;</span><br><span class=\"line\">        arr6.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">encodeURIComponent</span>: <span class=\"built_in\">encodeURIComponent</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后用console.table(arr1)就可以在控制台打印了。</p>\n<p>然而console.table这么方便有木有可以直接把array转成table的api，直接显示在网页上？上网找了一下貌似不太可心。而且这么基础的程序我希望能用原生js实现。so，做了个轮子，把array转成table。基本实现了console.table的用法。<a href=\"https://github.com/kenziD/arrayToTable\" target=\"_blank\" rel=\"external\">传送门</a></p>\n","excerpt":"","more":"<p>之前对url进行编码的时候遇到过encodeURI和encodeURIComponent，如今要设置cookie的value又遇到了escape()，并且提示说，尽量不用这个方法。</p>\n<p><img src=\"img/escape.png\" alt=\"\"></p>\n<p>那么这些方法有什么区别呢？</p>\n<h3 id=\"escape\">escape</h3><p>首先这个方法被不推荐使用。如上图所示。</p>\n<p>它不会对ASCII字母 数字  * @ - _ + . /这些符号进行转义。</p>\n<p>下面这张table表示了escape方法对哪些字符进行编码：<br><img src=\"img/escape-encode.png\" alt=\"\"><br>下面这张table表示了escape方法对哪些字符不进行编码：<br><img src=\"img/escape-noencode.png\" alt=\"\"></p>\n<h3 id=\"encodeURI\">encodeURI</h3><p>下面内容部分来自于知乎答案：<a href=\"https://www.zhihu.com/question/21861899/answer/20300871\">黄家兴的回答</a></p>\n<p>他用来对完整的url编码。它不会对：ASCII字母 数字 ~ ! @ # $ &amp; * ( ) = : / , ; ? + ‘ 这些符号进行转义。</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">encodeURI(<span class=\"string\">\"http://www.cnblogs.com/season-huang/some other thing\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">//<span class=\"literal\">result</span></span><br><span class=\"line\"><span class=\"string\">\"http://www.cnblogs.com/season-huang/some%20other%20thing\"</span>;</span><br></pre></td></tr></table></figure>\n<p>其中，空格被编码成了%20。但是如果你用了encodeURIComponent，那么结果变为<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2Fsome%20other%20thing\"</span></span><br></pre></td></tr></table></figure></p>\n<p>看到了区别吗，连 “/“ 都被编码了，整个URL已经没法用了。</p>\n<p>下面这张table表示了encodeURI方法对哪些字符进行编码：<br><img src=\"img/encodeURI-encode.png\" alt=\"\"><br>下面这张table表示了encodeURI方法对哪些字符不进行编码：<br><img src=\"img/encodeURI-noencode.png\" alt=\"\"></p>\n<h3 id=\"encodeURIComponent\">encodeURIComponent</h3><p>他用来对url的部分query参数进行编码。它不会对ASCII字母 数字 ~ ! * ( ) ‘这些符号进行转义。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> param = <span class=\"string\">\"http://www.cnblogs.com/season-huang/\"</span>; <span class=\"comment\">//param为参数</span></span><br><span class=\"line\">param = <span class=\"built_in\">encodeURIComponent</span>(param);</span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">url</span> = <span class=\"string\">\"http://www.cnblogs.com?next=\"</span> + param;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">url</span>) <span class=\"comment\">//\"http://www.cnblogs.com?next=http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2F\"</span></span><br></pre></td></tr></table></figure>\n<p>下面这张table表示了encodeURIComponent方法对哪些字符进行编码：<br><img src=\"img/encodeURIComponent-encode.png\" alt=\"\"></p>\n<p>下面这张table表示了encodeURIComponent方法对哪些字符不进行编码：<br><img src=\"img/encodeURIComponent-noencode.png\" alt=\"\"></p>\n<h3 id=\"总结\">总结</h3><p>escape不推荐使用</p>\n<p>encodeURIComponent会毁掉整个url，他只适用于当一个url是另一个url的参数时，对其进行编码</p>\n<p>encodeURI可以对完整的url进行编码。</p>\n<h3 id=\"题外话\">题外话</h3><p>这些数据是我用一下代码生成的：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> arr1 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr2 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr3 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr4 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr5 = [];</span><br><span class=\"line\"><span class=\"built_in\">var</span> arr6 = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">127</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">var</span> char = <span class=\"built_in\">String</span>.fromCharCode(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">encodeURI</span>(char) == char) &#123;</span><br><span class=\"line\">        arr1.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">encodeURI</span>: <span class=\"built_in\">encodeURI</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">encodeURI</span>(char) !== char) &#123;</span><br><span class=\"line\">        arr2.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">encodeURI</span>: <span class=\"built_in\">encodeURI</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">escape</span>(char) == char) &#123;</span><br><span class=\"line\">        arr3.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">escape</span>: <span class=\"built_in\">escape</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">escape</span>(char) !== char) &#123;</span><br><span class=\"line\">        arr4.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">escape</span>: <span class=\"built_in\">escape</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">encodeURIComponent</span>(char) == char) &#123;</span><br><span class=\"line\">        arr5.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">encodeURIComponent</span>: <span class=\"built_in\">encodeURIComponent</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">encodeURIComponent</span>(char) !== char) &#123;</span><br><span class=\"line\">        arr6.push(&#123;</span><br><span class=\"line\">            <span class=\"attribute\">charcode</span>: i,</span><br><span class=\"line\">            <span class=\"attribute\">character</span>: char,</span><br><span class=\"line\">            <span class=\"attribute\">encodeURIComponent</span>: <span class=\"built_in\">encodeURIComponent</span>(char),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后用console.table(arr1)就可以在控制台打印了。</p>\n<p>然而console.table这么方便有木有可以直接把array转成table的api，直接显示在网页上？上网找了一下貌似不太可心。而且这么基础的程序我希望能用原生js实现。so，做了个轮子，把array转成table。基本实现了console.table的用法。<a href=\"https://github.com/kenziD/arrayToTable\">传送门</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjrekwo5z000kllsguvcx6i59","category_id":"cjrekwo61000ollsgt4xnrcjp","_id":"cjrekwo65000xllsga3rwp08q"},{"post_id":"cjrekwo6e001kllsgfaxhg2ze","category_id":"cjrekwo61000ollsgt4xnrcjp","_id":"cjrekwo6f001ollsge97ze5kl"}],"PostTag":[{"post_id":"cjrekwo5j0003llsgg6a2m2zj","tag_id":"cjrekwo5k0005llsgwfd9ebeh","_id":"cjrekwo5q000allsg9zpxnxg3"},{"post_id":"cjrekwo5m0006llsgh2yl127s","tag_id":"cjrekwo5p0008llsgx86rvsio","_id":"cjrekwo5u000ellsgnl28kscg"},{"post_id":"cjrekwo5o0007llsgxj5ilnbi","tag_id":"cjrekwo5p0008llsgx86rvsio","_id":"cjrekwo5y000illsggivf6hqf"},{"post_id":"cjrekwo5p0009llsgb7pgi50h","tag_id":"cjrekwo5p0008llsgx86rvsio","_id":"cjrekwo60000mllsgk5hpd0y5"},{"post_id":"cjrekwo5q000bllsg8j1d7nrm","tag_id":"cjrekwo5z000lllsgqt5o4lfo","_id":"cjrekwo63000sllsgo1k4mgui"},{"post_id":"cjrekwo5v000gllsgs8u54ny3","tag_id":"cjrekwo5z000lllsgqt5o4lfo","_id":"cjrekwo65000wllsgq0a3c3t5"},{"post_id":"cjrekwo64000vllsg675q093h","tag_id":"cjrekwo5p0008llsgx86rvsio","_id":"cjrekwo66000zllsgu10kvo06"},{"post_id":"cjrekwo5y000jllsgzfdkgzwd","tag_id":"cjrekwo64000ullsgxq2q27e2","_id":"cjrekwo670012llsgrrzqv96s"},{"post_id":"cjrekwo65000yllsg2en2zf56","tag_id":"cjrekwo5k0005llsgwfd9ebeh","_id":"cjrekwo680014llsg15pjevp9"},{"post_id":"cjrekwo670013llsgntl1oms7","tag_id":"cjrekwo5k0005llsgwfd9ebeh","_id":"cjrekwo690017llsgpdu6azmz"},{"post_id":"cjrekwo5z000kllsguvcx6i59","tag_id":"cjrekwo660010llsgh59n0wnw","_id":"cjrekwo6a0019llsgsrxiu6sm"},{"post_id":"cjrekwo680016llsgi8d9san0","tag_id":"cjrekwo5k0005llsgwfd9ebeh","_id":"cjrekwo6b001cllsg54k5hlvp"},{"post_id":"cjrekwo690018llsg1lhvdljm","tag_id":"cjrekwo680015llsgaysbzs38","_id":"cjrekwo6c001ellsg86kmz1iu"},{"post_id":"cjrekwo61000pllsgy36vz2c3","tag_id":"cjrekwo680015llsgaysbzs38","_id":"cjrekwo6d001hllsgxcub11wg"},{"post_id":"cjrekwo63000tllsgm29oghgk","tag_id":"cjrekwo6a001bllsg5ok8fzdj","_id":"cjrekwo6d001jllsgrfrqljrh"},{"post_id":"cjrekwo6a001allsg26z9emq3","tag_id":"cjrekwo6c001gllsgo0qs699u","_id":"cjrekwo6f001mllsgu8d4rxnk"},{"post_id":"cjrekwo6e001kllsgfaxhg2ze","tag_id":"cjrekwo660010llsgh59n0wnw","_id":"cjrekwo6f001nllsg32bit1zo"},{"post_id":"cjrekwo6b001dllsgytc90ctw","tag_id":"cjrekwo6e001lllsgesgfgpq8","_id":"cjrekwo6g001qllsgwm0laiyv"},{"post_id":"cjrekwo6c001fllsgo4a0nhet","tag_id":"cjrekwo6f001pllsg9i3ndgog","_id":"cjrekwo6g001rllsgk8rjjgtr"},{"post_id":"cjrekwo6o001sllsg6qcrxxpv","tag_id":"cjrekwo5p0008llsgx86rvsio","_id":"cjrekwo6p001ullsgtj3evxq8"},{"post_id":"cjrekwo6o001sllsg6qcrxxpv","tag_id":"cjrekwo680015llsgaysbzs38","_id":"cjrekwo6q001wllsgat6zkjei"},{"post_id":"cjrekwo6q001vllsgosk67xxd","tag_id":"cjrekwo6f001pllsg9i3ndgog","_id":"cjrekwo6r001yllsghl9b93i6"},{"post_id":"cjrekwo6q001xllsggkb9cqd1","tag_id":"cjrekwo6s001zllsgpkrj5k1w","_id":"cjrekwo6t0020llsg99tu67tx"}],"Tag":[{"name":"pixhawk","_id":"cjrekwo5k0005llsgwfd9ebeh"},{"name":"css","_id":"cjrekwo5p0008llsgx86rvsio"},{"name":"git","_id":"cjrekwo5z000lllsgqt5o4lfo"},{"name":"hexo","_id":"cjrekwo64000ullsgxq2q27e2"},{"name":"生活，婚礼，朋友","_id":"cjrekwo660010llsgh59n0wnw"},{"name":"Javascript","_id":"cjrekwo680015llsgaysbzs38"},{"name":"protocal","_id":"cjrekwo6a001bllsg5ok8fzdj"},{"name":"nodeJs,protocal","_id":"cjrekwo6c001gllsgo0qs699u"},{"name":"python","_id":"cjrekwo6e001lllsgesgfgpq8"},{"name":"科研","_id":"cjrekwo6f001pllsg9i3ndgog"},{"name":"javascript","_id":"cjrekwo6s001zllsgpkrj5k1w"}]}}